
*** Warning: Warning: This package depends on the following classes:
  VMStructType
  VMThreadingConstants
  VMBasicConstants
You must resolve these dependencies before you will be able to load these definitions: 
  MockEmptyVMStruct
  MockEmptyVMStruct>>#instVarNamesAndTypesForTranslationDo:
  MockEmptyVMStructWithRedefinedStructName
  MockEmptyVMStructWithRedefinedStructName>>#structTypeName
  VMMTTests
  VMMTTests>>#runCaseManaged
  VMMTTests>>#setUp
  VMMTTests>>#testAssignableThreadIsNotVMOwner
  VMMTTests>>#testAssignableThreadIsWilling
  VMMTTests>>#testDisownOnRelinquishPutsVMInRelinquishingState
  VMMTTests>>#testDisownRemembersLastDisownedThread
  VMMTTests>>#testDisownVMReleasesVM
  VMMTTests>>#testDisownVMSetsCurrentThreadToUnavailable
  VMMTTests>>#testHeartbeatReleasesVMWhenNoProcessIsWilling
  VMMTTests>>#testHeartbeatWakesUpWaitingVMThread
  VMMTTests>>#testInitialThreadIsAssignableOrInVM
  VMMTTests>>#testInitialVMHasManyThreads
  VMMTTests>>#testInitialVMHasNoDisowningVMThread
  VMMTTests>>#testInitialVMThreadsAreUinitialized
  VMMTTests>>#testOwnFreeVMOwnsSameThread
  VMMTTests>>#testPreemptedProcessIsMarkedInExternalCode
  VMMTTests>>#testPreemptedProcessSetsCurrentMethodInThread
  VMMTTests>>#testPreemptedVMThreadHasPreemptedProcessPriority
  VMMTTests>>#testPreemptedVMThreadIsListedInAWOLProcesses
  VMMTTests>>#testPreemptedVMThreadIsTemporarilyAffinedToProcess
  VMMTTests>>#testTryOwningOwnedVMLeavesThreadInWaitingState
  VMMTTests>>#testWantingThreadIsWilling
  VMMTTests>>#testWantingThreadIsWillingOverAssignableThread


*** Warning: Warning: This package depends on the following classes:
  StackMTInterpreterSimulator
  VMClass
  CogThreadManager
You must resolve these dependencies before you will be able to load these definitions: 
  SpurMockMemory
  SpurMockMemory>>#hasSpurMemoryManagerAPI
  SpurMockMemory>>#initializeWithOptions:
  SpurMockMemory>>#numSmallIntegerTagBits
  SpurMockMemory>>#simulatorClass
  SpurMockMemory>>#wordSize
  SpurMockMemory>>#addressCouldBeObj:
  SpurMockMemory>>#addressOf:
  SpurMockMemory>>#baseHeaderSize
  SpurMockMemory>>#bytesPerOop
  SpurMockMemory>>#coInterpreter:
  SpurMockMemory>>#fetchPointer:ofObject:
  SpurMockMemory>>#followField:ofObject:
  SpurMockMemory>>#followObjField:ofObject:
  SpurMockMemory>>#goodContextSize:
  SpurMockMemory>>#hasSpurMemoryManagerAPI
  SpurMockMemory>>#headerIndicatesAlternateBytecodeSet:
  SpurMockMemory>>#initialize
  SpurMockMemory>>#integerObjectOf:
  SpurMockMemory>>#integerValueOf:
  SpurMockMemory>>#isContext:
  SpurMockMemory>>#isForwarded:
  SpurMockMemory>>#isIntegerObject:
  SpurMockMemory>>#isNonImmediate:
  SpurMockMemory>>#isOopCompiledMethod:
  SpurMockMemory>>#isOopForwarded:
  SpurMockMemory>>#lastPointerOf:
  SpurMockMemory>>#lengthOf:
  SpurMockMemory>>#literalCountOf:
  SpurMockMemory>>#maxCInteger
  SpurMockMemory>>#memoryActiveProcess
  SpurMockMemory>>#methodHeaderOf:
  SpurMockMemory>>#nextAddress
  SpurMockMemory>>#nilObject
  SpurMockMemory>>#numBytesOfBytes:
  SpurMockMemory>>#numSlotsOf:
  SpurMockMemory>>#objectFor:
  SpurMockMemory>>#processorSchedulerMock
  SpurMockMemory>>#shiftForWord
  SpurMockMemory>>#smallIntegerTag
  SpurMockMemory>>#splObj:
  SpurMockMemory>>#startOfMemory
  SpurMockMemory>>#storePointer:ofObject:withValue:
  SpurMockMemory>>#storePointerUnchecked:ofObject:withValue:
  SpurMockMemory>>#wordSize
  StackMTInterpreterSimulatorForTest
  StackMTInterpreterSimulatorForTest>>#onObjectMemory:options:
  StackMTInterpreterSimulatorForTest>>#enterSmalltalkExecutiveImplementation
  StackMTInterpreterSimulatorForTest>>#ioNewOS:Thread:
  StackMTInterpreterSimulatorForTest>>#methodCallingPush
  VMMockCogThreadManager
  VMMockCogThreadManager>>#ioWaitOnOSSemaphore:

THERE_BE_DRAGONS_HERE

13 November 2019 10:34:27.810682 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(98109952)
	Receiver's instance variables: 
		bounds: 	(165@520) corner: (181@536)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(165@520) mouseOver 3098357 nil]
		targetOffset: 	(30@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3098357 165 520 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(165@520) corner: (181@536)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(165@520) mouseOver 3098357 nil]
		targetOffset: 	(30@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3098357 165 520 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	3098861
		lastStepMessage: 	nil
		lastCycleTime: 	3098883
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(27687424)))
		lastAlarmTime: 	3098861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 10:34:54.310571 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(427255296)
	Receiver's instance variables: 
		bounds: 	(780@648) corner: (796@664)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(780@648) mouseOver 3125235 nil]
		targetOffset: 	(338@94)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3125235 780 648 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(780@648) corner: (796@664)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(780@648) mouseOver 3125235 nil]
		targetOffset: 	(338@94)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3125235 780 648 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	3125541
		lastStepMessage: 	nil
		lastCycleTime: 	3125562
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(337121280)))
		lastAlarmTime: 	3125541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#asSymbol was sent to nil
13 November 2019 11:05:30.87314 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asSymbol
		exception: 	MessageNotUnderstood: receiver of "asSymbol" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Protocol class>>name:
	Receiver: Protocol
	Arguments and temporary variables: 
		nm: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addAllMethodsFrom:->Protocol>>#addAllMethodsFro...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AllProtocol}
		name: 	#Protocol
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Protocols'


ProtocolOrganizer>>addProtocolNamed:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aName: 	nil
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


[ self addProtocolNamed: name ] in ProtocolOrganizer>>classify:inProtocolNamed:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aSymbol: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
		name: 	nil
		protocol: 	nil
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


IdentitySet(Collection)>>detect:ifFound:ifNone:
	Receiver: an IdentitySet(Protocol (primitive support) - 36 selector(s) Protocol (control primitives)...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | e name = aByteString ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self addProtocolNamed: name ]
	Receiver's instance variables: 
		tally: 	20
		array: 	an Array(nil nil nil nil nil nil Protocol (primitive support) - 36 selec...etc...


IdentitySet(Collection)>>detect:ifNone:
	Receiver: an IdentitySet(Protocol (primitive support) - 36 selector(s) Protocol (control primitives)...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | e name = aByteString ]
		exceptionBlock: 	[ self addProtocolNamed: name ]
	Receiver's instance variables: 
		tally: 	20
		array: 	an Array(nil nil nil nil nil nil Protocol (primitive support) - 36 selec...etc...


ProtocolOrganizer>>getProtocolNamed:ifNone:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aByteString: 	nil
		aBlockClosure: 	[ self addProtocolNamed: name ]
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


ProtocolOrganizer>>classify:inProtocolNamed:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aSymbol: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
		name: 	nil
		protocol: 	nil
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


ClassOrganization>>classify:under:suppressIfDefault:
	Receiver: a ClassOrganization
	Arguments and temporary variables: 
		selector: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
		aBoolean: 	true
		oldCategory: 	#'as yet unclassified'
		forceNotify: 	true
		oldProtocols: 	#()
	Receiver's instance variables: 
		comment: 	a RemoteString
		commentStamp: 	''
		protocolOrganizer: 	a ProtocolOrganizer
		organizedClass: 	InterpreterPrimitives


ClassOrganization>>classify:under:
	Receiver: a ClassOrganization
	Arguments and temporary variables: 
		aSymbol: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
	Receiver's instance variables: 
		comment: 	a RemoteString
		commentStamp: 	''
		protocolOrganizer: 	a ProtocolOrganizer
		organizedClass: 	InterpreterPrimitives


[ self organization
	classify: selector
	under:
		(category = Protocol unclassified
			ifTrue: [ oldProtocol ]
			ifFalse: [ category ]) ] in InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		selector: 	#newImageNamed:withArguments:
		compiledMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:
		category: 	nil
		priorMethodOrNil: 	nil
		priorOriginOrNil: 	nil
		oldProtocol: 	#'as yet unclassified'
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


BlockClosure>>ensure:
	Receiver: [ self organization
	classify: selector
	under:
		(category = Protocol unclassified
			ifT...etc...
	Arguments and temporary variables: 
		aBlock: 	[ suspended := oldSuspended ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	InterpreterPrimitives class(ClassDescription)>>addAndClassifySele...etc...
		startpc: 	222
		numArgs: 	0


SystemAnnouncer>>suspendAllWhile:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aBlock: 	[ self organization
	classify: selector
	under:
		(category = Protocol ...etc...
		oldSuspended: 	false
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	true
		private: 	an Announcer
		storedAnnouncements: 	nil


InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		selector: 	#newImageNamed:withArguments:
		compiledMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:
		category: 	nil
		priorMethodOrNil: 	nil
		priorOriginOrNil: 	nil
		oldProtocol: 	#'as yet unclassified'
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		text: 	a Text for 'newImageNamed: anImageName withArguments: anArrayOfArgs

	

	...etc...
		category: 	nil
		changeStamp: 	'Pablo 11/13/2019 11:05'
		requestor: 	a RubScrolledTextMorph(1066556416)
		logSource: 	true
		method: 	InterpreterPrimitives>>#newImageNamed:withArguments:
		selector: 	#newImageNamed:withArguments:
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		text: 	a Text for 'newImageNamed: anImageName withArguments: anArrayOfArgs

	

	...etc...
		category: 	nil
		changeStamp: 	'Pablo 11/13/2019 11:05'
		requestor: 	a RubScrolledTextMorph(1066556416)
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


InterpreterPrimitives class(ClassDescription)>>compile:classified:notifying:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		text: 	a Text for 'newImageNamed: anImageName withArguments: anArrayOfArgs

	

	...etc...
		category: 	nil
		requestor: 	a RubScrolledTextMorph(1066556416)
		stamp: 	'Pablo 11/13/2019 11:05'
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


ClyMethodCodeEditorToolMorph>>applyChanges
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		selector: 	nil
		methodClass: 	InterpreterPrimitives
		currentMethod: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ self changesAreAboutApply.
applied := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		applied: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


BlockClosure>>on:do:
	Receiver: [ self changesAreAboutApply.
applied := self applyChanges ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :err | 
textModel text: self editingText.
textMorph hasUnaccep...etc...
	Receiver's instance variables: 
		outerContext: 	[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply...etc...
		startpc: 	140
		numArgs: 	0


[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		applied: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


BlockClosure>>ensure:
	Receiver: [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyCh...etc...
	Arguments and temporary variables: 
		aBlock: 	[ applyingChanges := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAcce...etc...
		startpc: 	130
		numArgs: 	0


ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>applyChangesBy:
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		aBlock: 	[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
appl...etc...
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		applied: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


MessageSend>>value
	Receiver: MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(331595776))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyMethodCodeEditorToolMorph(331595776)
		selector: 	#changesAccepted
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(331595776))
	Arguments and temporary variables: 
		arg: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a ClyMethodCodeEditorToolMorph(331595776)
		selector: 	#changesAccepted
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(331595776))
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyMethodCodeEditorToolMorph(331595776)
		selector: 	#changesAccepted
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a ClyMethodCodeEditorToolMorph(331595776)
		action: 	MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(33159577...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a ClyMethodCodeEditorToolMorph(331595776)
		action: 	MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(33159577...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		announcement: 	a RubTextAccepted
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubScrolledTextMorph>>acceptContents
	Receiver: a RubScrolledTextMorph(1066556416)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@678.0)
		owner: 	a PanelMorph(569287168)
		submorphs: 	an Array(a RubTextScrollPane(615418880) a RubAdornmentDisplayer(9414...etc...
		fullBounds: 	(7@402) corner: (1434@678)
		color: 	Color white
		extension: 	a MorphExtension (692116992) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	nil
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(615418880)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(800009216) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>whenTextAcceptRequest:
	Receiver: a RubScrolledTextMorph(1066556416)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@678.0)
		owner: 	a PanelMorph(569287168)
		submorphs: 	an Array(a RubTextScrollPane(615418880) a RubAdornmentDisplayer(9414...etc...
		fullBounds: 	(7@402) corner: (1434@678)
		color: 	Color white
		extension: 	a MorphExtension (692116992) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	nil
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(615418880)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(800009216) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
Protocol class>>name:
ProtocolOrganizer>>addProtocolNamed:
[ self addProtocolNamed: name ] in ProtocolOrganizer>>classify:inProtocolNamed:
IdentitySet(Collection)>>detect:ifFound:ifNone:
IdentitySet(Collection)>>detect:ifNone:
ProtocolOrganizer>>getProtocolNamed:ifNone:
ProtocolOrganizer>>classify:inProtocolNamed:
ClassOrganization>>classify:under:suppressIfDefault:
ClassOrganization>>classify:under:
[ self organization
	classify: selector
	under:
		(category = Protocol unclassified
			ifTrue: [ oldProtocol ]
			ifFalse: [ category ]) ] in InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
BlockClosure>>ensure:
SystemAnnouncer>>suspendAllWhile:
InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:
InterpreterPrimitives class(ClassDescription)>>compile:classified:notifying:
ClyMethodCodeEditorToolMorph>>applyChanges
[ self changesAreAboutApply.
applied := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
BlockClosure>>on:do:
[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
BlockClosure>>ensure:
ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>applyChangesBy:
ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
RubEditingArea(RubAbstractTextArea)>>acceptContents
ClyTextEditor(RubTextEditor)>>accept
[ :target | target editor accept ] in RubTextEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in CmdKMDispatcher(KMDispatcher)>>dispatch:
OrderedCollection>>do:
CmdKMDispatcher(KMDispatcher)>>dispatch:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
CmdKMDispatcher(KMDispatcher)>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:02:39.919977 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(514639872)
	Receiver's instance variables: 
		bounds: 	(371@548) corner: (387@564)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(371@548) mouseOver 11990047 nil]
		targetOffset: 	(16@684)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 11990047 371 548 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(371@548) corner: (387@564)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(371@548) mouseOver 11990047 nil]
		targetOffset: 	(16@684)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 11990047 371 548 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	11991026
		lastStepMessage: 	nil
		lastCycleTime: 	11991051
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(532238848)))
		lastAlarmTime: 	11991026
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
13 November 2019 1:09:19.17035 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(759837696)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(21626368)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (139375104)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(759837696)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(21626368)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		each: 	a ClyMethodCodeEditorToolMorph(21626368)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(21626368) nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>itemsChangedIn:
	Receiver: a ClyQueryViewMorph(294241792)
	Arguments and temporary variables: 
		aDataSource: 	a ClyCollapsedDataSource
		selectionWasEmpty: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(162950144)
		submorphs: 	an Array(a FTTableMorph(65669632))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (979340800)
		table: 	a FTTableMorph(65669632)
		browser: 	a ClyQueryBrowser(759837696)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyCollapsedDataSource(ClyDataSource)>>runUpdate
	Receiver: a ClyCollapsedDataSource
	Arguments and temporary variables: 

	Receiver's instance variables: 
		table: 	a FTTableMorph(65669632)
		query: 	a ClyAsyncQuery(methods sources with 'setMyCurrentThread', class comment...etc...
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(methods sources with 'setMy...etc...
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(294241792)
		dirty: 	false
		expandedItems: 	a SortedCollection()


[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
	Receiver: a ClyDataSourceUpdateScheduler
	Arguments and temporary variables: 
		dataSources: 	an OrderedCollection(a ClyCollapsedDataSource)
		each: 	a ClyCollapsedDataSource
	Receiver's instance variables: 
		updateQueue: 	AtomicSharedQueue with 0 items
		process: 	a Process in AtomicSharedQueue>>waitForNewItems


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyCollapsedDataSource)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each runUpdate ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyCollapsedDataSource nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
13 November 2019 1:09:25.67157 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(21626368)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (139375104)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(759837696)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(21626368)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(21626368)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(759837696)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(759837696)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState class(ClyBrowserState class)>>of:
	Receiver: ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(759837696)
	Receiver's instance variables: 
		superclass: 	ClyBrowserState
		methodDict: 	a MethodDictionary(#activeScope->ClyQueryBrowserState>>#activeScope...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyQueryBrowserState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemTools-QueryBrowser-UI'


ClyQueryBrowser>>snapshotState
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 
		navigationFailed: 	false
		aBlock: 	[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTool...etc...
		state: 	nil
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 
		newTools: 	nil
		aQueryView: 	a ClyQueryViewMorph(294241792)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(294241792)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(162950144)
		submorphs: 	an Array(a FTTableMorph(65669632))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (979340800)
		table: 	a FTTableMorph(65669632)
		browser: 	a ClyQueryBrowser(759837696)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(294241792)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(162950144)
		submorphs: 	an Array(a FTTableMorph(65669632))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (979340800)
		table: 	a FTTableMorph(65669632)
		browser: 	a ClyQueryBrowser(759837696)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(294241792)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(294241792)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(294241792)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(294241792)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
ClyQueryBrowserState>>retrieveStateFrom:
ClyQueryBrowserState class(ClyBrowserState class)>>of:
ClyQueryBrowser>>snapshotState
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:11:49.581334 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(943994880)
	Receiver's instance variables: 
		bounds: 	(676@581) corner: (692@597)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(676@581) mouseOver 12539109 nil]
		targetOffset: 	(650@459)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12539109 676 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(676@581) corner: (692@597)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(676@581) mouseOver 12539109 nil]
		targetOffset: 	(650@459)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12539109 676 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	12540703
		lastStepMessage: 	nil
		lastCycleTime: 	12540726
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(732914688)))
		lastAlarmTime: 	12540703
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:30:41.220286 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(943994880)
	Receiver's instance variables: 
		bounds: 	(764@564) corner: (780@580)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(764@564) mouseOver 13670250 nil]
		targetOffset: 	(738@442)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13670250 764 564 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(764@564) corner: (780@580)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(764@564) mouseOver 13670250 nil]
		targetOffset: 	(738@442)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13670250 764 564 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	13672448
		lastStepMessage: 	nil
		lastCycleTime: 	13672471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(732914688)))
		lastAlarmTime: 	13672448
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
13 November 2019 1:39:08.899501 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(48120320)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(102535680)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (226137088)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(48120320)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(102535680)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		each: 	a ClyMethodCodeEditorToolMorph(102535680)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(102535680) nil nil nil nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>itemsChangedIn:
	Receiver: a ClyQueryViewMorph(673286656)
	Arguments and temporary variables: 
		aDataSource: 	a ClyCollapsedDataSource
		selectionWasEmpty: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(1023407104)
		submorphs: 	an Array(a FTTableMorph(944602112))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (656441856)
		table: 	a FTTableMorph(944602112)
		browser: 	a ClyQueryBrowser(48120320)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyCollapsedDataSource(ClyDataSource)>>runUpdate
	Receiver: a ClyCollapsedDataSource
	Arguments and temporary variables: 

	Receiver's instance variables: 
		table: 	a FTTableMorph(944602112)
		query: 	a ClyAsyncQuery(methods sources with 'setMyCurrentThread', class comment...etc...
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(methods sources with 'setMy...etc...
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(673286656)
		dirty: 	false
		expandedItems: 	a SortedCollection()


[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
	Receiver: a ClyDataSourceUpdateScheduler
	Arguments and temporary variables: 
		dataSources: 	an OrderedCollection(a ClyCollapsedDataSource)
		each: 	a ClyCollapsedDataSource
	Receiver's instance variables: 
		updateQueue: 	AtomicSharedQueue with 0 items
		process: 	a Process in AtomicSharedQueue>>waitForNewItems


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyCollapsedDataSource)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each runUpdate ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyCollapsedDataSource nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
13 November 2019 1:39:14.006917 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(102535680)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (226137088)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(48120320)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(102535680)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(102535680)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(48120320)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(48120320)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState class(ClyBrowserState class)>>of:
	Receiver: ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(48120320)
	Receiver's instance variables: 
		superclass: 	ClyBrowserState
		methodDict: 	a MethodDictionary(#activeScope->ClyQueryBrowserState>>#activeScope...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyQueryBrowserState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemTools-QueryBrowser-UI'


ClyQueryBrowser>>snapshotState
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 
		navigationFailed: 	false
		aBlock: 	[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTool...etc...
		state: 	nil
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 
		newTools: 	nil
		aQueryView: 	a ClyQueryViewMorph(673286656)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(673286656)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(1023407104)
		submorphs: 	an Array(a FTTableMorph(944602112))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (656441856)
		table: 	a FTTableMorph(944602112)
		browser: 	a ClyQueryBrowser(48120320)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(673286656)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(1023407104)
		submorphs: 	an Array(a FTTableMorph(944602112))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (656441856)
		table: 	a FTTableMorph(944602112)
		browser: 	a ClyQueryBrowser(48120320)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(673286656)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(673286656)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(673286656)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(673286656)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
ClyQueryBrowserState>>retrieveStateFrom:
ClyQueryBrowserState class(ClyBrowserState class)>>of:
ClyQueryBrowser>>snapshotState
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:40:15.415407 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(373354496)
	Receiver's instance variables: 
		bounds: 	(711@584) corner: (727@600)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(711@584) mouseOver 14245204 nil]
		targetOffset: 	(286@38)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14245204 711 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(711@584) corner: (727@600)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(711@584) mouseOver 14245204 nil]
		targetOffset: 	(286@38)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14245204 711 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	14246514
		lastStepMessage: 	nil
		lastCycleTime: 	14246537
		alarms: 	a Heap()
		lastAlarmTime: 	14246514
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:46:49.586215 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(823261184)
	Receiver's instance variables: 
		bounds: 	(393@553) corner: (409@569)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(393@553) mouseOver 14639334 nil]
		targetOffset: 	(289@37)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14639334 393 553 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(393@553) corner: (409@569)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(393@553) mouseOver 14639334 nil]
		targetOffset: 	(289@37)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14639334 393 553 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	14640818
		lastStepMessage: 	nil
		lastCycleTime: 	14640841
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(827165696)))
		lastAlarmTime: 	14640818
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:55:44.884464 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(707623936)
	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	15176143
		lastStepMessage: 	nil
		lastCycleTime: 	15176166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1055244800)))
		lastAlarmTime: 	15176143
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 2:20:03.529833 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(707623936)
	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	15176143
		lastStepMessage: 	nil
		lastCycleTime: 	15176166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1055244800)))
		lastAlarmTime: 	15176143
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
13 November 2019 3:00:24.964751 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

CCodeGeneratorGlobalStructure(Object)>>haltOnce
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 

	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCVariablesOn:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		verbose: 	false
		methodList: 	an Array(a TMethod (StackInterpreter>>interpret) a TMethod (CogStac...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		stream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gene...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
	Receiver: a CrossPlatformVMMaker
	Arguments and temporary variables: 
		cg: 	a CCodeGeneratorGlobalStructure
		vmHeaderContents: 	'#define VM_PROXY_MAJOR 1
#define VM_PROXY_MINOR 15

#define ...etc...
	Receiver's instance variables: 
		inline: 	true
		forBrowser: 	false
		allPlugins: 	a SortedCollection(#ADPCMCodecPlugin #AsynchFilePlugin #B3DAccelera...etc...
		internalPlugins: 	a SortedCollection()
		externalPlugins: 	a SortedCollection()
		platformName: 	'Cross'
		sourceDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		platformRootDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		logger: 	Transcript
		interpreterClassName: 	'StackInterpreter'
		is64BitVM: 	true
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		abortBlock: 	nil
		doCleanupOldFiles: 	true


VMMaker class>>generateMainVM:and:with:to:platformDir:including:
	Receiver: VMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreter
		cogitClass: 	StackToRegisterMappingCogit
		optionsPairsArray: 	#(#COGMTVM false #ObjectMemory #Spur64BitMemoryManager #MULT...etc...
		srcDirName: 	File @ generated
		platDirName: 	File @ generated
		inclusions: 	#()
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 115)
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{CrossPlatformVMMaker. RiscOSVMMaker. UnixVMMaker. Win32VMMaker}
		name: 	#VMMaker
		classPool: 	a Dictionary(#DirNames->a Dictionary(#coreVMDir->'vm/src' #coreVMHea...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Building'


[ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(COGMTVM false ObjectMemory Spur64BitMemoryManager MULTIPLEBYTECODESETS true bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid)
	to: self outputDirectory / 'generated'
	platformDir: self outputDirectory / 'generated'
	including: #() ] in PharoVMMaker>>generateStackVM
	Receiver: a PharoVMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreter
	Receiver's instance variables: 
		outputDirectory: 	File @ .


BlockClosure>>on:do:
	Receiver: [ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(C...etc...
	Arguments and temporary variables: 
		exception: 	ProvideAnswerNotification
		handlerAction: 	[ :notify | 
| answer caption |
caption := notify messageText wi...etc...
	Receiver's instance variables: 
		outerContext: 	PharoVMMaker>>generateStackVM
		startpc: 	137
		numArgs: 	0


BlockClosure>>valueSupplyingAnswers:
	Receiver: [ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(C...etc...
	Arguments and temporary variables: 
		aListOfPairs: 	#(#('*' true))
	Receiver's instance variables: 
		outerContext: 	PharoVMMaker>>generateStackVM
		startpc: 	137
		numArgs: 	0


BlockClosure>>valueSupplyingAnswer:
	Receiver: [ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(C...etc...
	Arguments and temporary variables: 
		anObject: 	true
	Receiver's instance variables: 
		outerContext: 	PharoVMMaker>>generateStackVM
		startpc: 	137
		numArgs: 	0


PharoVMMaker>>generateStackVM
	Receiver: a PharoVMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreter
	Receiver's instance variables: 
		outputDirectory: 	File @ .


PharoVMMaker class>>generate:outputDirectory:
	Receiver: PharoVMMaker
	Arguments and temporary variables: 
		aClassName: 	#StackVM
		aDirectory: 	'.'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#generateCoInterpreter->PharoVMMaker>>#generateC...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoVMMaker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMakerCompatibilityForPharo6-CommandLine'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoVMMaker generate: #StackVM outputDirectory: '.'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(640222464)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	nil
		textArea: 	a RubEditingArea(640222464)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(920443136)
		textModel: 	a GLMRubricSmalltalkTextModel


RubEditingArea(RubAbstractTextArea)>>handleEdit:
	Receiver: a RubEditingArea(640222464)
	Arguments and temporary variables: 
		editBlock: 	[ textMorph textArea editor highlightEvaluateAndDo: ann action.
text...etc...
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (580@31)
		owner: 	a TransformWithLayoutMorph(254823168)
		submorphs: 	an Array(a RubCursor(209247488) a RubPrimarySelectionMorph(319670528...etc...
		fullBounds: 	(0@0) corner: (580@31)
		color: 	Color transparent
		extension: 	a MorphExtension (774907648) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a GLMRubricSmalltalkTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a RubSmalltalkEditor
		scrollPane: 	a RubTextScrollPane(106809088)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a RubSmalltalkScriptingMode
		cursor: 	a RubCursor(209247488)
		segments: 	an OrderedCollection(a RubHighlightSegmentMorph(459869952))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	RubSmalltalkEditor


[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
	Receiver: a GLMMorphicPharoScriptRenderer
	Arguments and temporary variables: 
		ann: 	a GLMHighlightAndEvaluate
	Receiver's instance variables: 
		renderer: 	a GLMMorphicRenderer
		textMorph: 	a RubScrolledTextMorph(920443136)
		textModel: 	a GLMRubricSmalltalkTextModel


WorldState>>runStepMethodsIn:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(479349760) [world]
		queue: 	WaitfreeQueue with 0 items
		nextInQueue: 	[ textMorph textArea
	handleEdit: [ textMorph textArea editor high...etc...
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	a FormCanvas on: DisplayScreen(1440x772x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(662333184))(a DropList...etc...
		lastStepTime: 	2135691
		lastStepMessage: 	nil
		lastCycleTime: 	2130344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(209247488)))
		lastAlarmTime: 	2135691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>runStepMethods
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1440@772)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	a FormCanvas on: DisplayScreen(1440x772x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(662333184))(a DropList...etc...
		lastStepTime: 	2135691
		lastStepMessage: 	nil
		lastCycleTime: 	2130344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(209247488)))
		lastAlarmTime: 	2135691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldState>>doOneCycleFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	a FormCanvas on: DisplayScreen(1440x772x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(662333184))(a DropList...etc...
		lastStepTime: 	2135691
		lastStepMessage: 	nil
		lastCycleTime: 	2130344
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(209247488)))
		lastAlarmTime: 	2135691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>doOneCycle
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a GLMSy...etc...
		fullBounds: 	(0@0) corner: (1440@772)
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>doOneCycle
	Receiver: WorldMorph
	Arguments and temporary variables: 

	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		activeTranscript: 	Transcript


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	MorphicUIManager>>spawnNewProcess
		startpc: 	125
		numArgs: 	0



--- The full stack ---
CCodeGeneratorGlobalStructure(Object)>>haltOnce
CCodeGeneratorGlobalStructure>>emitCVariablesOn:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
VMMaker class>>generateMainVM:and:with:to:platformDir:including:
[ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(COGMTVM false ObjectMemory Spur64BitMemoryManager MULTIPLEBYTECODESETS true bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid)
	to: self outputDirectory / 'generated'
	platformDir: self outputDirectory / 'generated'
	including: #() ] in PharoVMMaker>>generateStackVM
BlockClosure>>on:do:
BlockClosure>>valueSupplyingAnswers:
BlockClosure>>valueSupplyingAnswer:
PharoVMMaker>>generateStackVM
PharoVMMaker class>>generate:outputDirectory:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:06:26.029545 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1380)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1380)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(775934720) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1380)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1380)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(775934720) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1380)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1380)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(775934720) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1380)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1380)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(775934720) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1044999936)
	Receiver's instance variables: 
		bounds: 	(12@512.0) corner: (28@528.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(12@512) mouseOver 2492272 nil]
		targetOffset: 	(172@307)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2492272 12 512 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(12@512.0) corner: (28@528.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(12@512) mouseOver 2492272 nil]
		targetOffset: 	(172@307)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2492272 12 512 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(662333184))(a DropList...etc...
		lastStepTime: 	2497125
		lastStepMessage: 	nil
		lastCycleTime: 	2497145
		alarms: 	a Heap()
		lastAlarmTime: 	2497125
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: stack out of sync in bytecode generator
13 November 2019 3:07:52.446962 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

IRClosureStackCount(Object)>>error:
	Receiver: an IRClosureStackCount start 7 stop 10 max 11
	Arguments and temporary variables: 
		aString: 	'stack out of sync in bytecode generator'
	Receiver's instance variables: 
		start: 	7
		position: 	10
		length: 	11
		numMethodTempVars: 	5


IRClosureStackCount(IRStackCount)>>linkTo:
	Receiver: an IRClosureStackCount start 7 stop 10 max 11
	Arguments and temporary variables: 
		stackOrNil: 	an IRClosureStackCount start 9 stop 9 max 9
	Receiver's instance variables: 
		start: 	7
		position: 	10
		length: 	11
		numMethodTempVars: 	5


IRBytecodeGenerator>>goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	20
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->8 an Object->1 an Object->3 1->2 2->...etc...
		orderSeq: 	an OrderedCollection(an Object 1 an Object 2 3 4 5 an Object 6 7 8 9 ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil 1->an...etc...
		literals: 	an OCLiteralList(#WriteStream->WriteStream #String->String 32768 #on:...etc...
		lastLiteral: 	nil
		currentSeqId: 	19
		currentSeqNum: 	22
		bytes: 	an OrderedCollection(22 136 19 229 135 136 22 60 196 135 22 214)
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(pushTemp: #tmp8->1 pushDup->2 pushTemp: #tmp5->3...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 1 stop 1 ...etc...
		stack: 	an IRClosureStackCount start 7 stop 10 max 11
		numArgs: 	1
		properties: 	nil
		numberOfTemps: 	5
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>visitJump:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		jump: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRJump>>accept:
	Receiver: goto: 20
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	RBMessageNode(tmp5 first == $#
	ifTrue: [ tmp8
			nextPutAll: tmp5;...etc...
		bytecodeIndex: 	nil
		sequence: 	an IRSequence (19)
		destination: 	an IRSequence (20)
		successor: 	nil


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitInstruction:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instr: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


[ :instr | self visitInstruction: instr ] in IRTranslatorV2(IRVisitor)>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		sequence: 	an IRSequence (19)
		instr: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


OrderedCollection>>do:
	Receiver: an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #nextPutAll: popTop pus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :instr | self visitInstruction: instr ]
		index: 	13
	Receiver's instance variables: 
		array: 	an Array(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #nextPutAll: popT...etc...
		firstIndex: 	1
		lastIndex: 	13


IRSequence>>do:
	Receiver: an IRSequence (19)
	Arguments and temporary variables: 
		aBlock: 	[ :instr | self visitInstruction: instr ]
	Receiver's instance variables: 
		sequence: 	an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #n...etc...
		orderNumber: 	19
		method: 	an IRMethod


IRTranslatorV2(IRVisitor)>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		sequence: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instructionSequence: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRSequence>>accept:
	Receiver: an IRSequence (19)
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sequence: 	an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #n...etc...
		orderNumber: 	19
		method: 	an IRMethod


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


[ :each | self visitNode: each ] in IRTranslatorV2(IRVisitor)>>visitNodes:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		col: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) a...etc...
		each: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) an IRSequence (4)...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	19
	Receiver's instance variables: 
		array: 	an Array(an IRSequence (1) an IRSequence (2) an IRSequence (3) an IRSequ...etc...
		firstIndex: 	1
		lastIndex: 	21
		sortBlock: 	[ :x :y | x orderNumber <= y orderNumber ]


IRTranslatorV2(IRVisitor)>>visitNodes:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		col: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) a...etc...
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitSequences:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		irSequences: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequen...etc...
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitMethod:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		anIr: 	an IRMethod
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRMethod>>accept:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	an IRMethod
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethod
	Receiver: an IRMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>instructionForPC:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		pc: 	nil
		aPC: 	487
		initialPC: 	nil
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>sourceNodeExecutedForPC:
	Receiver: emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStream on: (String new: 327...etc...
	Arguments and temporary variables: 
		anInteger: 	487
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 3
		selector: 	#emitCVariablesOn:
		keywordsPositions: 	nil
		body: 	RBSequenceNode(| tmp1 tmp2 tmp4 tmp10 |
tmp1 := WriteStream on: (String n...etc...
		source: 	nil
		arguments: 	an OrderedCollection(RBArgumentNode(arg1))
		pragmas: 	#()
		replacements: 	nil
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


CompiledMethod>>sourceNodeExecutedForPC:
	Receiver: CCodeGeneratorGlobalStructure>>#emitCVariablesOn:
	Arguments and temporary variables: 
		aPC: 	487
	Receiver's instance variables: 
CCodeGeneratorGlobalStructure>>#emitCVariablesOn:

Context>>sourceNodeExecuted
	Receiver: CCodeGeneratorGlobalStructure>>emitCVariablesOn:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sender: 	CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:d...etc...
		pc: 	488
		stackp: 	3
		method: 	CCodeGeneratorGlobalStructure>>#emitCVariablesOn:
		closureOrNil: 	nil
		receiver: 	a CCodeGeneratorGlobalStructure


[ "we need to ignore when the code below calls us again"
node := callingContext sourceNodeExecuted.
(node hasProperty: #Once)
	ifTrue: [ ^ self ].
node propertyAt: #Once put: true.
self signalIn: senderContext ] in Halt class>>once
	Receiver: Halt
	Arguments and temporary variables: 
		callingContext: 	CCodeGeneratorGlobalStructure>>emitCVariablesOn:
		senderContext: 	Halt class>>once
		node: 	nil
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Halt>>#defaultAction )
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{Break}
		name: 	#Halt
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'


BlockClosure>>ensure:
	Receiver: [ "we need to ignore when the code below calls us again"
node := callingContext sourceNode...etc...
	Arguments and temporary variables: 
		aBlock: 	[ activeMethods remove: aMethod ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Halt class>>once
		startpc: 	213
		numArgs: 	0


LocalRecursionStopper class>>stopMethod:during:
	Receiver: LocalRecursionStopper
	Arguments and temporary variables: 
		aMethod: 	Halt class>>#once
		aBlock: 	[ "we need to ignore when the code below calls us again"
node := callin...etc...
		activeMethods: 	an IdentitySet(Halt class>>#once)
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LocalRecursionStopper
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a LocalRecursionStopper


LocalRecursionStopper class>>during:
	Receiver: LocalRecursionStopper
	Arguments and temporary variables: 
		aBlock: 	[ "we need to ignore when the code below calls us again"
node := callin...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LocalRecursionStopper
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a LocalRecursionStopper


Halt class>>once
	Receiver: Halt
	Arguments and temporary variables: 
		node: 	nil
		callingContext: 	CCodeGeneratorGlobalStructure>>emitCVariablesOn:
		senderContext: 	Halt class>>once
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Halt>>#defaultAction )
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{Break}
		name: 	#Halt
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'


CCodeGeneratorGlobalStructure(Object)>>haltOnce
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 

	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCVariablesOn:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		verbose: 	false
		methodList: 	an Array(a TMethod (StackInterpreter>>interpret) a TMethod (CogStac...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		stream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gene...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'



--- The full stack ---
IRClosureStackCount(Object)>>error:
IRClosureStackCount(IRStackCount)>>linkTo:
IRBytecodeGenerator>>goto:
IRTranslatorV2>>visitJump:
IRJump>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
IRTranslatorV2>>visitInstruction:
[ :instr | self visitInstruction: instr ] in IRTranslatorV2(IRVisitor)>>visitSequence:
OrderedCollection>>do:
IRSequence>>do:
IRTranslatorV2(IRVisitor)>>visitSequence:
IRTranslatorV2>>visitSequence:
IRSequence>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
[ :each | self visitNode: each ] in IRTranslatorV2(IRVisitor)>>visitNodes:
SortedCollection(OrderedCollection)>>do:
IRTranslatorV2(IRVisitor)>>visitNodes:
IRTranslatorV2>>visitSequences:
IRTranslatorV2>>visitMethod:
IRMethod>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
IRMethod>>generate:
IRMethod>>compiledMethodWith:
IRMethod>>compiledMethod
IRMethod>>instructionForPC:
RBMethodNode>>sourceNodeExecutedForPC:
CompiledMethod>>sourceNodeExecutedForPC:
Context>>sourceNodeExecuted
[ "we need to ignore when the code below calls us again"
node := callingContext sourceNodeExecuted.
(node hasProperty: #Once)
	ifTrue: [ ^ self ].
node propertyAt: #Once put: true.
self signalIn: senderContext ] in Halt class>>once
BlockClosure>>ensure:
LocalRecursionStopper class>>stopMethod:during:
LocalRecursionStopper class>>during:
Halt class>>once
CCodeGeneratorGlobalStructure(Object)>>haltOnce
CCodeGeneratorGlobalStructure>>emitCVariablesOn:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
VMMaker class>>generateMainVM:and:with:to:platformDir:including:
[ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(COGMTVM false ObjectMemory Spur64BitMemoryManager MULTIPLEBYTECODESETS true bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid)
	to: self outputDirectory / 'generated'
	platformDir: self outputDirectory / 'generated'
	including: #() ] in PharoVMMaker>>generateStackVM
BlockClosure>>on:do:
BlockClosure>>valueSupplyingAnswers:
BlockClosure>>valueSupplyingAnswer:
PharoVMMaker>>generateStackVM
PharoVMMaker class>>generate:outputDirectory:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: stack out of sync in bytecode generator
13 November 2019 3:08:09.463284 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

IRClosureStackCount(Object)>>error:
	Receiver: an IRClosureStackCount start 7 stop 10 max 11
	Arguments and temporary variables: 
		aString: 	'stack out of sync in bytecode generator'
	Receiver's instance variables: 
		start: 	7
		position: 	10
		length: 	11
		numMethodTempVars: 	5


IRClosureStackCount(IRStackCount)>>linkTo:
	Receiver: an IRClosureStackCount start 7 stop 10 max 11
	Arguments and temporary variables: 
		stackOrNil: 	an IRClosureStackCount start 9 stop 9 max 9
	Receiver's instance variables: 
		start: 	7
		position: 	10
		length: 	11
		numMethodTempVars: 	5


IRBytecodeGenerator>>goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	20
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->1 an Object->3 an Object->8 1->2 2->...etc...
		orderSeq: 	an OrderedCollection(an Object 1 an Object 2 3 4 5 an Object 6 7 8 9 ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->an...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil 1->an...etc...
		literals: 	an OCLiteralList(#WriteStream->WriteStream #String->String 32768 #on:...etc...
		lastLiteral: 	nil
		currentSeqId: 	19
		currentSeqNum: 	22
		bytes: 	an OrderedCollection(22 136 19 229 135 136 22 60 196 135 22 214)
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(pushTemp: #tmp8->1 pushDup->2 pushTemp: #tmp5->3...etc...
		stacks: 	an IdentityDictionary(an Object->an IRStackCount start 0 stop 0 max 0 a...etc...
		stack: 	an IRClosureStackCount start 7 stop 10 max 11
		numArgs: 	1
		properties: 	nil
		numberOfTemps: 	5
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>visitJump:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		jump: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRJump>>accept:
	Receiver: goto: 20
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	RBMessageNode(tmp5 first == $#
	ifTrue: [ tmp8
			nextPutAll: tmp5;...etc...
		bytecodeIndex: 	nil
		sequence: 	an IRSequence (19)
		destination: 	an IRSequence (20)
		successor: 	nil


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitInstruction:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instr: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


[ :instr | self visitInstruction: instr ] in IRTranslatorV2(IRVisitor)>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		sequence: 	an IRSequence (19)
		instr: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


OrderedCollection>>do:
	Receiver: an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #nextPutAll: popTop pus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :instr | self visitInstruction: instr ]
		index: 	13
	Receiver's instance variables: 
		array: 	an Array(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #nextPutAll: popT...etc...
		firstIndex: 	1
		lastIndex: 	13


IRSequence>>do:
	Receiver: an IRSequence (19)
	Arguments and temporary variables: 
		aBlock: 	[ :instr | self visitInstruction: instr ]
	Receiver's instance variables: 
		sequence: 	an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #n...etc...
		orderNumber: 	19
		method: 	an IRMethod


IRTranslatorV2(IRVisitor)>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		sequence: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instructionSequence: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRSequence>>accept:
	Receiver: an IRSequence (19)
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sequence: 	an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #n...etc...
		orderNumber: 	19
		method: 	an IRMethod


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


[ :each | self visitNode: each ] in IRTranslatorV2(IRVisitor)>>visitNodes:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		col: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) a...etc...
		each: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) an IRSequence (4)...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	19
	Receiver's instance variables: 
		array: 	an Array(an IRSequence (1) an IRSequence (2) an IRSequence (3) an IRSequ...etc...
		firstIndex: 	1
		lastIndex: 	21
		sortBlock: 	[ :x :y | x orderNumber <= y orderNumber ]


IRTranslatorV2(IRVisitor)>>visitNodes:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		col: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) a...etc...
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitSequences:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		irSequences: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequen...etc...
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitMethod:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		anIr: 	an IRMethod
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRMethod>>accept:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	an IRMethod
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethod
	Receiver: an IRMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>instructionForPC:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		pc: 	nil
		aPC: 	487
		initialPC: 	nil
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>sourceNodeExecutedForPC:
	Receiver: emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStream on: (String new: 327...etc...
	Arguments and temporary variables: 
		anInteger: 	487
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 3
		selector: 	#emitCVariablesOn:
		keywordsPositions: 	nil
		body: 	RBSequenceNode(| tmp1 tmp2 tmp4 tmp10 |
tmp1 := WriteStream on: (String n...etc...
		source: 	nil
		arguments: 	an OrderedCollection(RBArgumentNode(arg1))
		pragmas: 	#()
		replacements: 	nil
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


CompiledMethod>>sourceNodeExecutedForPC:
	Receiver: CCodeGeneratorGlobalStructure>>#emitCVariablesOn:
	Arguments and temporary variables: 
		aPC: 	487
	Receiver's instance variables: 
CCodeGeneratorGlobalStructure>>#emitCVariablesOn:

Context>>sourceNodeExecuted
	Receiver: CCodeGeneratorGlobalStructure>>emitCVariablesOn:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sender: 	CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:d...etc...
		pc: 	488
		stackp: 	3
		method: 	CCodeGeneratorGlobalStructure>>#emitCVariablesOn:
		closureOrNil: 	nil
		receiver: 	a CCodeGeneratorGlobalStructure


[ "we need to ignore when the code below calls us again"
node := callingContext sourceNodeExecuted.
(node hasProperty: #Once)
	ifTrue: [ ^ self ].
node propertyAt: #Once put: true.
self signalIn: senderContext ] in Halt class>>once
	Receiver: Halt
	Arguments and temporary variables: 
		callingContext: 	CCodeGeneratorGlobalStructure>>emitCVariablesOn:
		senderContext: 	Halt class>>once
		node: 	nil
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Halt>>#defaultAction )
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{Break}
		name: 	#Halt
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'


BlockClosure>>ensure:
	Receiver: [ "we need to ignore when the code below calls us again"
node := callingContext sourceNode...etc...
	Arguments and temporary variables: 
		aBlock: 	[ activeMethods remove: aMethod ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Halt class>>once
		startpc: 	213
		numArgs: 	0


LocalRecursionStopper class>>stopMethod:during:
	Receiver: LocalRecursionStopper
	Arguments and temporary variables: 
		aMethod: 	Halt class>>#once
		aBlock: 	[ "we need to ignore when the code below calls us again"
node := callin...etc...
		activeMethods: 	an IdentitySet(Halt class>>#once)
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LocalRecursionStopper
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a LocalRecursionStopper


LocalRecursionStopper class>>during:
	Receiver: LocalRecursionStopper
	Arguments and temporary variables: 
		aBlock: 	[ "we need to ignore when the code below calls us again"
node := callin...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LocalRecursionStopper
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a LocalRecursionStopper


Halt class>>once
	Receiver: Halt
	Arguments and temporary variables: 
		node: 	nil
		callingContext: 	CCodeGeneratorGlobalStructure>>emitCVariablesOn:
		senderContext: 	Halt class>>once
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Halt>>#defaultAction )
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{Break}
		name: 	#Halt
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'


CCodeGeneratorGlobalStructure(Object)>>haltOnce
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 

	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCVariablesOn:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		verbose: 	false
		methodList: 	an Array(a TMethod (StackInterpreter>>interpret) a TMethod (CogStac...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		stream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gene...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'



--- The full stack ---
IRClosureStackCount(Object)>>error:
IRClosureStackCount(IRStackCount)>>linkTo:
IRBytecodeGenerator>>goto:
IRTranslatorV2>>visitJump:
IRJump>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
IRTranslatorV2>>visitInstruction:
[ :instr | self visitInstruction: instr ] in IRTranslatorV2(IRVisitor)>>visitSequence:
OrderedCollection>>do:
IRSequence>>do:
IRTranslatorV2(IRVisitor)>>visitSequence:
IRTranslatorV2>>visitSequence:
IRSequence>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
[ :each | self visitNode: each ] in IRTranslatorV2(IRVisitor)>>visitNodes:
SortedCollection(OrderedCollection)>>do:
IRTranslatorV2(IRVisitor)>>visitNodes:
IRTranslatorV2>>visitSequences:
IRTranslatorV2>>visitMethod:
IRMethod>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
IRMethod>>generate:
IRMethod>>compiledMethodWith:
IRMethod>>compiledMethod
IRMethod>>instructionForPC:
RBMethodNode>>sourceNodeExecutedForPC:
CompiledMethod>>sourceNodeExecutedForPC:
Context>>sourceNodeExecuted
[ "we need to ignore when the code below calls us again"
node := callingContext sourceNodeExecuted.
(node hasProperty: #Once)
	ifTrue: [ ^ self ].
node propertyAt: #Once put: true.
self signalIn: senderContext ] in Halt class>>once
BlockClosure>>ensure:
LocalRecursionStopper class>>stopMethod:during:
LocalRecursionStopper class>>during:
Halt class>>once
CCodeGeneratorGlobalStructure(Object)>>haltOnce
CCodeGeneratorGlobalStructure>>emitCVariablesOn:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
VMMaker class>>generateMainVM:and:with:to:platformDir:including:
[ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(COGMTVM false ObjectMemory Spur64BitMemoryManager MULTIPLEBYTECODESETS true bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid)
	to: self outputDirectory / 'generated'
	platformDir: self outputDirectory / 'generated'
	including: #() ] in PharoVMMaker>>generateStackVM
BlockClosure>>on:do:
BlockClosure>>valueSupplyingAnswers:
BlockClosure>>valueSupplyingAnswer:
PharoVMMaker>>generateStackVM
PharoVMMaker class>>generate:outputDirectory:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: stack out of sync in bytecode generator
13 November 2019 3:09:55.509978 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

IRClosureStackCount(Object)>>error:
	Receiver: an IRClosureStackCount start 7 stop 10 max 11
	Arguments and temporary variables: 
		aString: 	'stack out of sync in bytecode generator'
	Receiver's instance variables: 
		start: 	7
		position: 	10
		length: 	11
		numMethodTempVars: 	5


IRClosureStackCount(IRStackCount)>>linkTo:
	Receiver: an IRClosureStackCount start 7 stop 10 max 11
	Arguments and temporary variables: 
		stackOrNil: 	an IRClosureStackCount start 9 stop 9 max 9
	Receiver's instance variables: 
		start: 	7
		position: 	10
		length: 	11
		numMethodTempVars: 	5


IRBytecodeGenerator>>goto:
	Receiver: an IRBytecodeGenerator
	Arguments and temporary variables: 
		seqId: 	20
	Receiver's instance variables: 
		encoder: 	an EncoderForV3PlusClosures
		seqOrder: 	an IdentityDictionary(an Object->3 an Object->8 an Object->1 1->2 2->...etc...
		orderSeq: 	an OrderedCollection(an Object 1 an Object 2 3 4 5 an Object 6 7 8 9 ...etc...
		seqBytes: 	an IdentityDictionary(an Object->an OrderedCollection(115 115 115 115...etc...
		jumps: 	an IdentityDictionary(an Object->nil an Object->nil an Object->nil 1->an...etc...
		literals: 	an OCLiteralList(#WriteStream->WriteStream #String->String 32768 #on:...etc...
		lastLiteral: 	nil
		currentSeqId: 	19
		currentSeqNum: 	22
		bytes: 	an OrderedCollection(22 136 19 229 135 136 22 60 196 135 22 214)
		lastSpecialReturn: 	nil
		primitiveBytes: 	nil
		instrMaps: 	an IdentityDictionary(an Object->an OrderedCollection() an Object->a...etc...
		instrMap: 	an OrderedCollection(pushTemp: #tmp8->1 pushDup->2 pushTemp: #tmp5->3...etc...
		stacks: 	an IdentityDictionary(an Object->an IRClosureStackCount start 3 stop 7 ...etc...
		stack: 	an IRClosureStackCount start 7 stop 10 max 11
		numArgs: 	1
		properties: 	nil
		numberOfTemps: 	5
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		forceLongForm: 	false
		primNumber: 	0
		encoderClass: 	EncoderForV3PlusClosures
		inBlock: 	false


IRTranslatorV2>>visitJump:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		jump: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRJump>>accept:
	Receiver: goto: 20
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	RBMessageNode(tmp5 first == $#
	ifTrue: [ tmp8
			nextPutAll: tmp5;...etc...
		bytecodeIndex: 	nil
		sequence: 	an IRSequence (19)
		destination: 	an IRSequence (20)
		successor: 	nil


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitInstruction:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instr: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


[ :instr | self visitInstruction: instr ] in IRTranslatorV2(IRVisitor)>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		sequence: 	an IRSequence (19)
		instr: 	goto: 20
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


OrderedCollection>>do:
	Receiver: an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #nextPutAll: popTop pus...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :instr | self visitInstruction: instr ]
		index: 	13
	Receiver's instance variables: 
		array: 	an Array(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #nextPutAll: popT...etc...
		firstIndex: 	1
		lastIndex: 	13


IRSequence>>do:
	Receiver: an IRSequence (19)
	Arguments and temporary variables: 
		aBlock: 	[ :instr | self visitInstruction: instr ]
	Receiver's instance variables: 
		sequence: 	an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #n...etc...
		orderNumber: 	19
		method: 	an IRMethod


IRTranslatorV2(IRVisitor)>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		sequence: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitSequence:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		instructionSequence: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRSequence>>accept:
	Receiver: an IRSequence (19)
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sequence: 	an OrderedCollection(pushTemp: #tmp8 pushDup pushTemp: #tmp5 send: #n...etc...
		orderNumber: 	19
		method: 	an IRMethod


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


[ :each | self visitNode: each ] in IRTranslatorV2(IRVisitor)>>visitNodes:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		col: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) a...etc...
		each: 	an IRSequence (19)
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) an IRSequence (4)...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | self visitNode: each ]
		index: 	19
	Receiver's instance variables: 
		array: 	an Array(an IRSequence (1) an IRSequence (2) an IRSequence (3) an IRSequ...etc...
		firstIndex: 	1
		lastIndex: 	21
		sortBlock: 	[ :x :y | x orderNumber <= y orderNumber ]


IRTranslatorV2(IRVisitor)>>visitNodes:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		col: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequence (3) a...etc...
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitSequences:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		irSequences: 	a SortedCollection(an IRSequence (1) an IRSequence (2) an IRSequen...etc...
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRTranslatorV2>>visitMethod:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		anIr: 	an IRMethod
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRMethod>>accept:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		aVisitor: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRTranslatorV2(IRVisitor)>>visitNode:
	Receiver: an IRTranslatorV2
	Arguments and temporary variables: 
		elem: 	an IRMethod
	Receiver's instance variables: 
		gen: 	an IRBytecodeGenerator
		currentScope: 	a Stack(pushClosureCopyCopiedValues: #(#tmp1 #tmp2) args: #(#arg2...etc...
		trailer: 	a CompiledMethodTrailer
		tempVectorStack: 	a Stack()
		compilationContext: 	a CompilationContext


IRMethod>>generate:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
		irTranslator: 	an IRTranslatorV2
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethodWith:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		trailer: 	a CompiledMethodTrailer
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>compiledMethod
	Receiver: an IRMethod
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


IRMethod>>instructionForPC:
	Receiver: an IRMethod
	Arguments and temporary variables: 
		pc: 	nil
		aPC: 	487
		initialPC: 	nil
	Receiver's instance variables: 
		sourceNode: 	emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStre...etc...
		startSequence: 	an IRSequence (1)
		numArgs: 	1
		properties: 	nil
		tempMap: 	a Dictionary(#arg1->1 #tmp1->2 #tmp10->5 #tmp2->3 #tmp4->4 )
		pragmas: 	an OrderedCollection()
		additionalLiterals: 	an OCLiteralSet(#ifTrue:ifFalse: #ifFalse:)
		compiledMethod: 	nil
		compilationContext: 	a CompilationContext
		irPrimitive: 	primitive 0


RBMethodNode>>sourceNodeExecutedForPC:
	Receiver: emitCVariablesOn: arg1
	| tmp1 tmp2 tmp4 tmp10 |
	tmp1 := WriteStream on: (String new: 327...etc...
	Arguments and temporary variables: 
		anInteger: 	487
	Receiver's instance variables: 
		parent: 	nil
		properties: 	a SmallDictionary(#ir->an IRMethod)
		scope: 	an OCMethodScope 3
		selector: 	#emitCVariablesOn:
		keywordsPositions: 	nil
		body: 	RBSequenceNode(| tmp1 tmp2 tmp4 tmp10 |
tmp1 := WriteStream on: (String n...etc...
		source: 	nil
		arguments: 	an OrderedCollection(RBArgumentNode(arg1))
		pragmas: 	#()
		replacements: 	nil
		nodeReplacements: 	an IdentityDictionary()
		compilationContext: 	a CompilationContext


CompiledMethod>>sourceNodeExecutedForPC:
	Receiver: CCodeGeneratorGlobalStructure>>#emitCVariablesOn:
	Arguments and temporary variables: 
		aPC: 	487
	Receiver's instance variables: 
CCodeGeneratorGlobalStructure>>#emitCVariablesOn:

Context>>sourceNodeExecuted
	Receiver: CCodeGeneratorGlobalStructure>>emitCVariablesOn:
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sender: 	CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:d...etc...
		pc: 	488
		stackp: 	3
		method: 	CCodeGeneratorGlobalStructure>>#emitCVariablesOn:
		closureOrNil: 	nil
		receiver: 	a CCodeGeneratorGlobalStructure


[ "we need to ignore when the code below calls us again"
node := callingContext sourceNodeExecuted.
(node hasProperty: #Once)
	ifTrue: [ ^ self ].
node propertyAt: #Once put: true.
self signalIn: senderContext ] in Halt class>>once
	Receiver: Halt
	Arguments and temporary variables: 
		callingContext: 	CCodeGeneratorGlobalStructure>>emitCVariablesOn:
		senderContext: 	Halt class>>once
		node: 	nil
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Halt>>#defaultAction )
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{Break}
		name: 	#Halt
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'


BlockClosure>>ensure:
	Receiver: [ "we need to ignore when the code below calls us again"
node := callingContext sourceNode...etc...
	Arguments and temporary variables: 
		aBlock: 	[ activeMethods remove: aMethod ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Halt class>>once
		startpc: 	213
		numArgs: 	0


LocalRecursionStopper class>>stopMethod:during:
	Receiver: LocalRecursionStopper
	Arguments and temporary variables: 
		aMethod: 	Halt class>>#once
		aBlock: 	[ "we need to ignore when the code below calls us again"
node := callin...etc...
		activeMethods: 	an IdentitySet(Halt class>>#once)
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LocalRecursionStopper
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a LocalRecursionStopper


LocalRecursionStopper class>>during:
	Receiver: LocalRecursionStopper
	Arguments and temporary variables: 
		aBlock: 	[ "we need to ignore when the code below calls us again"
node := callin...etc...
	Receiver's instance variables: 
		superclass: 	ProcessLocalVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#LocalRecursionStopper
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Processes'
		soleInstance: 	a LocalRecursionStopper


Halt class>>once
	Receiver: Halt
	Arguments and temporary variables: 
		node: 	nil
		callingContext: 	CCodeGeneratorGlobalStructure>>emitCVariablesOn:
		senderContext: 	Halt class>>once
	Receiver's instance variables: 
		superclass: 	Exception
		methodDict: 	a MethodDictionary(#defaultAction->Halt>>#defaultAction )
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{Break}
		name: 	#Halt
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Exceptions'


CCodeGeneratorGlobalStructure(Object)>>haltOnce
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 

	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCVariablesOn:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		verbose: 	false
		methodList: 	an Array(a TMethod (StackInterpreter>>interpret) a TMethod (CogStac...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aStream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gen...etc...
		inlineFlag: 	true
		assertionFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
		assertionFlag: 	true
		stream: 	MultiByteFileStream: '/Users/theo/opensmalltalk-vm-1/build/vmmaker/gene...etc...
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		fileName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated/vm/src/interp...etc...
		inlineFlag: 	true
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	a Set(#bytecodePrimNew #returnTopFromBlock #insertSegmentFor: #prim...etc...
		constants: 	a Dictionary(size 308)
		variables: 	a Set(#freeListsMask #remapBuffer #profileProcess #lastMethodCachePr...etc...
		variableDeclarations: 	a Dictionary('atCache'->'sqInt atCache[AtCacheTotalSize +...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 1252)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	a TMethod (VMClass>>unreachable)
		headerFiles: 	an OrderedCollection('"sq.h"' '<stddef.h> /* for e.g. alloca */' '...etc...
		globalVariableUsage: 	a Dictionary(size 211)
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set(#sendInvokeCallbackContext: #includesBehavior:ThatOf: ...etc...
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->8 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'



--- The full stack ---
IRClosureStackCount(Object)>>error:
IRClosureStackCount(IRStackCount)>>linkTo:
IRBytecodeGenerator>>goto:
IRTranslatorV2>>visitJump:
IRJump>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
IRTranslatorV2>>visitInstruction:
[ :instr | self visitInstruction: instr ] in IRTranslatorV2(IRVisitor)>>visitSequence:
OrderedCollection>>do:
IRSequence>>do:
IRTranslatorV2(IRVisitor)>>visitSequence:
IRTranslatorV2>>visitSequence:
IRSequence>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
[ :each | self visitNode: each ] in IRTranslatorV2(IRVisitor)>>visitNodes:
SortedCollection(OrderedCollection)>>do:
IRTranslatorV2(IRVisitor)>>visitNodes:
IRTranslatorV2>>visitSequences:
IRTranslatorV2>>visitMethod:
IRMethod>>accept:
IRTranslatorV2(IRVisitor)>>visitNode:
IRMethod>>generate:
IRMethod>>compiledMethodWith:
IRMethod>>compiledMethod
IRMethod>>instructionForPC:
RBMethodNode>>sourceNodeExecutedForPC:
CompiledMethod>>sourceNodeExecutedForPC:
Context>>sourceNodeExecuted
[ "we need to ignore when the code below calls us again"
node := callingContext sourceNodeExecuted.
(node hasProperty: #Once)
	ifTrue: [ ^ self ].
node propertyAt: #Once put: true.
self signalIn: senderContext ] in Halt class>>once
BlockClosure>>ensure:
LocalRecursionStopper class>>stopMethod:during:
LocalRecursionStopper class>>during:
Halt class>>once
CCodeGeneratorGlobalStructure(Object)>>haltOnce
CCodeGeneratorGlobalStructure>>emitCVariablesOn:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure>>emitCCodeOn:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:doAssertions:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>storeCodeOnFile:doInlining:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
VMMaker class>>generateMainVM:and:with:to:platformDir:including:
[ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(COGMTVM false ObjectMemory Spur64BitMemoryManager MULTIPLEBYTECODESETS true bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid)
	to: self outputDirectory / 'generated'
	platformDir: self outputDirectory / 'generated'
	including: #() ] in PharoVMMaker>>generateStackVM
BlockClosure>>on:do:
BlockClosure>>valueSupplyingAnswers:
BlockClosure>>valueSupplyingAnswer:
PharoVMMaker>>generateStackVM
PharoVMMaker class>>generate:outputDirectory:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:13:04.755576 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(908836608) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(583723264) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(908836608) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(583723264) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(908836608) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(583723264) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(908836608) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(583723264) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(229107968)
	Receiver's instance variables: 
		bounds: 	(665@ -139.0) corner: (681@ -123.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(665@ -139) mouseOver 2894072 nil]
		targetOffset: 	(344@398)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2894072 665 -139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(665@ -139.0) corner: (681@ -123.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(665@ -139) mouseOver 2894072 nil]
		targetOffset: 	(344@398)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2894072 665 -139 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(45683456))(a DropListM...etc...
		lastStepTime: 	2895790
		lastStepMessage: 	nil
		lastCycleTime: 	2895813
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(469691136)))
		lastAlarmTime: 	2895790
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:15:10.589859 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(409743616) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(656250112) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(409743616) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(656250112) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(409743616) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(656250112) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(409743616) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(656250112) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(229107968)
	Receiver's instance variables: 
		bounds: 	(649@ -164.0) corner: (665@ -148.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@ -164) mouseOver 3017993 nil]
		targetOffset: 	(393@395)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3017993 649 -164 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(649@ -164.0) corner: (665@ -148.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(649@ -164) mouseOver 3017993 nil]
		targetOffset: 	(393@395)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3017993 649 -164 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(280328960))(a DropList...etc...
		lastStepTime: 	3021695
		lastStepMessage: 	nil
		lastCycleTime: 	3021717
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(469691136)))
		lastAlarmTime: 	3021695
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:17:43.154609 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(229107968)
	Receiver's instance variables: 
		bounds: 	(490@216.0) corner: (506@232.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(490@216) mouseOver 3172560 nil]
		targetOffset: 	(490@398)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3172560 490 216 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(490@216.0) corner: (506@232.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(490@216) mouseOver 3172560 nil]
		targetOffset: 	(490@398)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3172560 490 216 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a ClyActivityAnimationIconMorph(574191...etc...
		lastStepTime: 	3174269
		lastStepMessage: 	nil
		lastCycleTime: 	3174290
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(469691136)))
		lastAlarmTime: 	3174269
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:19:20.905382 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(410011904) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(410011904) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(410011904) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(229107968)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(182126336)
		submorphs: 	an Array(a RubPrimarySelectionMorph(220427008) a RubCursor(469691136...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (841037568) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(834744064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(469691136)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(410011904) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(229107968)
	Receiver's instance variables: 
		bounds: 	(622@ -163.0) corner: (638@ -147.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@ -163) mouseOver 3263233 nil]
		targetOffset: 	(115@394)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3263233 622 -163 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@ -163.0) corner: (638@ -147.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@ -163) mouseOver 3263233 nil]
		targetOffset: 	(115@394)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3263233 622 -163 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(851997440))(a DropList...etc...
		lastStepTime: 	3272002
		lastStepMessage: 	nil
		lastCycleTime: 	3272025
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(469691136)))
		lastAlarmTime: 	3272002
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:27:07.839548 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(235567360)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@2292)
		owner: 	a TransformWithLayoutMorph(297203456)
		submorphs: 	an Array(a RubPrimarySelectionMorph(771417344) a RubCursor(191914752...etc...
		fullBounds: 	(0@0) corner: (1385@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (855206656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(53133056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(191914752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(235567360)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@2292)
		owner: 	a TransformWithLayoutMorph(297203456)
		submorphs: 	an Array(a RubPrimarySelectionMorph(771417344) a RubCursor(191914752...etc...
		fullBounds: 	(0@0) corner: (1385@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (855206656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(53133056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(191914752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(235567360)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@2292)
		owner: 	a TransformWithLayoutMorph(297203456)
		submorphs: 	an Array(a RubPrimarySelectionMorph(771417344) a RubCursor(191914752...etc...
		fullBounds: 	(0@0) corner: (1385@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (855206656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(53133056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(191914752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(235567360)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@2292)
		owner: 	a TransformWithLayoutMorph(297203456)
		submorphs: 	an Array(a RubPrimarySelectionMorph(771417344) a RubCursor(191914752...etc...
		fullBounds: 	(0@0) corner: (1385@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (855206656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(53133056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(191914752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(235567360)
	Receiver's instance variables: 
		bounds: 	(636@ -172.0) corner: (652@ -156.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(636@ -172) mouseOver 3732869 nil]
		targetOffset: 	(502@398)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3732869 636 -172 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(636@ -172.0) corner: (652@ -156.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(636@ -172) mouseOver 3732869 nil]
		targetOffset: 	(502@398)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3732869 636 -172 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(115569920))(a DropList...etc...
		lastStepTime: 	3738915
		lastStepMessage: 	nil
		lastCycleTime: 	3738938
		alarms: 	a Heap()
		lastAlarmTime: 	3738915
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:32:41.508058 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(37767936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(186971392)
		submorphs: 	an Array(a RubCursor(407148288) a RubPrimarySelectionMorph(713472256...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (1061062912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(661221632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(407148288)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(581762304) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(37767936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(186971392)
		submorphs: 	an Array(a RubCursor(407148288) a RubPrimarySelectionMorph(713472256...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (1061062912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(661221632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(407148288)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(581762304) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(37767936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(186971392)
		submorphs: 	an Array(a RubCursor(407148288) a RubPrimarySelectionMorph(713472256...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (1061062912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(661221632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(407148288)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(581762304) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(37767936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@2292)
		owner: 	a TransformWithLayoutMorph(186971392)
		submorphs: 	an Array(a RubCursor(407148288) a RubPrimarySelectionMorph(713472256...etc...
		fullBounds: 	(0@0) corner: (1395@2292)
		color: 	Color transparent
		extension: 	a MorphExtension (1061062912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(661221632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(407148288)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(581762304) a ClyCr...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(37767936)
	Receiver's instance variables: 
		bounds: 	(742@487.0) corner: (758@503.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(742@487) mouseOver 4071375 nil]
		targetOffset: 	(716@345)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4071375 742 487 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(742@487.0) corner: (758@503.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(742@487) mouseOver 4071375 nil]
		targetOffset: 	(716@345)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4071375 742 487 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(597582592))(a DropList...etc...
		lastStepTime: 	4072599
		lastStepMessage: 	nil
		lastCycleTime: 	4072619
		alarms: 	a Heap()
		lastAlarmTime: 	4072599
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:24:48.672034+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:37:01.27386 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1399)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1399)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1399)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1399)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1399)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1399)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1044999936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1399)
		owner: 	a TransformWithLayoutMorph(120522496)
		submorphs: 	an Array(a RubCursor(327082752) a RubPrimarySelectionMorph(975919872...etc...
		fullBounds: 	(0@0) corner: (1395@1399)
		color: 	Color transparent
		extension: 	a MorphExtension (138296576) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547199232)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(327082752)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1044999936)
	Receiver's instance variables: 
		bounds: 	(1132@781.0) corner: (1148@797.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1132@781) mouseOver 83925 nil]
		targetOffset: 	(157@700)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 83925 1132 781 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1132@781.0) corner: (1148@797.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1132@781) mouseOver 83925 nil]
		targetOffset: 	(157@700)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 83925 1132 781 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@776)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a ClyActivityAnimationIconMorph(624754...etc...
		lastStepTime: 	85050
		lastStepMessage: 	nil
		lastCycleTime: 	85075
		alarms: 	a Heap()
		lastAlarmTime: 	85050
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:39:13.086863 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(328809984)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@1038)
		owner: 	a TransformWithLayoutMorph(836932608)
		submorphs: 	an Array(a RubCursor(585449728) a RubPrimarySelectionMorph(965984512...etc...
		fullBounds: 	(0@0) corner: (1385@1038)
		color: 	Color transparent
		extension: 	a MorphExtension (960740864) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(311943936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(585449728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(328809984)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@1038)
		owner: 	a TransformWithLayoutMorph(836932608)
		submorphs: 	an Array(a RubCursor(585449728) a RubPrimarySelectionMorph(965984512...etc...
		fullBounds: 	(0@0) corner: (1385@1038)
		color: 	Color transparent
		extension: 	a MorphExtension (960740864) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(311943936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(585449728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(328809984)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@1038)
		owner: 	a TransformWithLayoutMorph(836932608)
		submorphs: 	an Array(a RubCursor(585449728) a RubPrimarySelectionMorph(965984512...etc...
		fullBounds: 	(0@0) corner: (1385@1038)
		color: 	Color transparent
		extension: 	a MorphExtension (960740864) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(311943936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(585449728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(328809984)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@1038)
		owner: 	a TransformWithLayoutMorph(836932608)
		submorphs: 	an Array(a RubCursor(585449728) a RubPrimarySelectionMorph(965984512...etc...
		fullBounds: 	(0@0) corner: (1385@1038)
		color: 	Color transparent
		extension: 	a MorphExtension (960740864) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(311943936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(585449728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(328809984)
	Receiver's instance variables: 
		bounds: 	(461@586.0) corner: (477@602.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(461@586) mouseOver 214555 nil]
		targetOffset: 	(37@200)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 214555 461 586 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(461@586.0) corner: (477@602.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(461@586) mouseOver 214555 nil]
		targetOffset: 	(37@200)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 214555 461 586 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@776)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(222966528))(a DropList...etc...
		lastStepTime: 	216726
		lastStepMessage: 	nil
		lastCycleTime: 	216746
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(585449728)))
		lastAlarmTime: 	216726
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:53:00.452435 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubCursor(6601984) a RubPrimarySelectionMorph(758821632) ...etc...
		fullBounds: 	(0@0) corner: (1395@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(135290624))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubCursor(6601984) a RubPrimarySelectionMorph(758821632) ...etc...
		fullBounds: 	(0@0) corner: (1395@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(135290624))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubCursor(6601984) a RubPrimarySelectionMorph(758821632) ...etc...
		fullBounds: 	(0@0) corner: (1395@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(135290624))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubCursor(6601984) a RubPrimarySelectionMorph(758821632) ...etc...
		fullBounds: 	(0@0) corner: (1395@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(135290624))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(384472320)
	Receiver's instance variables: 
		bounds: 	(661@518.0) corner: (677@534.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(661@518) mouseOver 1043009 nil]
		targetOffset: 	(465@205)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1043009 661 518 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(661@518.0) corner: (677@534.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(661@518) mouseOver 1043009 nil]
		targetOffset: 	(465@205)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1043009 661 518 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@776)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(289839872))(a DropList...etc...
		lastStepTime: 	1044185
		lastStepMessage: 	nil
		lastCycleTime: 	1044206
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(6601984)))
		lastAlarmTime: 	1044185
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Halt
13 November 2019 3:55:02.93957 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

CCodeGeneratorGlobalStructure(Object)>>haltOnce
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 

	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure>>placeInStructure:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		var: 	'signalLowSpace'
		check: 	nil
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


[ :var | 
"if any var is global and in the global var struct 
		tell the TMethod it may be refering to the  struct, depending upon the #defines"
((variables includes: var) and: [ self placeInStructure: var ])
	ifTrue: [ aTMethod referencesGlobalStruct ] ] in CCodeGeneratorGlobalStructure>>checkForGlobalUsage:in:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		vars: 	a Set('signalLowSpace' 'statSGCDeltaUsecs' 'checkForLeaks' 'statShrinkMem...etc...
		aTMethod: 	a TMethod (SpurMemoryManager>>initialize)
		var: 	'signalLowSpace'
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


Set>>do:
	Receiver: a Set('signalLowSpace' 'statSGCDeltaUsecs' 'checkForLeaks' 'statShrinkMemory' 'remapBuffer...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :var | 
"if any var is global and in the global var struct 
		tell th...etc...
		index: 	1
		each: 	'signalLowSpace'
	Receiver's instance variables: 
		tally: 	53
		array: 	#('signalLowSpace' 'statSGCDeltaUsecs' nil nil 'checkForLeaks' nil nil '...etc...


CCodeGeneratorGlobalStructure>>checkForGlobalUsage:in:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		vars: 	a Set('signalLowSpace' 'statSGCDeltaUsecs' 'checkForLeaks' 'statShrinkMem...etc...
		aTMethod: 	a TMethod (SpurMemoryManager>>initialize)
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


CCodeGeneratorGlobalStructure(CCodeGenerator)>>addMethodFor:selector:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aClass: 	SpurMemoryManager
		selector: 	#initialize
		method: 	SpurMemoryManager>>#initialize
		tmethod: 	a TMethod (SpurMemoryManager>>initialize)
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


[ :sel :i | 
| source |
bar value: i.
self addMethodFor: aClass selector: sel ] in [ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar value: i.
		self addMethodFor: aClass selector: sel ] ] in CCodeGeneratorGlobalStructure(CCodeGenerator)>>addClass:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aClass: 	SpurMemoryManager
		bar: 	a Job
		sel: 	#initialize
		i: 	654
		source: 	nil
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


Array(SequenceableCollection)>>withIndexDo:
	Receiver: #(#positive64BitValueOf: #postBecomeScanClassTable: #scavengeInProgress #allFreeObjectsDo:...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :sel :i | 
| source |
bar value: i.
self addMethodFor: ...etc...
		index: 	654
	Receiver's instance variables: 
#(#positive64BitValueOf: #postBecomeScanClassTable: #scavengeInProgress #allFreeObjectsDo:...etc...

Array(SequenceableCollection)>>doWithIndex:
	Receiver: #(#positive64BitValueOf: #postBecomeScanClassTable: #scavengeInProgress #allFreeObjectsDo:...etc...
	Arguments and temporary variables: 
		elementAndIndexBlock: 	[ :sel :i | 
| source |
bar value: i.
self addMethodFor: ...etc...
	Receiver's instance variables: 
#(#positive64BitValueOf: #postBecomeScanClassTable: #scavengeInProgress #allFreeObjectsDo:...etc...

[ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar value: i.
		self addMethodFor: aClass selector: sel ] ] in CCodeGeneratorGlobalStructure(CCodeGenerator)>>addClass:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aClass: 	SpurMemoryManager
		bar: 	a Job
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


BlockClosure>>cull:
	Receiver: [ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar value: i.
		self ...etc...
	Arguments and temporary variables: 
		anArg: 	a Job
	Receiver's instance variables: 
		outerContext: 	CCodeGeneratorGlobalStructure(CCodeGenerator)>>addClass:
		startpc: 	261
		numArgs: 	1


[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar...etc...
		currentValue: 	654
		min: 	0
		max: 	952
		title: 	'Adding Class SpurMemoryManager...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


BlockClosure>>ensure:
	Receiver: [ activeProcess psValueAt: index put: anObject.
aBlock value ]
	Arguments and temporary variables: 
		aBlock: 	[ activeProcess psValueAt: index put: oldValue ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	CurrentJob(DynamicVariable)>>value:during:
		startpc: 	79
		numArgs: 	0


CurrentJob(DynamicVariable)>>value:during:
	Receiver: a CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
		activeProcess: 	a Process in nil
		oldValue: 	nil
	Receiver's instance variables: 
		index: 	2


CurrentJob class(DynamicVariable class)>>value:during:
	Receiver: CurrentJob
	Arguments and temporary variables: 
		anObject: 	a Job
		aBlock: 	[ ^ block cull: self ]
	Receiver's instance variables: 
		superclass: 	DynamicVariable
		methodDict: 	a MethodDictionary()
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#CurrentJob
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Jobs-Base'
		soleInstance: 	a CurrentJob


[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar...etc...
		currentValue: 	654
		min: 	0
		max: 	952
		title: 	'Adding Class SpurMemoryManager...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


BlockClosure>>ensure:
	Receiver: [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ]
	Arguments and temporary variables: 
		aBlock: 	[ self cleanupAfterRunning ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	Job>>run
		startpc: 	77
		numArgs: 	0


Job>>run
	Receiver: a Job
	Arguments and temporary variables: 

	Receiver's instance variables: 
		block: 	[ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar...etc...
		currentValue: 	654
		min: 	0
		max: 	952
		title: 	'Adding Class SpurMemoryManager...'
		children: 	an OrderedCollection()
		isRunning: 	true
		parent: 	nil
		process: 	a Process in nil


MorphicUIManager(UIManager)>>displayProgress:from:to:during:
	Receiver: a MorphicUIManager
	Arguments and temporary variables: 
		titleString: 	'Adding Class SpurMemoryManager...'
		minVal: 	0
		maxVal: 	952
		workBlock: 	[ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
	...etc...
	Receiver's instance variables: 
		activeTranscript: 	nil


CCodeGeneratorGlobalStructure(CCodeGenerator)>>addClass:
	Receiver: a CCodeGeneratorGlobalStructure
	Arguments and temporary variables: 
		aClass: 	SpurMemoryManager
	Receiver's instance variables: 
		vmClass: 	StackInterpreterPrimitives
		structClasses: 	an OrderedCollection(SpurScavengeLogRecord SpurSegmentInfo SpurN...etc...
		translationDict: 	a Dictionary(size 126)
		asArgumentTranslationDict: 	a Dictionary(#cCode:->#generateInlineCCodeAsArgument...etc...
		inlineList: 	#()
		constants: 	a Dictionary(size 216)
		variables: 	a Set(#statMaxAllocSegmentTime #signalLowSpace #invalidObjStackPage ...etc...
		variableDeclarations: 	a Dictionary('expensiveAsserts'->'char expensiveAsserts =...etc...
		scopeStack: 	an OrderedCollection()
		methods: 	a Dictionary(size 630)
		macros: 	a Dictionary(#alloca:type:->'(numElements, elementType) alloca((numElem...etc...
		apiMethods: 	nil
		apiVariables: 	nil
		kernelReturnTypes: 	a Dictionary(#baseHeaderSize->#sqInt #byteAt:->#sqInt #byteA...etc...
		currentMethod: 	nil
		headerFiles: 	an OrderedCollection()
		globalVariableUsage: 	a Dictionary('becomeEffectsFlags'->a Set(#initialize) 'che...etc...
		useSymbolicConstants: 	true
		generateDeadCode: 	false
		requiredSelectors: 	a Set()
		previousCommentMarksInlining: 	false
		previousCommenter: 	nil
		logger: 	Transcript
		suppressAsmLabels: 	false
		asmLabelCounts: 	nil
		pools: 	an IdentitySet(VMBasicConstants VMObjectIndices VMBytecodeConstants VMSq...etc...
		selectorTranslations: 	an IdentityDictionary()
		staticallyResolvedPolymorphicReceivers: 	nil
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		breakSrcInlineSelectors: 	an IdentitySet()
		breakDestInlineSelectors: 	an IdentitySet()
		breakOnInline: 	nil
		vmMaker: 	a CrossPlatformVMMaker
		localStructDef: 	nil
		structDefDefine: 	'USE_GLOBAL_STRUCT'


[ :ic | cg addClass: ic ] in CrossPlatformVMMaker(VMMaker)>>buildCodeGeneratorForInterpreter:includeAPIMethods:initializeClasses:
	Receiver: a CrossPlatformVMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreterPrimitives
		getAPIMethods: 	true
		initializeClasses: 	true
		cg: 	a CCodeGeneratorGlobalStructure
		interpreterClasses: 	an OrderedCollection(VMClass CogClass SpurMemoryManager Spu...etc...
		ic: 	SpurMemoryManager
	Receiver's instance variables: 
		inline: 	true
		forBrowser: 	false
		allPlugins: 	a SortedCollection(#ADPCMCodecPlugin #AsynchFilePlugin #B3DAccelera...etc...
		internalPlugins: 	a SortedCollection()
		externalPlugins: 	a SortedCollection()
		platformName: 	'Cross'
		sourceDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		platformRootDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		logger: 	Transcript
		interpreterClassName: 	'StackInterpreter'
		is64BitVM: 	false
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		abortBlock: 	nil
		doCleanupOldFiles: 	true


OrderedCollection>>do:
	Receiver: an OrderedCollection(VMClass CogClass SpurMemoryManager Spur64BitMemoryManager Interpreter...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :ic | cg addClass: ic ]
		index: 	6
	Receiver's instance variables: 
		array: 	{nil. nil. nil. VMClass. CogClass. SpurMemoryManager. Spur64BitMemoryMan...etc...
		firstIndex: 	4
		lastIndex: 	16


CrossPlatformVMMaker(VMMaker)>>buildCodeGeneratorForInterpreter:includeAPIMethods:initializeClasses:
	Receiver: a CrossPlatformVMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreterPrimitives
		getAPIMethods: 	true
		initializeClasses: 	true
		cg: 	a CCodeGeneratorGlobalStructure
		interpreterClasses: 	an OrderedCollection(VMClass CogClass SpurMemoryManager Spu...etc...
	Receiver's instance variables: 
		inline: 	true
		forBrowser: 	false
		allPlugins: 	a SortedCollection(#ADPCMCodecPlugin #AsynchFilePlugin #B3DAccelera...etc...
		internalPlugins: 	a SortedCollection()
		externalPlugins: 	a SortedCollection()
		platformName: 	'Cross'
		sourceDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		platformRootDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		logger: 	Transcript
		interpreterClassName: 	'StackInterpreter'
		is64BitVM: 	false
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		abortBlock: 	nil
		doCleanupOldFiles: 	true


CrossPlatformVMMaker(VMMaker)>>buildCodeGeneratorForInterpreter
	Receiver: a CrossPlatformVMMaker
	Arguments and temporary variables: 

	Receiver's instance variables: 
		inline: 	true
		forBrowser: 	false
		allPlugins: 	a SortedCollection(#ADPCMCodecPlugin #AsynchFilePlugin #B3DAccelera...etc...
		internalPlugins: 	a SortedCollection()
		externalPlugins: 	a SortedCollection()
		platformName: 	'Cross'
		sourceDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		platformRootDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		logger: 	Transcript
		interpreterClassName: 	'StackInterpreter'
		is64BitVM: 	false
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		abortBlock: 	nil
		doCleanupOldFiles: 	true


[ self buildCodeGeneratorForInterpreter ] in CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
	Receiver: a CrossPlatformVMMaker
	Arguments and temporary variables: 
		cg: 	nil
		vmHeaderContents: 	nil
	Receiver's instance variables: 
		inline: 	true
		forBrowser: 	false
		allPlugins: 	a SortedCollection(#ADPCMCodecPlugin #AsynchFilePlugin #B3DAccelera...etc...
		internalPlugins: 	a SortedCollection()
		externalPlugins: 	a SortedCollection()
		platformName: 	'Cross'
		sourceDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		platformRootDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		logger: 	Transcript
		interpreterClassName: 	'StackInterpreter'
		is64BitVM: 	false
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		abortBlock: 	nil
		doCleanupOldFiles: 	true


BlockClosure>>on:do:
	Receiver: [ self buildCodeGeneratorForInterpreter ]
	Arguments and temporary variables: 
		exception: 	Notification
		handlerAction: 	[ :ex | 
ex tag == #getVMMaker
	ifTrue: [ ex resume: self ]
	ifF...etc...
	Receiver's instance variables: 
		outerContext: 	CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
		startpc: 	309
		numArgs: 	0


CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
	Receiver: a CrossPlatformVMMaker
	Arguments and temporary variables: 
		cg: 	nil
		vmHeaderContents: 	nil
	Receiver's instance variables: 
		inline: 	true
		forBrowser: 	false
		allPlugins: 	a SortedCollection(#ADPCMCodecPlugin #AsynchFilePlugin #B3DAccelera...etc...
		internalPlugins: 	a SortedCollection()
		externalPlugins: 	a SortedCollection()
		platformName: 	'Cross'
		sourceDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		platformRootDirName: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/generated'
		logger: 	Transcript
		interpreterClassName: 	'StackInterpreter'
		is64BitVM: 	false
		optionsDictionary: 	a Dictionary(#BytesPerWord->4 #COGMTVM->false #CloneOnGC->tr...etc...
		abortBlock: 	nil
		doCleanupOldFiles: 	true


VMMaker class>>generateMainVM:and:with:to:platformDir:including:
	Receiver: VMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreter
		cogitClass: 	StackToRegisterMappingCogit
		optionsPairsArray: 	#(#COGMTVM false #ObjectMemory #Spur64BitMemoryManager #MULT...etc...
		srcDirName: 	File @ generated
		platDirName: 	File @ generated
		inclusions: 	#()
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 115)
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{CrossPlatformVMMaker. RiscOSVMMaker. UnixVMMaker. Win32VMMaker}
		name: 	#VMMaker
		classPool: 	a Dictionary(#DirNames->a Dictionary(#coreVMDir->'vm/src' #coreVMHea...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Building'


[ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(COGMTVM false ObjectMemory Spur64BitMemoryManager MULTIPLEBYTECODESETS true bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid)
	to: self outputDirectory / 'generated'
	platformDir: self outputDirectory / 'generated'
	including: #() ] in PharoVMMaker>>generateStackVM
	Receiver: a PharoVMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreter
	Receiver's instance variables: 
		outputDirectory: 	File @ .


BlockClosure>>on:do:
	Receiver: [ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(C...etc...
	Arguments and temporary variables: 
		exception: 	ProvideAnswerNotification
		handlerAction: 	[ :notify | 
| answer caption |
caption := notify messageText wi...etc...
	Receiver's instance variables: 
		outerContext: 	PharoVMMaker>>generateStackVM
		startpc: 	137
		numArgs: 	0


BlockClosure>>valueSupplyingAnswers:
	Receiver: [ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(C...etc...
	Arguments and temporary variables: 
		aListOfPairs: 	#(#('*' true))
	Receiver's instance variables: 
		outerContext: 	PharoVMMaker>>generateStackVM
		startpc: 	137
		numArgs: 	0


BlockClosure>>valueSupplyingAnswer:
	Receiver: [ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(C...etc...
	Arguments and temporary variables: 
		anObject: 	true
	Receiver's instance variables: 
		outerContext: 	PharoVMMaker>>generateStackVM
		startpc: 	137
		numArgs: 	0


PharoVMMaker>>generateStackVM
	Receiver: a PharoVMMaker
	Arguments and temporary variables: 
		interpreterClass: 	StackInterpreter
	Receiver's instance variables: 
		outputDirectory: 	File @ .


PharoVMMaker class>>generate:outputDirectory:
	Receiver: PharoVMMaker
	Arguments and temporary variables: 
		aClassName: 	#StackVM
		aDirectory: 	'.'
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#generateCoInterpreter->PharoVMMaker>>#generateC...etc...
		format: 	65537
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#PharoVMMaker
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMakerCompatibilityForPharo6-CommandLine'


UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

OpalCompiler>>evaluate
	Receiver: an OpalCompiler
	Arguments and temporary variables: 
		value: 	nil
	Receiver's instance variables: 
		ast: 	DoIt
	^ PharoVMMaker generate: #StackVM outputDirectory: '.'
		source: 	a ReadStream
		context: 	nil
		receiver: 	nil
		compilationContext: 	a CompilationContext
		compilationContextClass: 	nil


RubSmalltalkEditor>>evaluate:andDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aStream: 	a ReadStream
		aBlock: 	[ :result | aBlock value: result ]
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(66187008)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy


RubSmalltalkEditor>>highlightEvaluateAndDo:
	Receiver: a RubSmalltalkEditor
	Arguments and temporary variables: 
		aBlock: 	[ :result | t selection: result ]
	Receiver's instance variables: 
		defaultKeymappingIndex: 	an IdentityDictionary(#command->#(#noop: #cursorHome: #...etc...
		textArea: 	a RubEditingArea(66187008)
		selectorChooser: 	nil
		notificationStrategy: 	a GLMPopperNotificationStrategy



--- The full stack ---
CCodeGeneratorGlobalStructure(Object)>>haltOnce
CCodeGeneratorGlobalStructure>>placeInStructure:
[ :var | 
"if any var is global and in the global var struct 
		tell the TMethod it may be refering to the  struct, depending upon the #defines"
((variables includes: var) and: [ self placeInStructure: var ])
	ifTrue: [ aTMethod referencesGlobalStruct ] ] in CCodeGeneratorGlobalStructure>>checkForGlobalUsage:in:
Set>>do:
CCodeGeneratorGlobalStructure>>checkForGlobalUsage:in:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>addMethodFor:selector:
[ :sel :i | 
| source |
bar value: i.
self addMethodFor: aClass selector: sel ] in [ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar value: i.
		self addMethodFor: aClass selector: sel ] ] in CCodeGeneratorGlobalStructure(CCodeGenerator)>>addClass:
Array(SequenceableCollection)>>withIndexDo:
Array(SequenceableCollection)>>doWithIndex:
[ :bar | 
aClass selectors
	doWithIndex: [ :sel :i | 
		| source |
		bar value: i.
		self addMethodFor: aClass selector: sel ] ] in CCodeGeneratorGlobalStructure(CCodeGenerator)>>addClass:
BlockClosure>>cull:
[ ^ block cull: self ] in [ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
[ activeProcess psValueAt: index put: anObject.
aBlock value ] in CurrentJob(DynamicVariable)>>value:during:
BlockClosure>>ensure:
CurrentJob(DynamicVariable)>>value:during:
CurrentJob class(DynamicVariable class)>>value:during:
[ self prepareForRunning.
CurrentJob value: self during: [ ^ block cull: self ] ] in Job>>run
BlockClosure>>ensure:
Job>>run
MorphicUIManager(UIManager)>>displayProgress:from:to:during:
CCodeGeneratorGlobalStructure(CCodeGenerator)>>addClass:
[ :ic | cg addClass: ic ] in CrossPlatformVMMaker(VMMaker)>>buildCodeGeneratorForInterpreter:includeAPIMethods:initializeClasses:
OrderedCollection>>do:
CrossPlatformVMMaker(VMMaker)>>buildCodeGeneratorForInterpreter:includeAPIMethods:initializeClasses:
CrossPlatformVMMaker(VMMaker)>>buildCodeGeneratorForInterpreter
[ self buildCodeGeneratorForInterpreter ] in CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
BlockClosure>>on:do:
CrossPlatformVMMaker(VMMaker)>>generateInterpreterFile
VMMaker class>>generateMainVM:and:with:to:platformDir:including:
[ VMMaker
	generateMainVM: interpreterClass
	and: StackToRegisterMappingCogit
	with:
		#(COGMTVM false ObjectMemory Spur64BitMemoryManager MULTIPLEBYTECODESETS true bytecodeTableInitializer initializeBytecodeTableForSqueakV3PlusClosuresSistaV1Hybrid)
	to: self outputDirectory / 'generated'
	platformDir: self outputDirectory / 'generated'
	including: #() ] in PharoVMMaker>>generateStackVM
BlockClosure>>on:do:
BlockClosure>>valueSupplyingAnswers:
BlockClosure>>valueSupplyingAnswer:
PharoVMMaker>>generateStackVM
PharoVMMaker class>>generate:outputDirectory:
UndefinedObject>>DoIt
OpalCompiler>>evaluate
RubSmalltalkEditor>>evaluate:andDo:
RubSmalltalkEditor>>highlightEvaluateAndDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ textMorph textArea editor highlightEvaluateAndDo: ann action.
textMorph shoutStyler style: textMorph text ] in [ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
RubEditingArea(RubAbstractTextArea)>>handleEdit:
[ textMorph textArea
	handleEdit: [ textMorph textArea editor highlightEvaluateAndDo: ann action.
		textMorph shoutStyler style: textMorph text ] ] in GLMMorphicPharoScriptRenderer(GLMMorphicPharoCodeRenderer)>>actOnHighlightAndEvaluate:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:57:19.976212 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(384472320)
	Receiver's instance variables: 
		bounds: 	(257@535.0) corner: (273@551.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(257@535) mouseOver 1302934 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1302934 207 529 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(257@535.0) corner: (273@551.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(257@535) mouseOver 1302934 nil]
		targetOffset: 	(9.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1302934 207 529 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@776)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(803915008))(a DropList...etc...
		lastStepTime: 	1303744
		lastStepMessage: 	nil
		lastCycleTime: 	1303766
		alarms: 	a Heap()
		lastAlarmTime: 	1303744
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 3:57:30.786747 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(384472320)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@278)
		owner: 	a TransformWithLayoutMorph(51481088)
		submorphs: 	an Array(a RubPrimarySelectionMorph(186662912) a RubCursor(6601984))...etc...
		fullBounds: 	(0@0) corner: (1408@278)
		color: 	Color transparent
		extension: 	a MorphExtension (866035200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(883435520)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(6601984)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(384472320)
	Receiver's instance variables: 
		bounds: 	(91@672.0) corner: (107@688.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(83@663) mouseOver 1309362 nil]
		targetOffset: 	(81@227)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1309362 83 663 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(91@672.0) corner: (107@688.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(83@663) mouseOver 1309362 nil]
		targetOffset: 	(81@227)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1309362 83 663 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@776)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(289839872))(a DropList...etc...
		lastStepTime: 	1314558
		lastStepMessage: 	nil
		lastCycleTime: 	1314578
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(6601984)))
		lastAlarmTime: 	1314558
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@776)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@776)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 11:41:09.94229 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(737764864)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6624)
		owner: 	a TransformWithLayoutMorph(46443520)
		submorphs: 	an Array(a RubCursor(1024485120) a RubPrimarySelectionMorph(68040704...etc...
		fullBounds: 	(0@0) corner: (1395@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (809000960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1043172096)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1024485120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(737764864)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6624)
		owner: 	a TransformWithLayoutMorph(46443520)
		submorphs: 	an Array(a RubCursor(1024485120) a RubPrimarySelectionMorph(68040704...etc...
		fullBounds: 	(0@0) corner: (1395@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (809000960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1043172096)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1024485120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(737764864)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6624)
		owner: 	a TransformWithLayoutMorph(46443520)
		submorphs: 	an Array(a RubCursor(1024485120) a RubPrimarySelectionMorph(68040704...etc...
		fullBounds: 	(0@0) corner: (1395@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (809000960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1043172096)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1024485120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(737764864)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6624)
		owner: 	a TransformWithLayoutMorph(46443520)
		submorphs: 	an Array(a RubCursor(1024485120) a RubPrimarySelectionMorph(68040704...etc...
		fullBounds: 	(0@0) corner: (1395@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (809000960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1043172096)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1024485120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(737764864)
	Receiver's instance variables: 
		bounds: 	(1124@345.0) corner: (1140@361.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1124@345) mouseOver 72331997 nil]
		targetOffset: 	(40.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 72331997 1124 345 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1124@345.0) corner: (1140@361.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1124@345) mouseOver 72331997 nil]
		targetOffset: 	(40.0@4.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 72331997 1124 345 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(370717952))(a DropList...etc...
		lastStepTime: 	72333470
		lastStepMessage: 	nil
		lastCycleTime: 	72333495
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1024485120)))
		lastAlarmTime: 	72333470
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 1:25:03.416266 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(769268992)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@6624)
		owner: 	a TransformWithLayoutMorph(181603584)
		submorphs: 	an Array(a RubCursor(395352832) a RubPrimarySelectionMorph(856621824...etc...
		fullBounds: 	(0@0) corner: (1385@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (443277312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(640668160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(395352832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(769268992)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@6624)
		owner: 	a TransformWithLayoutMorph(181603584)
		submorphs: 	an Array(a RubCursor(395352832) a RubPrimarySelectionMorph(856621824...etc...
		fullBounds: 	(0@0) corner: (1385@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (443277312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(640668160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(395352832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(769268992)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@6624)
		owner: 	a TransformWithLayoutMorph(181603584)
		submorphs: 	an Array(a RubCursor(395352832) a RubPrimarySelectionMorph(856621824...etc...
		fullBounds: 	(0@0) corner: (1385@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (443277312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(640668160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(395352832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(769268992)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1385@6624)
		owner: 	a TransformWithLayoutMorph(181603584)
		submorphs: 	an Array(a RubCursor(395352832) a RubPrimarySelectionMorph(856621824...etc...
		fullBounds: 	(0@0) corner: (1385@6624)
		color: 	Color transparent
		extension: 	a MorphExtension (443277312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(640668160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(395352832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(769268992)
	Receiver's instance variables: 
		bounds: 	(319@626.0) corner: (335@642.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(319@626) mouseOver 78566050 nil]
		targetOffset: 	(99@2981)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 78566050 319 626 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(319@626.0) corner: (335@642.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(319@626) mouseOver 78566050 nil]
		targetOffset: 	(99@2981)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 78566050 319 626 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(199743744) named: Pl...etc...
		lastStepTime: 	78567031
		lastStepMessage: 	nil
		lastCycleTime: 	78567052
		alarms: 	a Heap()
		lastAlarmTime: 	78567031
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 4:44:11.779105 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(484425216)
	Receiver's instance variables: 
		bounds: 	(1098@814.0) corner: (1114@830.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1098@814) mouseOver 90506647 nil]
		targetOffset: 	(465@472)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90506647 1098 814 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1098@814.0) corner: (1114@830.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1098@814) mouseOver 90506647 nil]
		targetOffset: 	(465@472)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90506647 1098 814 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	90515312
		lastStepMessage: 	nil
		lastCycleTime: 	90515335
		alarms: 	a Heap()
		lastAlarmTime: 	90515312
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 4:45:42.639163 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(484425216)
	Receiver's instance variables: 
		bounds: 	(951@ -167.0) corner: (967@ -151.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@ -167) mouseOver 90605360 nil]
		targetOffset: 	(325@470)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90605360 951 -167 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(951@ -167.0) corner: (967@ -151.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(951@ -167) mouseOver 90605360 nil]
		targetOffset: 	(325@470)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90605360 951 -167 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(652097280))(a DropList...etc...
		lastStepTime: 	90606382
		lastStepMessage: 	nil
		lastCycleTime: 	90606404
		alarms: 	a Heap()
		lastAlarmTime: 	90606382
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 4:46:42.694596 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(484425216)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(627591424)
		submorphs: 	an Array(a RubCursor(43932160) a RubPrimarySelectionMorph(530347264)...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (273974016) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(566083840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(43932160)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(484425216)
	Receiver's instance variables: 
		bounds: 	(483@695.0) corner: (499@711.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(483@695) mouseOver 90660935 nil]
		targetOffset: 	(452@474)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90660935 483 695 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(483@695.0) corner: (499@711.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(483@695) mouseOver 90660935 nil]
		targetOffset: 	(452@474)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90660935 483 695 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(652097280))(a DropList...etc...
		lastStepTime: 	90666402
		lastStepMessage: 	nil
		lastCycleTime: 	90666425
		alarms: 	a Heap()
		lastAlarmTime: 	90666402
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
14 November 2019 4:51:12.369138 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(754142464)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(1032268800)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (256088576)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(754142464)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(1032268800)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		each: 	a ClyMethodCodeEditorToolMorph(1032268800)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(1032268800) nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>itemsChangedIn:
	Receiver: a ClyQueryViewMorph(531122176)
	Arguments and temporary variables: 
		aDataSource: 	a ClyCollapsedDataSource
		selectionWasEmpty: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(548189440)
		submorphs: 	an Array(a FTTableMorph(129560064))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1044276224)
		table: 	a FTTableMorph(129560064)
		browser: 	a ClyQueryBrowser(754142464)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyCollapsedDataSource(ClyDataSource)>>runUpdate
	Receiver: a ClyCollapsedDataSource
	Arguments and temporary variables: 

	Receiver's instance variables: 
		table: 	a FTTableMorph(129560064)
		query: 	a ClyAsyncQuery(methods sources with 'setMyCurrentThread', class comment...etc...
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(methods sources with 'setMy...etc...
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(531122176)
		dirty: 	false
		expandedItems: 	a SortedCollection()


[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
	Receiver: a ClyDataSourceUpdateScheduler
	Arguments and temporary variables: 
		dataSources: 	an OrderedCollection(a ClyCollapsedDataSource)
		each: 	a ClyCollapsedDataSource
	Receiver's instance variables: 
		updateQueue: 	AtomicSharedQueue with 0 items
		process: 	a Process in AtomicSharedQueue>>waitForNewItems


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyCollapsedDataSource)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each runUpdate ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyCollapsedDataSource nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
14 November 2019 4:51:15.482996 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(754142464)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(1032268800)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (256088576)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(754142464)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(1032268800)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		each: 	a ClyMethodCodeEditorToolMorph(1032268800)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(1032268800) nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>itemsChangedIn:
	Receiver: a ClyQueryViewMorph(531122176)
	Arguments and temporary variables: 
		aDataSource: 	a ClyCollapsedDataSource
		selectionWasEmpty: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(548189440)
		submorphs: 	an Array(a FTTableMorph(129560064))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (1044276224)
		table: 	a FTTableMorph(129560064)
		browser: 	a ClyQueryBrowser(754142464)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyCollapsedDataSource(ClyDataSource)>>runUpdate
	Receiver: a ClyCollapsedDataSource
	Arguments and temporary variables: 

	Receiver's instance variables: 
		table: 	a FTTableMorph(129560064)
		query: 	a ClyAsyncQuery(methods sources with 'setMyCurrentThread', class comment...etc...
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(methods sources with 'setMy...etc...
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(531122176)
		dirty: 	false
		expandedItems: 	a SortedCollection()



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
14 November 2019 4:51:16.553063 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(754142464)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(1032268800)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (256088576)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(754142464)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(1032268800)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		each: 	a ClyMethodCodeEditorToolMorph(1032268800)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(1032268800) nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
14 November 2019 4:51:18.149101 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(754142464)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(1032268800)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (256088576)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(754142464)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(1032268800)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		each: 	a ClyMethodCodeEditorToolMorph(1032268800)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(1032268800) nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
14 November 2019 4:51:19.212368 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

Message>>sentTo:
	Receiver: name
	Arguments and temporary variables: 
		receiver: 	nil
	Receiver's instance variables: 
		selector: 	#name
		args: 	#()
		lookupClass: 	UndefinedObject


UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	MessageNotUnderstood: receiver of "name" is nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(754142464)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(1032268800)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (256088576)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(754142464)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(1032268800)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		each: 	a ClyMethodCodeEditorToolMorph(1032268800)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(1032268800) nil nil nil nil nil ...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
Message>>sentTo:
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
14 November 2019 4:51:24.26626 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(1032268800)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (256088576)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(754142464)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(1032268800)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(1032268800)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(754142464)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(754142464)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState class(ClyBrowserState class)>>of:
	Receiver: ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(754142464)
	Receiver's instance variables: 
		superclass: 	ClyBrowserState
		methodDict: 	a MethodDictionary(#activeScope->ClyQueryBrowserState>>#activeScope...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyQueryBrowserState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemTools-QueryBrowser-UI'


ClyQueryBrowser>>snapshotState
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 
		navigationFailed: 	false
		aBlock: 	[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTool...etc...
		state: 	nil
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 
		newTools: 	nil
		aQueryView: 	a ClyQueryViewMorph(531122176)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(531122176)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(548189440)
		submorphs: 	an Array(a FTTableMorph(129560064))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (1044276224)
		table: 	a FTTableMorph(129560064)
		browser: 	a ClyQueryBrowser(754142464)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(531122176)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(548189440)
		submorphs: 	an Array(a FTTableMorph(129560064))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (1044276224)
		table: 	a FTTableMorph(129560064)
		browser: 	a ClyQueryBrowser(754142464)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(531122176)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(531122176)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(531122176)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(531122176)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
ClyQueryBrowserState>>retrieveStateFrom:
ClyQueryBrowserState class(ClyBrowserState class)>>of:
ClyQueryBrowser>>snapshotState
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
14 November 2019 4:51:26.875035 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(1032268800)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (256088576)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(754142464)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(1032268800)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(1032268800)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>desiredSelection:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		toolClasses: 	an OrderedCollection(ClyMethodCodeEditorToolMorph)
		currentSelection: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(754142464)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(1032268800))
		tabMorph: 	a TabManagerMorph(549103872)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTools := OrderedCollection new.
		tabManager
			buildToolsOn: newTools
			for: aQueryView createSelectionContext.
		tabManager desiredSelection: (newTools collect: #class) ] ] in ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 
		aQueryView: 	a ClyQueryViewMorph(531122176)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(580931328))
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(754142464)
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(580931328))
		aQueryView: 	a ClyQueryViewMorph(531122176)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(849066496) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(584594688) a PanelMorph(5481894...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (718563840) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(548189440)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(531122176))
		toolPanel: 	a PanelMorph(1055036928)
		toolbar: 	a ClyToolbarMorph(558124800)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(531122176)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(531122176)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(548189440)
		submorphs: 	an Array(a FTTableMorph(129560064))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (1044276224)
		table: 	a FTTableMorph(129560064)
		browser: 	a ClyQueryBrowser(754142464)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(requiredMethodNames:)
		desiredSelection: 	a ClyDesiredSelection(requiredMethodNames:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(531122176)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(548189440)
		submorphs: 	an Array(a FTTableMorph(129560064))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (1044276224)
		table: 	a FTTableMorph(129560064)
		browser: 	a ClyQueryBrowser(754142464)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(requiredMethodNames:)
		desiredSelection: 	a ClyDesiredSelection(requiredMethodNames:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(531122176)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(531122176)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(531122176)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(531122176)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(531122176))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyTabManager>>desiredSelection:
[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTools := OrderedCollection new.
		tabManager
			buildToolsOn: newTools
			for: aQueryView createSelectionContext.
		tabManager desiredSelection: (newTools collect: #class) ] ] in ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 4:52:31.866257 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(908298496)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(388268288)
		submorphs: 	an Array(a RubCursor(786652672) a RubPrimarySelectionMorph(510186752...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (64199424) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(499547648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(786652672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(908298496)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(388268288)
		submorphs: 	an Array(a RubCursor(786652672) a RubPrimarySelectionMorph(510186752...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (64199424) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(499547648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(786652672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(908298496)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(388268288)
		submorphs: 	an Array(a RubCursor(786652672) a RubPrimarySelectionMorph(510186752...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (64199424) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(499547648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(786652672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(908298496)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(388268288)
		submorphs: 	an Array(a RubCursor(786652672) a RubPrimarySelectionMorph(510186752...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (64199424) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(499547648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(786652672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(908298496)
	Receiver's instance variables: 
		bounds: 	(790@229.0) corner: (806@245.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(790@229) mouseOver 91014540 nil]
		targetOffset: 	(237@456)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91014540 790 229 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(790@229.0) corner: (806@245.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(790@229) mouseOver 91014540 nil]
		targetOffset: 	(237@456)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91014540 790 229 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	91015586
		lastStepMessage: 	nil
		lastCycleTime: 	91015612
		alarms: 	a Heap()
		lastAlarmTime: 	91015586
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 4:53:28.846595 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1003351296)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(213381632)
		submorphs: 	an Array(a RubCursor(317155840) a RubPrimarySelectionMorph(387284224...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (65973504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(10354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(317155840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1003351296)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(213381632)
		submorphs: 	an Array(a RubCursor(317155840) a RubPrimarySelectionMorph(387284224...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (65973504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(10354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(317155840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1003351296)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(213381632)
		submorphs: 	an Array(a RubCursor(317155840) a RubPrimarySelectionMorph(387284224...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (65973504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(10354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(317155840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1003351296)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(213381632)
		submorphs: 	an Array(a RubCursor(317155840) a RubPrimarySelectionMorph(387284224...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (65973504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(10354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(317155840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1003351296)
	Receiver's instance variables: 
		bounds: 	(378@634.0) corner: (394@650.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(378@634) mouseOver 91070596 nil]
		targetOffset: 	(222@457)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91070596 378 634 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(378@634.0) corner: (394@650.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(378@634) mouseOver 91070596 nil]
		targetOffset: 	(222@457)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91070596 378 634 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a ClyActivityAnimationIconMorph(391278...etc...
		lastStepTime: 	91072461
		lastStepMessage: 	nil
		lastCycleTime: 	91072483
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(317155840)))
		lastAlarmTime: 	91072461
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 5:01:48.600423 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(200427264)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(256419840)
		submorphs: 	an Array(a RubCursor(781680384) a RubPrimarySelectionMorph(898522880...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (423042816) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(725268992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(781680384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(200427264)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(256419840)
		submorphs: 	an Array(a RubCursor(781680384) a RubPrimarySelectionMorph(898522880...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (423042816) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(725268992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(781680384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(200427264)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(256419840)
		submorphs: 	an Array(a RubCursor(781680384) a RubPrimarySelectionMorph(898522880...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (423042816) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(725268992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(781680384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(200427264)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(256419840)
		submorphs: 	an Array(a RubCursor(781680384) a RubPrimarySelectionMorph(898522880...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (423042816) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(725268992)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(781680384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(200427264)
	Receiver's instance variables: 
		bounds: 	(939@ -152.0) corner: (955@ -136.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(939@ -152) mouseOver 91571234 nil]
		targetOffset: 	(290@134)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91571234 939 -152 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(939@ -152.0) corner: (955@ -136.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(939@ -152) mouseOver 91571234 nil]
		targetOffset: 	(290@134)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91571234 939 -152 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(332907008))(a DropList...etc...
		lastStepTime: 	91572190
		lastStepMessage: 	nil
		lastCycleTime: 	91572216
		alarms: 	a Heap()
		lastAlarmTime: 	91572190
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

14 November 2019 5:36:09.378941 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(435206912...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (196222720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(435206912...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (196222720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(435206912...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (196222720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(435206912...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (196222720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(788972544)
	Receiver's instance variables: 
		bounds: 	(531@540.0) corner: (547@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@540) mouseOver 93627808 nil]
		targetOffset: 	(497@119)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 93627808 531 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(531@540.0) corner: (547@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@540) mouseOver 93627808 nil]
		targetOffset: 	(497@119)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 93627808 531 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(332907008))(a DropList...etc...
		lastStepTime: 	93632938
		lastStepMessage: 	nil
		lastCycleTime: 	93632960
		alarms: 	a Heap()
		lastAlarmTime: 	93632938
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T15:35:35.994313+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 9:51:56.771871 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(524285696...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (547242752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(524285696...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (547242752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(524285696...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (547242752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(788972544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(626720256)
		submorphs: 	an Array(a RubCursor(889837056) a RubPrimarySelectionMorph(524285696...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (547242752) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(957286656)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(889837056)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(788972544)
	Receiver's instance variables: 
		bounds: 	(531@540.0) corner: (547@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@540) mouseOver 93627808 nil]
		targetOffset: 	(497@119)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 93627808 531 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(531@540.0) corner: (547@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(531@540) mouseOver 93627808 nil]
		targetOffset: 	(497@119)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 93627808 531 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(332907008))(a DropList...etc...
		lastStepTime: 	93632938
		lastStepMessage: 	nil
		lastCycleTime: 	93632960
		alarms: 	a Heap()
		lastAlarmTime: 	93632938
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 11:00:37.42895 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(411630080) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(411630080) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(411630080) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(411630080) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(536551936)
	Receiver's instance variables: 
		bounds: 	(539@431.0) corner: (555@447.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(539@431) mouseOver 4119594 nil]
		targetOffset: 	(164.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4119594 539 431 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(539@431.0) corner: (555@447.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(539@431) mouseOver 4119594 nil]
		targetOffset: 	(164.0@7.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4119594 539 431 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	4120768
		lastStepMessage: 	nil
		lastCycleTime: 	4120794
		alarms: 	a Heap()
		lastAlarmTime: 	4120768
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 11:01:56.578203 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(588044544) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(588044544) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(588044544) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(536551936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(547508224)
		submorphs: 	an Array(a RubCursor(620762112) a RubPrimarySelectionMorph(441888512...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (227528704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(6784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(620762112)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(588044544) a ClyCriticalTe...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(536551936)
	Receiver's instance variables: 
		bounds: 	(1857@ -396.0) corner: (1873@ -380.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1857@ -396) mouseOver 4185460 nil]
		targetOffset: 	(278@57)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4185460 1857 -396 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1857@ -396.0) corner: (1873@ -380.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1857@ -396) mouseOver 4185460 nil]
		targetOffset: 	(278@57)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 4185460 1857 -396 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	4200078
		lastStepMessage: 	nil
		lastCycleTime: 	4200098
		alarms: 	a Heap()
		lastAlarmTime: 	4200078
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 1:17:58.390249 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(358086144)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(34394368)
		submorphs: 	an Array(a RubCursor(559804416) a RubPrimarySelectionMorph(309078528...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (405938688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(395999488)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(559804416)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(58937344) a RubTextSegment...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(358086144)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(34394368)
		submorphs: 	an Array(a RubCursor(559804416) a RubPrimarySelectionMorph(309078528...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (405938688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(395999488)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(559804416)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(58937344) a RubTextSegment...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(358086144)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(34394368)
		submorphs: 	an Array(a RubCursor(559804416) a RubPrimarySelectionMorph(309078528...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (405938688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(395999488)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(559804416)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(58937344) a RubTextSegment...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(358086144)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(34394368)
		submorphs: 	an Array(a RubCursor(559804416) a RubPrimarySelectionMorph(309078528...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (405938688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(395999488)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(559804416)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(58937344) a RubTextSegment...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(358086144)
	Receiver's instance variables: 
		bounds: 	(513@555.0) corner: (529@571.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(513@555) mouseOver 12360418 nil]
		targetOffset: 	(538@490)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12360418 513 555 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(513@555.0) corner: (529@571.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(513@555) mouseOver 12360418 nil]
		targetOffset: 	(538@490)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12360418 513 555 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	12361872
		lastStepMessage: 	nil
		lastCycleTime: 	12361895
		alarms: 	a Heap()
		lastAlarmTime: 	12361872
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 1:22:37.085449 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(692161536)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(242972160)
		submorphs: 	an Array(a RubCursor(935397120) a RubPrimarySelectionMorph(568846336...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (6126080) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(196432128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(935397120)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(959048960) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(692161536)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(242972160)
		submorphs: 	an Array(a RubCursor(935397120) a RubPrimarySelectionMorph(568846336...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (6126080) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(196432128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(935397120)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(959048960) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(692161536)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(242972160)
		submorphs: 	an Array(a RubCursor(935397120) a RubPrimarySelectionMorph(568846336...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (6126080) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(196432128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(935397120)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(959048960) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(692161536)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@563)
		owner: 	a TransformWithLayoutMorph(242972160)
		submorphs: 	an Array(a RubCursor(935397120) a RubPrimarySelectionMorph(568846336...etc...
		fullBounds: 	(0@0) corner: (1395@563)
		color: 	Color transparent
		extension: 	a MorphExtension (6126080) [other:  (announcer -> an Announcer) (kmD...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(196432128)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(935397120)
		segments: 	an OrderedCollection(a RubTextSegmentMorph(959048960) a RubTextSegmen...etc...
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(692161536)
	Receiver's instance variables: 
		bounds: 	(345@ -176.0) corner: (361@ -160.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(345@ -176) mouseOver 12633655 nil]
		targetOffset: 	(21@207)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12633655 345 -176 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(345@ -176.0) corner: (361@ -160.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(345@ -176) mouseOver 12633655 nil]
		targetOffset: 	(21@207)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12633655 345 -176 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(121336320))(a DropList...etc...
		lastStepTime: 	12640571
		lastStepMessage: 	nil
		lastCycleTime: 	12640594
		alarms: 	a Heap()
		lastAlarmTime: 	12640571
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 1:28:33.79086 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(994774272)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(1014485504)
		submorphs: 	an Array(a RubCursor(925443328) a RubPrimarySelectionMorph(31399424)...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (525841408) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(514400256)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(925443328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(994774272)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(1014485504)
		submorphs: 	an Array(a RubCursor(925443328) a RubPrimarySelectionMorph(31399424)...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (525841408) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(514400256)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(925443328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(994774272)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(1014485504)
		submorphs: 	an Array(a RubCursor(925443328) a RubPrimarySelectionMorph(31399424)...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (525841408) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(514400256)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(925443328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(994774272)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(1014485504)
		submorphs: 	an Array(a RubCursor(925443328) a RubPrimarySelectionMorph(31399424)...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (525841408) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(514400256)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(925443328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(994774272)
	Receiver's instance variables: 
		bounds: 	(58@540.0) corner: (74@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(58@540) mouseOver 12995045 nil]
		targetOffset: 	(52@134)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12995045 58 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(58@540.0) corner: (74@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(58@540) mouseOver 12995045 nil]
		targetOffset: 	(52@134)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12995045 58 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	12997268
		lastStepMessage: 	nil
		lastCycleTime: 	12997290
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(925443328)))
		lastAlarmTime: 	12997268
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 1:38:48.167313 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(237888000)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(646300928)
		submorphs: 	an Array(a RubPrimarySelectionMorph(600952320) a RubCursor(62010880)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (593541376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(410363136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(62010880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(237888000)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(646300928)
		submorphs: 	an Array(a RubPrimarySelectionMorph(600952320) a RubCursor(62010880)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (593541376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(410363136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(62010880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(237888000)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(646300928)
		submorphs: 	an Array(a RubPrimarySelectionMorph(600952320) a RubCursor(62010880)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (593541376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(410363136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(62010880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(237888000)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(646300928)
		submorphs: 	an Array(a RubPrimarySelectionMorph(600952320) a RubCursor(62010880)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (593541376) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(410363136)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(62010880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(237888000)
	Receiver's instance variables: 
		bounds: 	(407@556.0) corner: (423@572.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(407@556) mouseOver 13609126 nil]
		targetOffset: 	(581@492)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13609126 407 556 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(407@556.0) corner: (423@572.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(407@556) mouseOver 13609126 nil]
		targetOffset: 	(581@492)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13609126 407 556 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(121336320))(a DropList...etc...
		lastStepTime: 	13611520
		lastStepMessage: 	nil
		lastCycleTime: 	13611543
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(62010880)))
		lastAlarmTime: 	13611520
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 1:40:39.904182 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(551684096)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@525)
		owner: 	a TransformWithLayoutMorph(396909056)
		submorphs: 	an Array(a RubCursor(517858048) a RubPrimarySelectionMorph(965687040...etc...
		fullBounds: 	(0@0) corner: (1395@525)
		color: 	Color transparent
		extension: 	a MorphExtension (697907200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(769789184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(517858048)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(551684096)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@525)
		owner: 	a TransformWithLayoutMorph(396909056)
		submorphs: 	an Array(a RubCursor(517858048) a RubPrimarySelectionMorph(965687040...etc...
		fullBounds: 	(0@0) corner: (1395@525)
		color: 	Color transparent
		extension: 	a MorphExtension (697907200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(769789184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(517858048)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(551684096)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@525)
		owner: 	a TransformWithLayoutMorph(396909056)
		submorphs: 	an Array(a RubCursor(517858048) a RubPrimarySelectionMorph(965687040...etc...
		fullBounds: 	(0@0) corner: (1395@525)
		color: 	Color transparent
		extension: 	a MorphExtension (697907200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(769789184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(517858048)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(551684096)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@525)
		owner: 	a TransformWithLayoutMorph(396909056)
		submorphs: 	an Array(a RubCursor(517858048) a RubPrimarySelectionMorph(965687040...etc...
		fullBounds: 	(0@0) corner: (1395@525)
		color: 	Color transparent
		extension: 	a MorphExtension (697907200) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(769789184)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(517858048)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(551684096)
	Receiver's instance variables: 
		bounds: 	(144@633.0) corner: (160@649.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@633) mouseOver 13718909 nil]
		targetOffset: 	(118@480)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13718909 144 635 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(144@633.0) corner: (160@649.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(144@633) mouseOver 13718909 nil]
		targetOffset: 	(118@480)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13718909 144 635 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	13723393
		lastStepMessage: 	nil
		lastCycleTime: 	13723415
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(517858048)))
		lastAlarmTime: 	13723393
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 1:44:00.148155 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(802057216)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(423728640)
		submorphs: 	an Array(a RubCursor(611379456) a RubPrimarySelectionMorph(977524736...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (126241280) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(554971392)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(611379456)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(802057216)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(423728640)
		submorphs: 	an Array(a RubCursor(611379456) a RubPrimarySelectionMorph(977524736...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (126241280) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(554971392)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(611379456)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(802057216)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(423728640)
		submorphs: 	an Array(a RubCursor(611379456) a RubPrimarySelectionMorph(977524736...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (126241280) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(554971392)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(611379456)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(802057216)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@544)
		owner: 	a TransformWithLayoutMorph(423728640)
		submorphs: 	an Array(a RubCursor(611379456) a RubPrimarySelectionMorph(977524736...etc...
		fullBounds: 	(0@0) corner: (1395@544)
		color: 	Color transparent
		extension: 	a MorphExtension (126241280) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(554971392)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(611379456)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(802057216)
	Receiver's instance variables: 
		bounds: 	(502@577.0) corner: (518@593.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(502@577) mouseOver 13921374 nil]
		targetOffset: 	(265@54)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13921374 502 577 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(502@577.0) corner: (518@593.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(502@577) mouseOver 13921374 nil]
		targetOffset: 	(265@54)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13921374 502 577 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(121336320))(a DropList...etc...
		lastStepTime: 	13923632
		lastStepMessage: 	nil
		lastCycleTime: 	13923654
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(611379456)))
		lastAlarmTime: 	13923632
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 1:47:42.775394 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(510188544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(913890048)
		submorphs: 	an Array(a RubPrimarySelectionMorph(17612288) a RubCursor(409975552)...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (684484352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(949944064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(409975552)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(510188544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(913890048)
		submorphs: 	an Array(a RubPrimarySelectionMorph(17612288) a RubCursor(409975552)...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (684484352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(949944064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(409975552)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(510188544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(913890048)
		submorphs: 	an Array(a RubPrimarySelectionMorph(17612288) a RubCursor(409975552)...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (684484352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(949944064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(409975552)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(510188544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@734)
		owner: 	a TransformWithLayoutMorph(913890048)
		submorphs: 	an Array(a RubPrimarySelectionMorph(17612288) a RubCursor(409975552)...etc...
		fullBounds: 	(0@0) corner: (1395@734)
		color: 	Color transparent
		extension: 	a MorphExtension (684484352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(949944064)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(409975552)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(510188544)
	Receiver's instance variables: 
		bounds: 	(181@480.0) corner: (197@496.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(181@480) mouseOver CMD 14144633 nil]
		targetOffset: 	(8@589)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14144633 181 480 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(181@480.0) corner: (197@496.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(181@480) mouseOver CMD 14144633 nil]
		targetOffset: 	(8@589)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14144633 181 480 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	14146274
		lastStepMessage: 	nil
		lastCycleTime: 	14146295
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(409975552)))
		lastAlarmTime: 	14146274
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 2:24:36.509304 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(931392768)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(913437184)
		submorphs: 	an Array(a RubCursor(165540352) a RubPrimarySelectionMorph(873697792...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (627564032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(854851584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(165540352)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(931392768)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(913437184)
		submorphs: 	an Array(a RubCursor(165540352) a RubPrimarySelectionMorph(873697792...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (627564032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(854851584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(165540352)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(931392768)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(913437184)
		submorphs: 	an Array(a RubCursor(165540352) a RubPrimarySelectionMorph(873697792...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (627564032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(854851584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(165540352)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(931392768)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(913437184)
		submorphs: 	an Array(a RubCursor(165540352) a RubPrimarySelectionMorph(873697792...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (627564032) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(854851584)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(165540352)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(931392768)
	Receiver's instance variables: 
		bounds: 	(799@ -126.0) corner: (815@ -110.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(799@ -126) mouseOver 16358892 nil]
		targetOffset: 	(133@226)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16358892 799 -126 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(799@ -126.0) corner: (815@ -110.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(799@ -126) mouseOver 16358892 nil]
		targetOffset: 	(133@226)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16358892 799 -126 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	16359980
		lastStepMessage: 	nil
		lastCycleTime: 	16360000
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(165540352)))
		lastAlarmTime: 	16359980
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

18 November 2019 2:27:01.784955 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(432241920)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(830005760)
		submorphs: 	an Array(a RubCursor(306898688) a RubPrimarySelectionMorph(867226368...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (505543680) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(929730560)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(306898688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(432241920)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(830005760)
		submorphs: 	an Array(a RubCursor(306898688) a RubPrimarySelectionMorph(867226368...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (505543680) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(929730560)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(306898688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(432241920)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(830005760)
		submorphs: 	an Array(a RubCursor(306898688) a RubPrimarySelectionMorph(867226368...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (505543680) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(929730560)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(306898688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(432241920)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(830005760)
		submorphs: 	an Array(a RubCursor(306898688) a RubPrimarySelectionMorph(867226368...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (505543680) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(929730560)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(306898688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(432241920)
	Receiver's instance variables: 
		bounds: 	(730@74.0) corner: (746@90.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@74) mouseOver 16503824 nil]
		targetOffset: 	(520@147)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16503824 730 74 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(730@74.0) corner: (746@90.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(730@74) mouseOver 16503824 nil]
		targetOffset: 	(520@147)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16503824 730 74 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(199743744) named: Pl...etc...
		lastStepTime: 	16505139
		lastStepMessage: 	nil
		lastCycleTime: 	16505164
		alarms: 	a Heap()
		lastAlarmTime: 	16505139
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-18T09:51:56.262435+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#setToEnd was sent to nil
18 November 2019 2:36:23.51918 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #setToEnd
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	setToEnd
		exception: 	MessageNotUnderstood: receiver of "setToEnd" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

SourceFile>>setToEnd
	Receiver: SourceFile(/Users/theo/opensmalltalk-vm-1/build/vmmaker/VMMaker.changes)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		path: 	'/Users/theo/opensmalltalk-vm-1/build/vmmaker/VMMaker.changes'
		stream: 	nil
		potentialLocations: 	an Array({imageDirectory} File @ .)


SourceFileArray>>forceChangesToDisk
	Receiver: a SourceFileArray
	Arguments and temporary variables: 
		changesFile: 	SourceFile(/Users/theo/opensmalltalk-vm-1/build/vmmaker/VMMaker.ch...etc...
	Receiver's instance variables: 
		files: 	an Array(SourceFile(/Users/theo/opensmalltalk-vm-1/build/vmmaker/Pharo7....etc...
		readOnlyQueue: 	SharedQueue with 2 items
		flushChanges: 	true


ChangesLog>>logChange:
	Receiver: a ChangesLog
	Arguments and temporary variables: 
		aStringOrText: 	'----QUIT----2019-11-18T14:36:22.694172+01:00 VMMaker.image prio...etc...
		aString: 	'----QUIT----2019-11-18T14:36:22.694172+01:00 VMMaker.image priorSourc...etc...
	Receiver's instance variables: 
		startupStamp: 	nil


ChangesLog>>logSnapshot:andQuit:
	Receiver: a ChangesLog
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		message: 	'----QUIT----2019-11-18T14:36:22.694172+01:00 VMMaker.image priorSourc...etc...
	Receiver's instance variables: 
		startupStamp: 	nil


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		isImageStarting: 	nil
		snapshotResult: 	nil
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	true
		wait: 	a Semaphore()
		isImageStarting: 	nil
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)


[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Receiver: [ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		outerContext: 	SessionManager>>snapshot:andQuit:
		startpc: 	135
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #setToEnd
SourceFile>>setToEnd
SourceFileArray>>forceChangesToDisk
ChangesLog>>logChange:
ChangesLog>>logSnapshot:andQuit:
SessionManager>>launchSnapshot:andQuit:
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 9:39:53.506318 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(3750400)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(759442688)
		submorphs: 	an Array(a RubPrimarySelectionMorph(923190272) a RubCursor(578288640...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (490620160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387153152)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(578288640)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(3750400)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(759442688)
		submorphs: 	an Array(a RubPrimarySelectionMorph(923190272) a RubCursor(578288640...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (490620160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387153152)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(578288640)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(3750400)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(759442688)
		submorphs: 	an Array(a RubPrimarySelectionMorph(923190272) a RubCursor(578288640...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (490620160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387153152)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(578288640)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(3750400)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(759442688)
		submorphs: 	an Array(a RubPrimarySelectionMorph(923190272) a RubCursor(578288640...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (490620160) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387153152)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(578288640)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(3750400)
	Receiver's instance variables: 
		bounds: 	(217@643.0) corner: (233@659.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(217@643) mouseOver 97225 nil]
		targetOffset: 	(383@227)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 97225 217 643 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(217@643.0) corner: (233@659.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(217@643) mouseOver 97225 nil]
		targetOffset: 	(383@227)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 97225 217 643 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1061775616))(a DropLis...etc...
		lastStepTime: 	144295
		lastStepMessage: 	nil
		lastCycleTime: 	144316
		alarms: 	a Heap()
		lastAlarmTime: 	144295
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 9:54:36.797203 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(977523712)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(992195840)
		submorphs: 	an Array(a RubCursor(756713728) a RubPrimarySelectionMorph(421460992...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (998419456) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(628183040)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(756713728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(977523712)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(992195840)
		submorphs: 	an Array(a RubCursor(756713728) a RubPrimarySelectionMorph(421460992...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (998419456) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(628183040)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(756713728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(977523712)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(992195840)
		submorphs: 	an Array(a RubCursor(756713728) a RubPrimarySelectionMorph(421460992...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (998419456) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(628183040)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(756713728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(977523712)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(992195840)
		submorphs: 	an Array(a RubCursor(756713728) a RubPrimarySelectionMorph(421460992...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (998419456) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(628183040)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(756713728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(977523712)
	Receiver's instance variables: 
		bounds: 	(691@574.0) corner: (707@590.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(683@565) mouseOver 1026781 nil]
		targetOffset: 	(298@474)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1026781 683 565 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(691@574.0) corner: (707@590.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(683@565) mouseOver 1026781 nil]
		targetOffset: 	(298@474)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1026781 683 565 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	1027634
		lastStepMessage: 	nil
		lastCycleTime: 	1027656
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(756713728)))
		lastAlarmTime: 	1027634
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 10:23:30.490676 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1017468928)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(189059328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(166462720) a RubCursor(644710400...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (520022272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(321295360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(644710400)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1017468928)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(189059328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(166462720) a RubCursor(644710400...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (520022272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(321295360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(644710400)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1017468928)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(189059328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(166462720) a RubCursor(644710400...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (520022272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(321295360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(644710400)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1017468928)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(189059328)
		submorphs: 	an Array(a RubPrimarySelectionMorph(166462720) a RubCursor(644710400...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (520022272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(321295360)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(644710400)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1017468928)
	Receiver's instance variables: 
		bounds: 	(292@471.0) corner: (308@487.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(292@471) mouseOver 2760309 nil]
		targetOffset: 	(175@93)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2760309 292 471 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(292@471.0) corner: (308@487.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(292@471) mouseOver 2760309 nil]
		targetOffset: 	(175@93)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2760309 292 471 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	2761109
		lastStepMessage: 	nil
		lastCycleTime: 	2761132
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(644710400)))
		lastAlarmTime: 	2761109
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 10:25:37.950237 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1418)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1418)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1418)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1418)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1418)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1418)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1418)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1418)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(359897344)
	Receiver's instance variables: 
		bounds: 	(618@416.0) corner: (634@432.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@416) mouseOver 2887263 nil]
		targetOffset: 	(321@950)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2887263 618 416 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(618@416.0) corner: (634@432.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(618@416) mouseOver 2887263 nil]
		targetOffset: 	(321@950)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2887263 618 416 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a ClyActivityAnimationIconMorph(272825...etc...
		lastStepTime: 	2888765
		lastStepMessage: 	nil
		lastCycleTime: 	2888786
		alarms: 	a Heap()
		lastAlarmTime: 	2888765
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 11:27:11.042998 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(386365696)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(734669824)
		submorphs: 	an Array(a RubCursor(564491520) a RubPrimarySelectionMorph(903188480...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (401692928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(639573248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(564491520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(386365696)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(734669824)
		submorphs: 	an Array(a RubCursor(564491520) a RubPrimarySelectionMorph(903188480...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (401692928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(639573248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(564491520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(386365696)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(734669824)
		submorphs: 	an Array(a RubCursor(564491520) a RubPrimarySelectionMorph(903188480...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (401692928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(639573248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(564491520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(386365696)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(734669824)
		submorphs: 	an Array(a RubCursor(564491520) a RubPrimarySelectionMorph(903188480...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (401692928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(639573248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(564491520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(386365696)
	Receiver's instance variables: 
		bounds: 	(-111@ -134.0) corner: (-95@ -118.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-111@ -134) mouseOver 6578211 nil]
		targetOffset: 	(286@127)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6578211 -111 -134 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(-111@ -134.0) corner: (-95@ -118.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-111@ -134) mouseOver 6578211 nil]
		targetOffset: 	(286@127)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 6578211 -111 -134 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	6581707
		lastStepMessage: 	nil
		lastCycleTime: 	6581730
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(564491520)))
		lastAlarmTime: 	6581707
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 11:38:10.940495 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(859824128)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(647727360)
		submorphs: 	an Array(a RubCursor(840652800) a RubPrimarySelectionMorph(9863168))...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (824773632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(762354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840652800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(859824128)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(647727360)
		submorphs: 	an Array(a RubCursor(840652800) a RubPrimarySelectionMorph(9863168))...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (824773632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(762354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840652800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(859824128)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(647727360)
		submorphs: 	an Array(a RubCursor(840652800) a RubPrimarySelectionMorph(9863168))...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (824773632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(762354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840652800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(859824128)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(647727360)
		submorphs: 	an Array(a RubCursor(840652800) a RubPrimarySelectionMorph(9863168))...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (824773632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(762354688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840652800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(859824128)
	Receiver's instance variables: 
		bounds: 	(450@534.0) corner: (466@550.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(450@534) mouseOver 7234786 nil]
		targetOffset: 	(360@93)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7234786 450 534 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(450@534.0) corner: (466@550.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(450@534) mouseOver 7234786 nil]
		targetOffset: 	(360@93)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7234786 450 534 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	7241732
		lastStepMessage: 	nil
		lastCycleTime: 	7241756
		alarms: 	a Heap()
		lastAlarmTime: 	7241732
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 12:00:56.335646 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(657010688)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(21210880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(815965184) a RubCursor(606357504...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (799226880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(11932416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(606357504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(657010688)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(21210880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(815965184) a RubCursor(606357504...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (799226880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(11932416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(606357504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(657010688)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(21210880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(815965184) a RubCursor(606357504...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (799226880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(11932416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(606357504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(657010688)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(21210880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(815965184) a RubCursor(606357504...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (799226880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(11932416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(606357504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(657010688)
	Receiver's instance variables: 
		bounds: 	(608@557.0) corner: (624@573.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(608@557) mouseOver 8605309 nil]
		targetOffset: 	(142@73)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8605309 608 557 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(608@557.0) corner: (624@573.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(608@557) mouseOver 8605309 nil]
		targetOffset: 	(142@73)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 8605309 608 557 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	8607018
		lastStepMessage: 	nil
		lastCycleTime: 	8607042
		alarms: 	a Heap()
		lastAlarmTime: 	8607018
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 1:44:18.636087 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(157719808)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(805218304)
		submorphs: 	an Array(a RubCursor(840302592) a RubPrimarySelectionMorph(965464064...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (40528128) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(936902912)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840302592)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(157719808)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(805218304)
		submorphs: 	an Array(a RubCursor(840302592) a RubPrimarySelectionMorph(965464064...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (40528128) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(936902912)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840302592)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(157719808)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(805218304)
		submorphs: 	an Array(a RubCursor(840302592) a RubPrimarySelectionMorph(965464064...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (40528128) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(936902912)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840302592)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(157719808)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(805218304)
		submorphs: 	an Array(a RubCursor(840302592) a RubPrimarySelectionMorph(965464064...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (40528128) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(936902912)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(840302592)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(157719808)
	Receiver's instance variables: 
		bounds: 	(375@594.0) corner: (391@610.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(375@594) mouseOver CMD SHIFT 14809205 nil]
		targetOffset: 	(330@36)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14809205 375 594 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(375@594.0) corner: (391@610.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(375@594) mouseOver CMD SHIFT 14809205 nil]
		targetOffset: 	(330@36)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14809205 375 594 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	14809296
		lastStepMessage: 	nil
		lastCycleTime: 	14809321
		alarms: 	a Heap()
		lastAlarmTime: 	14809296
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:43:01.596859 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(633@526.0) corner: (649@542.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(633@526) mouseOver CMD SHIFT 18332239 nil]
		targetOffset: 	(148@64)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18332239 633 526 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(633@526.0) corner: (649@542.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(633@526) mouseOver CMD SHIFT 18332239 nil]
		targetOffset: 	(148@64)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18332239 633 526 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	18332285
		lastStepMessage: 	nil
		lastCycleTime: 	18332308
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(651685120)))
		lastAlarmTime: 	18332285
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:45:09.640057 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(496@224.0) corner: (512@240.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(496@224) mouseOver 18459814 nil]
		targetOffset: 	(144@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18459814 496 224 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(496@224.0) corner: (512@240.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(496@224) mouseOver 18459814 nil]
		targetOffset: 	(144@77)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18459814 496 224 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	18460464
		lastStepMessage: 	nil
		lastCycleTime: 	18460487
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(651685120)))
		lastAlarmTime: 	18460464
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:45:21.726862 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(620@559.0) corner: (636@575.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@559) mouseOver 18470256 nil]
		targetOffset: 	(310@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18470256 620 559 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(620@559.0) corner: (636@575.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(620@559) mouseOver 18470256 nil]
		targetOffset: 	(310@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18470256 620 559 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	18472536
		lastStepMessage: 	nil
		lastCycleTime: 	18472559
		alarms: 	a Heap()
		lastAlarmTime: 	18472536
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:45:47.807052 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(22@573.0) corner: (38@589.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(22@573) mouseOver 18494962 nil]
		targetOffset: 	(227@110)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18494962 22 573 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(22@573.0) corner: (38@589.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(22@573) mouseOver 18494962 nil]
		targetOffset: 	(227@110)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18494962 22 573 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	18498615
		lastStepMessage: 	nil
		lastCycleTime: 	18498640
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(651685120)))
		lastAlarmTime: 	18498615
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:47:38.605942 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(104@572.0) corner: (120@588.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(104@572) mouseOver 18608431 nil]
		targetOffset: 	(79@95)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18608431 104 572 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(104@572.0) corner: (120@588.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(104@572) mouseOver 18608431 nil]
		targetOffset: 	(79@95)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18608431 104 572 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	18609412
		lastStepMessage: 	nil
		lastCycleTime: 	18609438
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(651685120)))
		lastAlarmTime: 	18609412
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:48:51.052934 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(576@581.0) corner: (592@597.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(568@572) mouseOver 18680832 nil]
		targetOffset: 	(109@94)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18680832 568 572 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(576@581.0) corner: (592@597.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(568@572) mouseOver 18680832 nil]
		targetOffset: 	(109@94)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18680832 568 572 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	18681862
		lastStepMessage: 	nil
		lastCycleTime: 	18681885
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(651685120)))
		lastAlarmTime: 	18681862
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:50:43.014395 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(206@ -166.0) corner: (222@ -150.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@ -166) mouseOver 18792744 nil]
		targetOffset: 	(164@92)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18792744 206 -166 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(206@ -166.0) corner: (222@ -150.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(206@ -166) mouseOver 18792744 nil]
		targetOffset: 	(164@92)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18792744 206 -166 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	18793831
		lastStepMessage: 	nil
		lastCycleTime: 	18793854
		alarms: 	a Heap()
		lastAlarmTime: 	18793831
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 2:52:54.334911 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(322060544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(142255104)
		submorphs: 	an Array(a RubCursor(651685120) a RubPrimarySelectionMorph(708433920...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (1000624384) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(733308160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(651685120)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(322060544)
	Receiver's instance variables: 
		bounds: 	(463@ -214.0) corner: (479@ -198.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(463@ -214) mouseOver 18924658 nil]
		targetOffset: 	(136@91)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18924658 463 -214 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(463@ -214.0) corner: (479@ -198.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(463@ -214) mouseOver 18924658 nil]
		targetOffset: 	(136@91)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18924658 463 -214 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	18925143
		lastStepMessage: 	nil
		lastCycleTime: 	18925168
		alarms: 	a Heap()
		lastAlarmTime: 	18925143
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 3:28:59.932186 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(247192576)
	Receiver's instance variables: 
		bounds: 	(420@663.0) corner: (436@679.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@663) mouseOver 21089338 nil]
		targetOffset: 	(27@683)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21089338 420 663 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(420@663.0) corner: (436@679.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(420@663) mouseOver 21089338 nil]
		targetOffset: 	(27@683)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21089338 420 663 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	21090745
		lastStepMessage: 	nil
		lastCycleTime: 	21090766
		alarms: 	a Heap()
		lastAlarmTime: 	21090745
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 3:30:24.032659 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(247192576)
	Receiver's instance variables: 
		bounds: 	(565@518.0) corner: (581@534.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(565@518) mouseOver 21173799 nil]
		targetOffset: 	(77@319)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21173799 565 518 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(565@518.0) corner: (581@534.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(565@518) mouseOver 21173799 nil]
		targetOffset: 	(77@319)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21173799 565 518 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	21174844
		lastStepMessage: 	nil
		lastCycleTime: 	21174864
		alarms: 	a Heap()
		lastAlarmTime: 	21174844
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 3:34:44.874598 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(247192576)
	Receiver's instance variables: 
		bounds: 	(456@532.0) corner: (472@548.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(456@532) mouseOver 21433976 nil]
		targetOffset: 	(53@316)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21433976 456 532 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(456@532.0) corner: (472@548.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(456@532) mouseOver 21433976 nil]
		targetOffset: 	(53@316)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21433976 456 532 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	21435682
		lastStepMessage: 	nil
		lastCycleTime: 	21435705
		alarms: 	a Heap()
		lastAlarmTime: 	21435682
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 3:49:04.871277 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(247192576)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(259583232)
		submorphs: 	an Array(a RubCursor(916707328) a RubPrimarySelectionMorph(370094080...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (1008428288) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(205576192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(916707328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(247192576)
	Receiver's instance variables: 
		bounds: 	(17@644.0) corner: (33@660.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@644) mouseOver 22288752 nil]
		targetOffset: 	(263@321)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22288752 17 644 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(17@644.0) corner: (33@660.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(17@644) mouseOver 22288752 nil]
		targetOffset: 	(263@321)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22288752 17 644 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	22295674
		lastStepMessage: 	nil
		lastCycleTime: 	22295699
		alarms: 	a Heap()
		lastAlarmTime: 	22295674
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 4:09:27.855774 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(62812160)
	Receiver's instance variables: 
		bounds: 	(-531@ -130.0) corner: (-515@ -114.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-531@ -130) mouseOver 23509289 nil]
		targetOffset: 	(200@456)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23509289 -531 -130 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(-531@ -130.0) corner: (-515@ -114.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(-531@ -130) mouseOver 23509289 nil]
		targetOffset: 	(200@456)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23509289 -531 -130 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	23518671
		lastStepMessage: 	nil
		lastCycleTime: 	23518693
		alarms: 	a Heap()
		lastAlarmTime: 	23518671
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 4:13:25.452151 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(62812160)
	Receiver's instance variables: 
		bounds: 	(440@702.0) corner: (456@718.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(440@702) mouseOver 23752614 nil]
		targetOffset: 	(83@550)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23752614 440 702 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(440@702.0) corner: (456@718.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(440@702) mouseOver 23752614 nil]
		targetOffset: 	(83@550)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23752614 440 702 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	23756263
		lastStepMessage: 	nil
		lastCycleTime: 	23756283
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1062691072)))
		lastAlarmTime: 	23756263
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 4:14:00.874677 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(62812160)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@582)
		owner: 	a TransformWithLayoutMorph(196835584)
		submorphs: 	an Array(a RubPrimarySelectionMorph(247741696) a RubCursor(106269107...etc...
		fullBounds: 	(0@0) corner: (1395@582)
		color: 	Color transparent
		extension: 	a MorphExtension (136897792) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20327424)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1062691072)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(62812160)
	Receiver's instance variables: 
		bounds: 	(570@308.0) corner: (586@324.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(570@308) mouseOver 23791222 nil]
		targetOffset: 	(351@549)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23791222 570 308 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(570@308.0) corner: (586@324.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(570@308) mouseOver 23791222 nil]
		targetOffset: 	(351@549)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23791222 570 308 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	23791697
		lastStepMessage: 	nil
		lastCycleTime: 	23791718
		alarms: 	a Heap()
		lastAlarmTime: 	23791697
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

20 November 2019 4:23:51.437045 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(946734080)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(1054409984)
		submorphs: 	an Array(a RubCursor(1046648832) a RubPrimarySelectionMorph(84285440...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (828360960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436764672)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1046648832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(946734080)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(1054409984)
		submorphs: 	an Array(a RubCursor(1046648832) a RubPrimarySelectionMorph(84285440...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (828360960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436764672)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1046648832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(946734080)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(1054409984)
		submorphs: 	an Array(a RubCursor(1046648832) a RubPrimarySelectionMorph(84285440...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (828360960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436764672)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1046648832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(946734080)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(1054409984)
		submorphs: 	an Array(a RubCursor(1046648832) a RubPrimarySelectionMorph(84285440...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (828360960) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436764672)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1046648832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(946734080)
	Receiver's instance variables: 
		bounds: 	(874@660.0) corner: (890@676.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(874@660) mouseOver 24381749 nil]
		targetOffset: 	(507@604)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24381749 874 660 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(874@660.0) corner: (890@676.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(874@660) mouseOver 24381749 nil]
		targetOffset: 	(507@604)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24381749 874 660 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	24382251
		lastStepMessage: 	nil
		lastCycleTime: 	24382274
		alarms: 	a Heap()
		lastAlarmTime: 	24382251
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 9:41:54.048751 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(496161024)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(302552064)
		submorphs: 	an Array(a RubCursor(286387200) a RubPrimarySelectionMorph(799890688...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (518383616) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(826078464)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(286387200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(496161024)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(302552064)
		submorphs: 	an Array(a RubCursor(286387200) a RubPrimarySelectionMorph(799890688...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (518383616) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(826078464)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(286387200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(496161024)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(302552064)
		submorphs: 	an Array(a RubCursor(286387200) a RubPrimarySelectionMorph(799890688...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (518383616) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(826078464)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(286387200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(496161024)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(302552064)
		submorphs: 	an Array(a RubCursor(286387200) a RubPrimarySelectionMorph(799890688...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (518383616) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(826078464)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(286387200)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(496161024)
	Receiver's instance variables: 
		bounds: 	(602@655.0) corner: (618@671.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(602@655) mouseOver 86663252 nil]
		targetOffset: 	(337@91)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86663252 602 655 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(602@655.0) corner: (618@671.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(602@655) mouseOver 86663252 nil]
		targetOffset: 	(337@91)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86663252 602 655 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(338479104))(a DropList...etc...
		lastStepTime: 	86664666
		lastStepMessage: 	nil
		lastCycleTime: 	86664690
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(286387200)))
		lastAlarmTime: 	86664666
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 9:48:14.411887 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(592140544)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@753)
		owner: 	a TransformWithLayoutMorph(670125056)
		submorphs: 	an Array(a RubCursor(697620736) a RubPrimarySelectionMorph(190591232...etc...
		fullBounds: 	(0@0) corner: (1395@753)
		color: 	Color transparent
		extension: 	a MorphExtension (1001782272) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(314899712)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(697620736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(592140544)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@753)
		owner: 	a TransformWithLayoutMorph(670125056)
		submorphs: 	an Array(a RubCursor(697620736) a RubPrimarySelectionMorph(190591232...etc...
		fullBounds: 	(0@0) corner: (1395@753)
		color: 	Color transparent
		extension: 	a MorphExtension (1001782272) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(314899712)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(697620736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(592140544)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@753)
		owner: 	a TransformWithLayoutMorph(670125056)
		submorphs: 	an Array(a RubCursor(697620736) a RubPrimarySelectionMorph(190591232...etc...
		fullBounds: 	(0@0) corner: (1395@753)
		color: 	Color transparent
		extension: 	a MorphExtension (1001782272) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(314899712)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(697620736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(592140544)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@753)
		owner: 	a TransformWithLayoutMorph(670125056)
		submorphs: 	an Array(a RubCursor(697620736) a RubPrimarySelectionMorph(190591232...etc...
		fullBounds: 	(0@0) corner: (1395@753)
		color: 	Color transparent
		extension: 	a MorphExtension (1001782272) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(314899712)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(697620736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(592140544)
	Receiver's instance variables: 
		bounds: 	(213@748.0) corner: (229@764.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(213@748) mouseOver 87044542 nil]
		targetOffset: 	(192@435)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87044542 213 748 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(213@748.0) corner: (229@764.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(213@748) mouseOver 87044542 nil]
		targetOffset: 	(192@435)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87044542 213 748 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a ClyActivityAnimationIconMorph(818591...etc...
		lastStepTime: 	87045235
		lastStepMessage: 	nil
		lastCycleTime: 	87045254
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(697620736)))
		lastAlarmTime: 	87045235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 9:50:34.469913 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(287718656)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(631244800)
		submorphs: 	an Array(a RubCursor(436809728) a RubPrimarySelectionMorph(573455616...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (165152768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(763207936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436809728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(287718656)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(631244800)
		submorphs: 	an Array(a RubCursor(436809728) a RubPrimarySelectionMorph(573455616...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (165152768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(763207936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436809728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(287718656)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(631244800)
		submorphs: 	an Array(a RubCursor(436809728) a RubPrimarySelectionMorph(573455616...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (165152768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(763207936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436809728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(287718656)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(631244800)
		submorphs: 	an Array(a RubCursor(436809728) a RubPrimarySelectionMorph(573455616...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (165152768) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(763207936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436809728)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(287718656)
	Receiver's instance variables: 
		bounds: 	(179@586.0) corner: (195@602.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@586) mouseOver 87173526 nil]
		targetOffset: 	(138@31)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87173526 179 586 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(179@586.0) corner: (195@602.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(179@586) mouseOver 87173526 nil]
		targetOffset: 	(138@31)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87173526 179 586 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(203686912))(a DropList...etc...
		lastStepTime: 	87185148
		lastStepMessage: 	nil
		lastCycleTime: 	87185173
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(436809728)))
		lastAlarmTime: 	87185148
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 9:51:40.278546 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1045865472)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(708404480)
		submorphs: 	an Array(a RubCursor(703418624) a RubPrimarySelectionMorph(947028992...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (642286848) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(507977728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(703418624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1045865472)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(708404480)
		submorphs: 	an Array(a RubCursor(703418624) a RubPrimarySelectionMorph(947028992...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (642286848) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(507977728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(703418624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1045865472)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(708404480)
		submorphs: 	an Array(a RubCursor(703418624) a RubPrimarySelectionMorph(947028992...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (642286848) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(507977728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(703418624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1045865472)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(708404480)
		submorphs: 	an Array(a RubCursor(703418624) a RubPrimarySelectionMorph(947028992...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (642286848) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(507977728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(703418624)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1045865472)
	Receiver's instance variables: 
		bounds: 	(469@581.0) corner: (485@597.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(469@581) mouseOver 87250355 nil]
		targetOffset: 	(117@39)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87250355 469 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(469@581.0) corner: (485@597.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(469@581) mouseOver 87250355 nil]
		targetOffset: 	(117@39)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87250355 469 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(203686912))(a DropList...etc...
		lastStepTime: 	87250955
		lastStepMessage: 	nil
		lastCycleTime: 	87250975
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(703418624)))
		lastAlarmTime: 	87250955
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 9:56:53.676113 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(111504384)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(375774464)
		submorphs: 	an Array(a RubPrimarySelectionMorph(234201088) a RubCursor(106955571...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (954976512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(968976384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1069555712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(111504384)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(375774464)
		submorphs: 	an Array(a RubPrimarySelectionMorph(234201088) a RubCursor(106955571...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (954976512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(968976384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1069555712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(111504384)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(375774464)
		submorphs: 	an Array(a RubPrimarySelectionMorph(234201088) a RubCursor(106955571...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (954976512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(968976384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1069555712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(111504384)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@487)
		owner: 	a TransformWithLayoutMorph(375774464)
		submorphs: 	an Array(a RubPrimarySelectionMorph(234201088) a RubCursor(106955571...etc...
		fullBounds: 	(0@0) corner: (1395@487)
		color: 	Color transparent
		extension: 	a MorphExtension (954976512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(968976384)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1069555712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(111504384)
	Receiver's instance variables: 
		bounds: 	(643@531.0) corner: (659@547.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(635@522) mouseOver 87563505 nil]
		targetOffset: 	(563@524)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87563505 635 522 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(643@531.0) corner: (659@547.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(635@522) mouseOver 87563505 nil]
		targetOffset: 	(563@524)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87563505 635 522 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	87564479
		lastStepMessage: 	nil
		lastCycleTime: 	87564502
		alarms: 	a Heap()
		lastAlarmTime: 	87564479
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 9:59:29.883399 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(587962624)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@829)
		owner: 	a TransformWithLayoutMorph(245042176)
		submorphs: 	an Array(a RubCursor(694563840) a RubPrimarySelectionMorph(888165632...etc...
		fullBounds: 	(0@0) corner: (1395@829)
		color: 	Color transparent
		extension: 	a MorphExtension (244166656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(625032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(694563840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(587962624)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@829)
		owner: 	a TransformWithLayoutMorph(245042176)
		submorphs: 	an Array(a RubCursor(694563840) a RubPrimarySelectionMorph(888165632...etc...
		fullBounds: 	(0@0) corner: (1395@829)
		color: 	Color transparent
		extension: 	a MorphExtension (244166656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(625032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(694563840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(587962624)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@829)
		owner: 	a TransformWithLayoutMorph(245042176)
		submorphs: 	an Array(a RubCursor(694563840) a RubPrimarySelectionMorph(888165632...etc...
		fullBounds: 	(0@0) corner: (1395@829)
		color: 	Color transparent
		extension: 	a MorphExtension (244166656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(625032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(694563840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(587962624)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@829)
		owner: 	a TransformWithLayoutMorph(245042176)
		submorphs: 	an Array(a RubCursor(694563840) a RubPrimarySelectionMorph(888165632...etc...
		fullBounds: 	(0@0) corner: (1395@829)
		color: 	Color transparent
		extension: 	a MorphExtension (244166656) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(625032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(694563840)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(587962624)
	Receiver's instance variables: 
		bounds: 	(380@621.0) corner: (396@637.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@621) mouseOver 87719375 nil]
		targetOffset: 	(315@647)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87719375 380 621 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(380@621.0) corner: (396@637.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(380@621) mouseOver 87719375 nil]
		targetOffset: 	(315@647)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 87719375 380 621 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	87720710
		lastStepMessage: 	nil
		lastCycleTime: 	87720730
		alarms: 	a Heap()
		lastAlarmTime: 	87720710
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 10:14:54.937957 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(917901312)
	Receiver's instance variables: 
		bounds: 	(161@716.0) corner: (177@732.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(161@716) mouseOver CMD SHIFT 88645736 nil]
		targetOffset: 	(164@756)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 88645736 161 716 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(161@716.0) corner: (177@732.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(161@716) mouseOver CMD SHIFT 88645736 nil]
		targetOffset: 	(164@756)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 88645736 161 716 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(203686912))(a DropList...etc...
		lastStepTime: 	88645736
		lastStepMessage: 	nil
		lastCycleTime: 	88645759
		alarms: 	a Heap()
		lastAlarmTime: 	88645736
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 10:33:04.233625 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(917901312)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(719640832)
		submorphs: 	an Array(a RubCursor(712591616) a RubPrimarySelectionMorph(448591872...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (14212096) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(378784768)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(712591616)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(917901312)
	Receiver's instance variables: 
		bounds: 	(33@739.0) corner: (49@755.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@739) mouseOver 89703676 nil]
		targetOffset: 	(5@774)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 89703676 33 739 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(33@739.0) corner: (49@755.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(33@739) mouseOver 89703676 nil]
		targetOffset: 	(5@774)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 89703676 33 739 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	89735026
		lastStepMessage: 	nil
		lastCycleTime: 	89735049
		alarms: 	a Heap()
		lastAlarmTime: 	89735026
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 10:42:43.454917 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(888726784)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11771904)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745752576) a RubCursor(76308736)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (476414976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(282970368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(76308736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(888726784)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11771904)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745752576) a RubCursor(76308736)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (476414976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(282970368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(76308736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(888726784)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11771904)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745752576) a RubCursor(76308736)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (476414976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(282970368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(76308736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(888726784)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11771904)
		submorphs: 	an Array(a RubPrimarySelectionMorph(745752576) a RubCursor(76308736)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (476414976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(282970368)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(76308736)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(888726784)
	Receiver's instance variables: 
		bounds: 	(358@681.0) corner: (374@697.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(358@681) mouseOver 90312156 nil]
		targetOffset: 	(557@545)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90312156 358 681 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(358@681.0) corner: (374@697.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(358@681) mouseOver 90312156 nil]
		targetOffset: 	(557@545)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 90312156 358 681 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	90314279
		lastStepMessage: 	nil
		lastCycleTime: 	90314305
		alarms: 	a Heap()
		lastAlarmTime: 	90314279
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 10:59:52.734097 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(156022016)
	Receiver's instance variables: 
		bounds: 	(590@675.0) corner: (606@691.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(590@675) mouseOver 91341312 nil]
		targetOffset: 	(559@471)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91341312 590 675 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(590@675.0) corner: (606@691.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(590@675) mouseOver 91341312 nil]
		targetOffset: 	(559@471)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91341312 590 675 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	91343561
		lastStepMessage: 	nil
		lastCycleTime: 	91343586
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(844820480)))
		lastAlarmTime: 	91343561
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 11:02:48.098015 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(156022016)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@601)
		owner: 	a TransformWithLayoutMorph(187715584)
		submorphs: 	an Array(a RubCursor(844820480) a RubPrimarySelectionMorph(370674688...etc...
		fullBounds: 	(0@0) corner: (1395@601)
		color: 	Color transparent
		extension: 	a MorphExtension (810744064) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(283416832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(844820480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(156022016)
	Receiver's instance variables: 
		bounds: 	(855@618.0) corner: (871@634.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(847@609) mouseOver 91518023 nil]
		targetOffset: 	(150@549)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91518023 847 609 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(855@618.0) corner: (871@634.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(847@609) mouseOver 91518023 nil]
		targetOffset: 	(150@549)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 91518023 847 609 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	91518911
		lastStepMessage: 	nil
		lastCycleTime: 	91518936
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(844820480)))
		lastAlarmTime: 	91518911
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 2:18:18.303661 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(237324288)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(833249536)
		submorphs: 	an Array(a RubCursor(396795904) a RubPrimarySelectionMorph(101310694...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (967531520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(687309824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(396795904)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(237324288)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(833249536)
		submorphs: 	an Array(a RubCursor(396795904) a RubPrimarySelectionMorph(101310694...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (967531520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(687309824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(396795904)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(237324288)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(833249536)
		submorphs: 	an Array(a RubCursor(396795904) a RubPrimarySelectionMorph(101310694...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (967531520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(687309824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(396795904)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(237324288)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(833249536)
		submorphs: 	an Array(a RubCursor(396795904) a RubPrimarySelectionMorph(101310694...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (967531520) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(687309824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(396795904)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(237324288)
	Receiver's instance variables: 
		bounds: 	(793@536.0) corner: (809@552.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(793@536) mouseOver 103248151 nil]
		targetOffset: 	(293@296)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 103248151 793 536 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(793@536.0) corner: (809@552.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(793@536) mouseOver 103248151 nil]
		targetOffset: 	(293@296)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 103248151 793 536 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	103248976
		lastStepMessage: 	nil
		lastCycleTime: 	103249001
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(396795904)))
		lastAlarmTime: 	103248976
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

21 November 2019 2:29:56.43686 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(904448)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(171898880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(885408768) a RubCursor(78300416)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (664584192) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(740045056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(78300416)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(904448)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(171898880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(885408768) a RubCursor(78300416)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (664584192) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(740045056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(78300416)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(904448)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(171898880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(885408768) a RubCursor(78300416)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (664584192) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(740045056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(78300416)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(904448)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(171898880)
		submorphs: 	an Array(a RubPrimarySelectionMorph(885408768) a RubCursor(78300416)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (664584192) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(740045056)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(78300416)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(904448)
	Receiver's instance variables: 
		bounds: 	(495@26.0) corner: (511@42.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(495@26) mouseOver 103946256 nil]
		targetOffset: 	(597@572)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 103946256 495 26 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(495@26.0) corner: (511@42.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(495@26) mouseOver 103946256 nil]
		targetOffset: 	(597@572)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 103946256 495 26 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	103947257
		lastStepMessage: 	nil
		lastCycleTime: 	103947282
		alarms: 	a Heap()
		lastAlarmTime: 	103947257
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-20T09:37:28.951214+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 November 2019 5:25:29.870861 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(234400512)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11997440)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32466688) a RubCursor(208123136)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (749232640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(852059648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(208123136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(234400512)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11997440)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32466688) a RubCursor(208123136)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (749232640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(852059648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(208123136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(234400512)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11997440)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32466688) a RubCursor(208123136)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (749232640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(852059648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(208123136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(234400512)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@506)
		owner: 	a TransformWithLayoutMorph(11997440)
		submorphs: 	an Array(a RubPrimarySelectionMorph(32466688) a RubCursor(208123136)...etc...
		fullBounds: 	(0@0) corner: (1395@506)
		color: 	Color transparent
		extension: 	a MorphExtension (749232640) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(852059648)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(208123136)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(234400512)
	Receiver's instance variables: 
		bounds: 	(360@ -1142.0) corner: (376@ -1126.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@ -1142) mouseOver 24349107 nil]
		targetOffset: 	(569@568)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24349107 360 -1142 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(360@ -1142.0) corner: (376@ -1126.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(360@ -1142) mouseOver 24349107 nil]
		targetOffset: 	(569@568)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24349107 360 -1142 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(199743744) named: Pl...etc...
		lastStepTime: 	24357699
		lastStepMessage: 	nil
		lastCycleTime: 	24357719
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(208123136)))
		lastAlarmTime: 	24357699
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 November 2019 5:26:57.954694 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(556015872)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(184473088)
		submorphs: 	an Array(a RubCursor(715909376) a RubPrimarySelectionMorph(101255116...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (214656512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547888640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(715909376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(556015872)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(184473088)
		submorphs: 	an Array(a RubCursor(715909376) a RubPrimarySelectionMorph(101255116...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (214656512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547888640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(715909376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(556015872)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(184473088)
		submorphs: 	an Array(a RubCursor(715909376) a RubPrimarySelectionMorph(101255116...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (214656512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547888640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(715909376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(556015872)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(184473088)
		submorphs: 	an Array(a RubCursor(715909376) a RubPrimarySelectionMorph(101255116...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (214656512) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(547888640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(715909376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(556015872)
	Receiver's instance variables: 
		bounds: 	(267@566.0) corner: (283@582.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(267@566) mouseOver 24440592 nil]
		targetOffset: 	(221@95)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24440592 267 566 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(267@566.0) corner: (283@582.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(267@566) mouseOver 24440592 nil]
		targetOffset: 	(221@95)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24440592 267 566 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a ClyActivityAnimationIconMorph(346972...etc...
		lastStepTime: 	24445734
		lastStepMessage: 	nil
		lastCycleTime: 	24445973
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(715909376)))
		lastAlarmTime: 	24445734
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

22 November 2019 5:35:55.004931 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(351712768)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(289095168)
		submorphs: 	an Array(a RubCursor(455096832) a RubPrimarySelectionMorph(100419148...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (373155840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(141541632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(455096832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(351712768)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(289095168)
		submorphs: 	an Array(a RubCursor(455096832) a RubPrimarySelectionMorph(100419148...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (373155840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(141541632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(455096832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(351712768)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(289095168)
		submorphs: 	an Array(a RubCursor(455096832) a RubPrimarySelectionMorph(100419148...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (373155840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(141541632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(455096832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(351712768)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(289095168)
		submorphs: 	an Array(a RubCursor(455096832) a RubPrimarySelectionMorph(100419148...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (373155840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(141541632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(455096832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(351712768)
	Receiver's instance variables: 
		bounds: 	(388@464.0) corner: (404@480.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(388@464) mouseOver 24981899 nil]
		targetOffset: 	(218@35)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24981899 388 464 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(388@464.0) corner: (404@480.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(388@464) mouseOver 24981899 nil]
		targetOffset: 	(218@35)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 24981899 388 464 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	24982879
		lastStepMessage: 	nil
		lastCycleTime: 	24982902
		alarms: 	a Heap()
		lastAlarmTime: 	24982879
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 10:33:44.167269 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(543254528) a RubPrimarySelectionMorph(452929280...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (627963136) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(543254528)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(543254528) a RubPrimarySelectionMorph(452929280...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (627963136) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(543254528)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(543254528) a RubPrimarySelectionMorph(452929280...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (627963136) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(543254528)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(543254528) a RubPrimarySelectionMorph(452929280...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (627963136) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(543254528)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(349480192)
	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	258852115
		lastStepMessage: 	nil
		lastCycleTime: 	258852140
		alarms: 	a Heap()
		lastAlarmTime: 	258852115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-22T10:39:31.752509+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 10:49:40.7679 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(349480192)
	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	258852115
		lastStepMessage: 	nil
		lastCycleTime: 	258852140
		alarms: 	a Heap()
		lastAlarmTime: 	258852115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T10:49:40.312092+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T10:49:40.312092+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T10:49:40.312092+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T10:49:40.312092+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T10:49:40.312092+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T10:49:40.312092+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 11:10:29.517534 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(349480192)
	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	258852115
		lastStepMessage: 	nil
		lastCycleTime: 	258852140
		alarms: 	a Heap()
		lastAlarmTime: 	258852115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:10:29.032009+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:10:29.032009+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:10:29.032009+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:10:29.032009+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:10:29.032009+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:10:29.032009+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 11:18:08.752367 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(349480192)
	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	258852115
		lastStepMessage: 	nil
		lastCycleTime: 	258852140
		alarms: 	a Heap()
		lastAlarmTime: 	258852115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:18:08.372492+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:18:08.372492+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:18:08.372492+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:18:08.372492+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:18:08.372492+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:18:08.372492+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 11:29:44.751138 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(349480192)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@810)
		owner: 	a TransformWithLayoutMorph(346616320)
		submorphs: 	an Array(a RubCursor(259247104) a RubPrimarySelectionMorph(996034560...etc...
		fullBounds: 	(0@0) corner: (1395@810)
		color: 	Color transparent
		extension: 	a MorphExtension (721578496) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(532439552)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(259247104)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(349480192)
	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1070@17.0) corner: (1086@33.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1070@17) mouseOver 258851280 nil]
		targetOffset: 	(161@252)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 258851280 1070 17 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	258852115
		lastStepMessage: 	nil
		lastCycleTime: 	258852140
		alarms: 	a Heap()
		lastAlarmTime: 	258852115
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 12:01:22.100445 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(649140224)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(883350528)
		submorphs: 	an Array(a RubPrimarySelectionMorph(609425920) a RubCursor(695894016...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (201943040) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(921630208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(695894016)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(649140224)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(883350528)
		submorphs: 	an Array(a RubPrimarySelectionMorph(609425920) a RubCursor(695894016...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (201943040) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(921630208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(695894016)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(649140224)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(883350528)
		submorphs: 	an Array(a RubPrimarySelectionMorph(609425920) a RubCursor(695894016...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (201943040) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(921630208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(695894016)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(649140224)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(883350528)
		submorphs: 	an Array(a RubPrimarySelectionMorph(609425920) a RubCursor(695894016...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (201943040) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(921630208)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(695894016)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(649140224)
	Receiver's instance variables: 
		bounds: 	(377@595.0) corner: (393@611.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@595) mouseOver 1896067 nil]
		targetOffset: 	(655@700)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896067 377 595 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(377@595.0) corner: (393@611.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(377@595) mouseOver 1896067 nil]
		targetOffset: 	(655@700)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 1896067 377 595 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	1897312
		lastStepMessage: 	nil
		lastCycleTime: 	1897338
		alarms: 	a Heap()
		lastAlarmTime: 	1897312
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 12:04:02.716643 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1054925312)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(508485632)
		submorphs: 	an Array(a RubCursor(1072574976) a RubPrimarySelectionMorph(84349030...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (714690560) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(207377408)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1072574976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1054925312)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(508485632)
		submorphs: 	an Array(a RubCursor(1072574976) a RubPrimarySelectionMorph(84349030...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (714690560) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(207377408)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1072574976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1054925312)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(508485632)
		submorphs: 	an Array(a RubCursor(1072574976) a RubPrimarySelectionMorph(84349030...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (714690560) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(207377408)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1072574976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1054925312)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(508485632)
		submorphs: 	an Array(a RubCursor(1072574976) a RubPrimarySelectionMorph(84349030...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (714690560) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(207377408)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1072574976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1054925312)
	Receiver's instance variables: 
		bounds: 	(151@634.0) corner: (167@650.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(151@634) mouseOver 2057355 nil]
		targetOffset: 	(92@186)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2057355 151 633 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(151@634.0) corner: (167@650.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(151@634) mouseOver 2057355 nil]
		targetOffset: 	(92@186)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 2057355 151 633 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	2058061
		lastStepMessage: 	nil
		lastCycleTime: 	2058084
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1072574976)))
		lastAlarmTime: 	2058061
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 1:38:29.381599 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(83275776)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(534135296)
		submorphs: 	an Array(a RubCursor(184608768) a RubPrimarySelectionMorph(679971840...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (422004224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(730808832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(184608768)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(83275776)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(534135296)
		submorphs: 	an Array(a RubCursor(184608768) a RubPrimarySelectionMorph(679971840...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (422004224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(730808832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(184608768)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(83275776)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(534135296)
		submorphs: 	an Array(a RubCursor(184608768) a RubPrimarySelectionMorph(679971840...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (422004224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(730808832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(184608768)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(83275776)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(534135296)
		submorphs: 	an Array(a RubCursor(184608768) a RubPrimarySelectionMorph(679971840...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (422004224) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(730808832)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(184608768)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(83275776)
	Receiver's instance variables: 
		bounds: 	(505@548.0) corner: (521@564.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(505@548) mouseOver CMD 7723246 nil]
		targetOffset: 	(263@183)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7723246 505 548 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(505@548.0) corner: (521@564.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(505@548) mouseOver CMD 7723246 nil]
		targetOffset: 	(263@183)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7723246 505 548 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	7724723
		lastStepMessage: 	nil
		lastCycleTime: 	7724745
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(184608768)))
		lastAlarmTime: 	7724723
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 1:39:52.720804 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(740147712)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(364102144)
		submorphs: 	an Array(a RubCursor(693558784) a RubPrimarySelectionMorph(95616512)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (709486080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(213843968)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693558784)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(740147712)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(364102144)
		submorphs: 	an Array(a RubCursor(693558784) a RubPrimarySelectionMorph(95616512)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (709486080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(213843968)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693558784)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(740147712)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(364102144)
		submorphs: 	an Array(a RubCursor(693558784) a RubPrimarySelectionMorph(95616512)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (709486080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(213843968)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693558784)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(740147712)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(364102144)
		submorphs: 	an Array(a RubCursor(693558784) a RubPrimarySelectionMorph(95616512)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (709486080) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(213843968)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693558784)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(740147712)
	Receiver's instance variables: 
		bounds: 	(848@475.0) corner: (864@491.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(848@475) mouseOver 7807234 nil]
		targetOffset: 	(234@37)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7807234 848 475 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(848@475.0) corner: (864@491.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(848@475) mouseOver 7807234 nil]
		targetOffset: 	(234@37)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 7807234 848 475 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	7807913
		lastStepMessage: 	nil
		lastCycleTime: 	7807935
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(693558784)))
		lastAlarmTime: 	7807913
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 2:47:36.450344 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(131102208)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(120351744)
		submorphs: 	an Array(a RubCursor(923704832) a RubPrimarySelectionMorph(98247680)...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (548357632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(896444416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(923704832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(131102208)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(120351744)
		submorphs: 	an Array(a RubCursor(923704832) a RubPrimarySelectionMorph(98247680)...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (548357632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(896444416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(923704832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(131102208)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(120351744)
		submorphs: 	an Array(a RubCursor(923704832) a RubPrimarySelectionMorph(98247680)...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (548357632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(896444416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(923704832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(131102208)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(120351744)
		submorphs: 	an Array(a RubCursor(923704832) a RubPrimarySelectionMorph(98247680)...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (548357632) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(896444416)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(923704832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(131102208)
	Receiver's instance variables: 
		bounds: 	(43@585.0) corner: (59@601.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(43@585) mouseOver 11870581 nil]
		targetOffset: 	(277@268)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 11870581 43 585 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(43@585.0) corner: (59@601.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(43@585) mouseOver 11870581 nil]
		targetOffset: 	(277@268)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 11870581 43 585 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	11871795
		lastStepMessage: 	nil
		lastCycleTime: 	11871816
		alarms: 	a Heap()
		lastAlarmTime: 	11871795
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 2:53:27.86809 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(512123904)
	Receiver's instance variables: 
		bounds: 	(562@621.0) corner: (578@637.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(562@621) mouseOver 12221625 nil]
		targetOffset: 	(536@197)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12221625 562 621 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(562@621.0) corner: (578@637.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(562@621) mouseOver 12221625 nil]
		targetOffset: 	(536@197)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12221625 562 621 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	12223234
		lastStepMessage: 	nil
		lastCycleTime: 	12223257
		alarms: 	a Heap()
		lastAlarmTime: 	12223234
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 2:54:45.853155 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(512123904)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(155758080)
		submorphs: 	an Array(a RubCursor(1070411776) a RubPrimarySelectionMorph(78589747...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (532025344) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(44021248)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1070411776)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(512123904)
	Receiver's instance variables: 
		bounds: 	(343@558.0) corner: (359@574.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@558) mouseOver 12299941 nil]
		targetOffset: 	(154@741)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12299941 209 546 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(343@558.0) corner: (359@574.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@558) mouseOver 12299941 nil]
		targetOffset: 	(154@741)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12299941 209 546 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	12301210
		lastStepMessage: 	nil
		lastCycleTime: 	12301233
		alarms: 	a Heap()
		lastAlarmTime: 	12301210
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 3:26:06.451638 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(15727616)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(197318144)
		submorphs: 	an Array(a RubCursor(54292480) a RubPrimarySelectionMorph(287348224)...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (627898368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(611831296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(54292480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(15727616)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(197318144)
		submorphs: 	an Array(a RubCursor(54292480) a RubPrimarySelectionMorph(287348224)...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (627898368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(611831296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(54292480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(15727616)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(197318144)
		submorphs: 	an Array(a RubCursor(54292480) a RubPrimarySelectionMorph(287348224)...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (627898368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(611831296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(54292480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(15727616)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(197318144)
		submorphs: 	an Array(a RubCursor(54292480) a RubPrimarySelectionMorph(287348224)...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (627898368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(611831296)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(54292480)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(15727616)
	Receiver's instance variables: 
		bounds: 	(606@526.0) corner: (622@542.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(606@526) mouseOver 14181334 nil]
		targetOffset: 	(323@168)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14181334 606 526 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(606@526.0) corner: (622@542.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(606@526) mouseOver 14181334 nil]
		targetOffset: 	(323@168)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14181334 606 526 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	14181776
		lastStepMessage: 	nil
		lastCycleTime: 	14181797
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(54292480)))
		lastAlarmTime: 	14181776
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 3:34:10.352652 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(135323136)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(194528256)
		submorphs: 	an Array(a RubCursor(759926272) a RubPrimarySelectionMorph(478334976...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (996136448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(966823936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(759926272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(135323136)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(194528256)
		submorphs: 	an Array(a RubCursor(759926272) a RubPrimarySelectionMorph(478334976...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (996136448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(966823936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(759926272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(135323136)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(194528256)
		submorphs: 	an Array(a RubCursor(759926272) a RubPrimarySelectionMorph(478334976...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (996136448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(966823936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(759926272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(135323136)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(194528256)
		submorphs: 	an Array(a RubCursor(759926272) a RubPrimarySelectionMorph(478334976...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (996136448) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(966823936)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(759926272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(135323136)
	Receiver's instance variables: 
		bounds: 	(594@466.0) corner: (610@482.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(594@466) mouseOver 14664624 nil]
		targetOffset: 	(161@740)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14664624 594 466 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(594@466.0) corner: (610@482.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(594@466) mouseOver 14664624 nil]
		targetOffset: 	(161@740)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14664624 594 466 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	14665687
		lastStepMessage: 	nil
		lastCycleTime: 	14665709
		alarms: 	a Heap()
		lastAlarmTime: 	14665687
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 3:48:29.782067 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(654055424)
	Receiver's instance variables: 
		bounds: 	(721@586.0) corner: (737@602.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(721@586) mouseOver CMD 15521335 nil]
		targetOffset: 	(590@209)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15521335 721 586 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(721@586.0) corner: (737@602.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(721@586) mouseOver CMD 15521335 nil]
		targetOffset: 	(590@209)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15521335 721 586 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	15525142
		lastStepMessage: 	nil
		lastCycleTime: 	15525164
		alarms: 	a Heap()
		lastAlarmTime: 	15525142
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 3:50:50.200284 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(654055424)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(818223616)
		submorphs: 	an Array(a RubCursor(753324032) a RubPrimarySelectionMorph(581593088...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (559396352) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(473311744)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(753324032)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(654055424)
	Receiver's instance variables: 
		bounds: 	(686@673.0) corner: (702@689.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@673) mouseOver 15663799 nil]
		targetOffset: 	(258@162)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15663799 686 673 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(686@673.0) corner: (702@689.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(686@673) mouseOver 15663799 nil]
		targetOffset: 	(258@162)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15663799 686 673 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	15665569
		lastStepMessage: 	nil
		lastCycleTime: 	15665593
		alarms: 	a Heap()
		lastAlarmTime: 	15665569
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:00:07.659551 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(171379712)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(607012352)
		submorphs: 	an Array(a RubCursor(196287488) a RubPrimarySelectionMorph(804735488...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (337869312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436067840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(196287488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(171379712)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(607012352)
		submorphs: 	an Array(a RubCursor(196287488) a RubPrimarySelectionMorph(804735488...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (337869312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436067840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(196287488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(171379712)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(607012352)
		submorphs: 	an Array(a RubCursor(196287488) a RubPrimarySelectionMorph(804735488...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (337869312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436067840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(196287488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(171379712)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(607012352)
		submorphs: 	an Array(a RubCursor(196287488) a RubPrimarySelectionMorph(804735488...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (337869312) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436067840)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(196287488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(171379712)
	Receiver's instance variables: 
		bounds: 	(662@ -182.0) corner: (678@ -166.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(662@ -182) mouseOver 16222216 nil]
		targetOffset: 	(567@485)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16222216 662 -182 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(662@ -182.0) corner: (678@ -166.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(662@ -182) mouseOver 16222216 nil]
		targetOffset: 	(567@485)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 16222216 662 -182 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	16223014
		lastStepMessage: 	nil
		lastCycleTime: 	16223037
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(196287488)))
		lastAlarmTime: 	16223014
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:20:18.667742 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(813244416)
	Receiver's instance variables: 
		bounds: 	(823@400.0) corner: (839@416.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(823@400) mouseOver 17433215 nil]
		targetOffset: 	(131@168)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17433215 823 400 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(823@400.0) corner: (839@416.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(823@400) mouseOver 17433215 nil]
		targetOffset: 	(131@168)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17433215 823 400 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	17434012
		lastStepMessage: 	nil
		lastCycleTime: 	17434034
		alarms: 	a Heap()
		lastAlarmTime: 	17434012
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:21:50.299012 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(813244416)
	Receiver's instance variables: 
		bounds: 	(440@579.0) corner: (456@595.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(440@579) mouseOver 17524936 nil]
		targetOffset: 	(69@166)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17524936 440 579 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(440@579.0) corner: (456@595.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(440@579) mouseOver 17524936 nil]
		targetOffset: 	(69@166)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17524936 440 579 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	17525647
		lastStepMessage: 	nil
		lastCycleTime: 	17525670
		alarms: 	a Heap()
		lastAlarmTime: 	17525647
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:22:31.673295 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(813244416)
	Receiver's instance variables: 
		bounds: 	(687@583.0) corner: (703@599.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(687@583) mouseOver CMD 17566767 nil]
		targetOffset: 	(141@167)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17566767 687 583 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(687@583.0) corner: (703@599.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(687@583) mouseOver CMD 17566767 nil]
		targetOffset: 	(141@167)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17566767 687 583 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	17567012
		lastStepMessage: 	nil
		lastCycleTime: 	17567034
		alarms: 	a Heap()
		lastAlarmTime: 	17567012
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:25:12.006075 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(813244416)
	Receiver's instance variables: 
		bounds: 	(352@ -169.0) corner: (368@ -153.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(352@ -169) mouseOver 17721617 nil]
		targetOffset: 	(128@170)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17721617 352 -169 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(352@ -169.0) corner: (368@ -153.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(352@ -169) mouseOver 17721617 nil]
		targetOffset: 	(128@170)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 17721617 352 -169 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	17727336
		lastStepMessage: 	nil
		lastCycleTime: 	17727359
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(331171328)))
		lastAlarmTime: 	17727336
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:34:33.142056 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(813244416)
	Receiver's instance variables: 
		bounds: 	(601@631.0) corner: (617@647.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@631) mouseOver 18284982 nil]
		targetOffset: 	(568@491)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18284982 601 631 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(601@631.0) corner: (617@647.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(601@631) mouseOver 18284982 nil]
		targetOffset: 	(568@491)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18284982 601 631 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	18288482
		lastStepMessage: 	nil
		lastCycleTime: 	18288504
		alarms: 	a Heap()
		lastAlarmTime: 	18288482
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:38:02.015915 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@620)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@620)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(813244416)
	Receiver's instance variables: 
		bounds: 	(956@ -102.0) corner: (972@ -86.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(956@ -102) mouseOver CMD 18497150 nil]
		targetOffset: 	(69@170)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18497150 956 -102 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(956@ -102.0) corner: (972@ -86.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(956@ -102) mouseOver CMD 18497150 nil]
		targetOffset: 	(69@170)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18497150 956 -102 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	18497367
		lastStepMessage: 	nil
		lastCycleTime: 	18497390
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(331171328)))
		lastAlarmTime: 	18497367
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:43:02.152716 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@715)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@715)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@715)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@715)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@715)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@715)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(813244416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@715)
		owner: 	a TransformWithLayoutMorph(539759616)
		submorphs: 	an Array(a RubCursor(331171328) a RubPrimarySelectionMorph(100909158...etc...
		fullBounds: 	(0@0) corner: (1395@715)
		color: 	Color transparent
		extension: 	a MorphExtension (797561856) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(772701696)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(331171328)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(813244416)
	Receiver's instance variables: 
		bounds: 	(927@ -33.0) corner: (943@ -17.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(927@ -33) mouseOver 18796560 nil]
		targetOffset: 	(117@170)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18796560 927 -33 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(927@ -33.0) corner: (943@ -17.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(927@ -33) mouseOver 18796560 nil]
		targetOffset: 	(117@170)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 18796560 927 -33 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	18797508
		lastStepMessage: 	nil
		lastCycleTime: 	18797529
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(331171328)))
		lastAlarmTime: 	18797508
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:50:24.361165 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(480971776)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(567952896)
		submorphs: 	an Array(a RubCursor(778615296) a RubPrimarySelectionMorph(596754944...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (844444672) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20045312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(778615296)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(480971776)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(567952896)
		submorphs: 	an Array(a RubCursor(778615296) a RubPrimarySelectionMorph(596754944...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (844444672) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20045312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(778615296)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(480971776)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(567952896)
		submorphs: 	an Array(a RubCursor(778615296) a RubPrimarySelectionMorph(596754944...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (844444672) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20045312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(778615296)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(480971776)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(567952896)
		submorphs: 	an Array(a RubCursor(778615296) a RubPrimarySelectionMorph(596754944...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (844444672) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(20045312)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(778615296)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(480971776)
	Receiver's instance variables: 
		bounds: 	(1134@109.0) corner: (1150@125.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1134@109) mouseOver 19238265 nil]
		targetOffset: 	(250@38)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19238265 1134 109 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1134@109.0) corner: (1150@125.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1134@109) mouseOver 19238265 nil]
		targetOffset: 	(250@38)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19238265 1134 109 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	19239703
		lastStepMessage: 	nil
		lastCycleTime: 	19239726
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(778615296)))
		lastAlarmTime: 	19239703
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:57:09.642541 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(55099904)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(499171840)
		submorphs: 	an Array(a RubCursor(436176384) a RubPrimarySelectionMorph(191360000...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (213211648) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(440008704)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436176384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(55099904)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(499171840)
		submorphs: 	an Array(a RubCursor(436176384) a RubPrimarySelectionMorph(191360000...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (213211648) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(440008704)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436176384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(55099904)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(499171840)
		submorphs: 	an Array(a RubCursor(436176384) a RubPrimarySelectionMorph(191360000...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (213211648) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(440008704)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436176384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(55099904)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(499171840)
		submorphs: 	an Array(a RubCursor(436176384) a RubPrimarySelectionMorph(191360000...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (213211648) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(440008704)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(436176384)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(55099904)
	Receiver's instance variables: 
		bounds: 	(827@640.0) corner: (843@656.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(827@640) mouseOver 19638827 nil]
		targetOffset: 	(605@204)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19638827 827 640 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(827@640.0) corner: (843@656.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(827@640) mouseOver 19638827 nil]
		targetOffset: 	(605@204)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19638827 827 640 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	19644994
		lastStepMessage: 	nil
		lastCycleTime: 	19645017
		alarms: 	a Heap()
		lastAlarmTime: 	19644994
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 4:57:42.658537 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1021514752)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(540950528)
		submorphs: 	an Array(a RubCursor(758527488) a RubPrimarySelectionMorph(38579200)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (934832128) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387265024)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(758527488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1021514752)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(540950528)
		submorphs: 	an Array(a RubCursor(758527488) a RubPrimarySelectionMorph(38579200)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (934832128) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387265024)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(758527488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1021514752)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(540950528)
		submorphs: 	an Array(a RubCursor(758527488) a RubPrimarySelectionMorph(38579200)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (934832128) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387265024)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(758527488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1021514752)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(540950528)
		submorphs: 	an Array(a RubCursor(758527488) a RubPrimarySelectionMorph(38579200)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (934832128) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(387265024)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(758527488)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1021514752)
	Receiver's instance variables: 
		bounds: 	(333@656.0) corner: (349@672.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(333@656) mouseOver 19674818 nil]
		targetOffset: 	(291@187)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19674818 333 656 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(333@656.0) corner: (349@672.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(333@656) mouseOver 19674818 nil]
		targetOffset: 	(291@187)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 19674818 333 656 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	19677790
		lastStepMessage: 	nil
		lastCycleTime: 	19678037
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(758527488)))
		lastAlarmTime: 	19677790
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:06:37.722595 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(970493952)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(954082304)
		submorphs: 	an Array(a RubCursor(538341376) a RubPrimarySelectionMorph(103183360...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (555435008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(4648448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(538341376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(970493952)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(954082304)
		submorphs: 	an Array(a RubCursor(538341376) a RubPrimarySelectionMorph(103183360...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (555435008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(4648448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(538341376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(970493952)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(954082304)
		submorphs: 	an Array(a RubCursor(538341376) a RubPrimarySelectionMorph(103183360...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (555435008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(4648448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(538341376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(970493952)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@658)
		owner: 	a TransformWithLayoutMorph(954082304)
		submorphs: 	an Array(a RubCursor(538341376) a RubPrimarySelectionMorph(103183360...etc...
		fullBounds: 	(0@0) corner: (1395@658)
		color: 	Color transparent
		extension: 	a MorphExtension (555435008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(4648448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(538341376)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(970493952)
	Receiver's instance variables: 
		bounds: 	(560@600.0) corner: (576@616.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(560@600) mouseOver CMD SHIFT 20212996 nil]
		targetOffset: 	(544@208)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20212996 560 600 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(560@600.0) corner: (576@616.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(560@600) mouseOver CMD SHIFT 20212996 nil]
		targetOffset: 	(544@208)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20212996 560 600 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	20213063
		lastStepMessage: 	nil
		lastCycleTime: 	20213085
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(538341376)))
		lastAlarmTime: 	20213063
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:17:45.053651 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(827413504)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(308936704)
		submorphs: 	an Array(a RubCursor(417557504) a RubPrimarySelectionMorph(69321216)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (986687488) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(761229824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417557504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(827413504)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(308936704)
		submorphs: 	an Array(a RubCursor(417557504) a RubPrimarySelectionMorph(69321216)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (986687488) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(761229824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417557504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(827413504)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(308936704)
		submorphs: 	an Array(a RubCursor(417557504) a RubPrimarySelectionMorph(69321216)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (986687488) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(761229824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417557504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(827413504)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(308936704)
		submorphs: 	an Array(a RubCursor(417557504) a RubPrimarySelectionMorph(69321216)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (986687488) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(761229824)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(417557504)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(827413504)
	Receiver's instance variables: 
		bounds: 	(622@ -180.0) corner: (638@ -164.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@ -180) mouseOver 20873792 nil]
		targetOffset: 	(197@188)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20873792 622 -180 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(622@ -180.0) corner: (638@ -164.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(622@ -180) mouseOver 20873792 nil]
		targetOffset: 	(197@188)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 20873792 622 -180 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	20880281
		lastStepMessage: 	nil
		lastCycleTime: 	20880304
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(417557504)))
		lastAlarmTime: 	20880281
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:19:52.525198 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(508466688)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(962727424)
		submorphs: 	an Array(a RubCursor(582846976) a RubPrimarySelectionMorph(40022016)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (163002880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(348034048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(582846976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(508466688)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(962727424)
		submorphs: 	an Array(a RubCursor(582846976) a RubPrimarySelectionMorph(40022016)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (163002880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(348034048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(582846976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(508466688)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(962727424)
		submorphs: 	an Array(a RubCursor(582846976) a RubPrimarySelectionMorph(40022016)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (163002880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(348034048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(582846976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(508466688)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(962727424)
		submorphs: 	an Array(a RubCursor(582846976) a RubPrimarySelectionMorph(40022016)...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (163002880) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(348034048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(582846976)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(508466688)
	Receiver's instance variables: 
		bounds: 	(571@482.0) corner: (587@498.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(571@482) mouseOver 21006581 nil]
		targetOffset: 	(545@147)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21006581 571 482 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(571@482.0) corner: (587@498.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(571@482) mouseOver 21006581 nil]
		targetOffset: 	(545@147)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21006581 571 482 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	21007887
		lastStepMessage: 	nil
		lastCycleTime: 	21007909
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(582846976)))
		lastAlarmTime: 	21007887
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:24:07.260661 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(758836736)
	Receiver's instance variables: 
		bounds: 	(486@576.0) corner: (502@592.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(486@576) mouseOver 21262003 nil]
		targetOffset: 	(172@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21262003 486 576 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(486@576.0) corner: (502@592.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(486@576) mouseOver 21262003 nil]
		targetOffset: 	(172@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21262003 486 576 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	21262610
		lastStepMessage: 	nil
		lastCycleTime: 	21262635
		alarms: 	a Heap()
		lastAlarmTime: 	21262610
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:24:10.300098 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(758836736)
	Receiver's instance variables: 
		bounds: 	(489@534.0) corner: (505@550.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(489@534) mouseOver 21264453 nil]
		targetOffset: 	(464@107)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21264453 489 534 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(489@534.0) corner: (505@550.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(489@534) mouseOver 21264453 nil]
		targetOffset: 	(464@107)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21264453 489 534 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Growl...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	21265672
		lastStepMessage: 	nil
		lastCycleTime: 	21265695
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(970087936)))
		lastAlarmTime: 	21265672
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Growl...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Growl...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:24:59.783607 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(758836736)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(941143040)
		submorphs: 	an Array(a RubCursor(970087936) a RubPrimarySelectionMorph(695559680...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (1050225664) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(500801536)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(970087936)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(758836736)
	Receiver's instance variables: 
		bounds: 	(833@240.0) corner: (849@256.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(833@240) mouseOver 21314735 nil]
		targetOffset: 	(392@108)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21314735 833 240 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(833@240.0) corner: (849@256.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(833@240) mouseOver 21314735 nil]
		targetOffset: 	(392@108)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21314735 833 240 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	21315139
		lastStepMessage: 	nil
		lastCycleTime: 	21315159
		alarms: 	a Heap()
		lastAlarmTime: 	21315139
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:27:23.167401 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@943)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@943)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(458284032)
	Receiver's instance variables: 
		bounds: 	(491@ -20.0) corner: (507@ -4.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(491@ -20) mouseOver 21456868 nil]
		targetOffset: 	(202@189)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21456868 491 -20 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(491@ -20.0) corner: (507@ -4.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(491@ -20) mouseOver 21456868 nil]
		targetOffset: 	(202@189)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 21456868 491 -20 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	21458512
		lastStepMessage: 	nil
		lastCycleTime: 	21458532
		alarms: 	a Heap()
		lastAlarmTime: 	21458512
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:45:47.817026 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(458284032)
	Receiver's instance variables: 
		bounds: 	(375@540.0) corner: (391@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(375@540) mouseOver 22559617 nil]
		targetOffset: 	(349@287)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22559617 375 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(375@540.0) corner: (391@556.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(375@540) mouseOver 22559617 nil]
		targetOffset: 	(349@287)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22559617 375 540 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	22563156
		lastStepMessage: 	nil
		lastCycleTime: 	22563179
		alarms: 	a Heap()
		lastAlarmTime: 	22563156
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:46:13.316519 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(458284032)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@886)
		owner: 	a TransformWithLayoutMorph(430159872)
		submorphs: 	an Array(a RubCursor(938027520) a RubPrimarySelectionMorph(717382144...etc...
		fullBounds: 	(0@0) corner: (1395@886)
		color: 	Color transparent
		extension: 	a MorphExtension (1072259072) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(197032448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(938027520)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(458284032)
	Receiver's instance variables: 
		bounds: 	(306@645.0) corner: (322@661.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(306@645) mouseOver 22583839 nil]
		targetOffset: 	(279@380)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22583839 306 645 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(306@645.0) corner: (322@661.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(306@645) mouseOver 22583839 nil]
		targetOffset: 	(279@380)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 22583839 306 645 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	22588701
		lastStepMessage: 	nil
		lastCycleTime: 	22588724
		alarms: 	a Heap()
		lastAlarmTime: 	22588701
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

25 November 2019 5:58:09.142891 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(236295680)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(727993344)
		submorphs: 	an Array(a RubCursor(1058409472) a RubPrimarySelectionMorph(37611724...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (227098624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(96585728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1058409472)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(236295680)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(727993344)
		submorphs: 	an Array(a RubCursor(1058409472) a RubPrimarySelectionMorph(37611724...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (227098624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(96585728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1058409472)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(236295680)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(727993344)
		submorphs: 	an Array(a RubCursor(1058409472) a RubPrimarySelectionMorph(37611724...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (227098624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(96585728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1058409472)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(236295680)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@905)
		owner: 	a TransformWithLayoutMorph(727993344)
		submorphs: 	an Array(a RubCursor(1058409472) a RubPrimarySelectionMorph(37611724...etc...
		fullBounds: 	(0@0) corner: (1395@905)
		color: 	Color transparent
		extension: 	a MorphExtension (227098624) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(96585728)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1058409472)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(236295680)
	Receiver's instance variables: 
		bounds: 	(345@513.0) corner: (361@529.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(345@513) mouseOver 23302180 nil]
		targetOffset: 	(234@377)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23302180 345 513 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(345@513.0) corner: (361@529.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(345@513) mouseOver 23302180 nil]
		targetOffset: 	(234@377)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 23302180 345 513 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	23304505
		lastStepMessage: 	nil
		lastCycleTime: 	23304528
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1058409472)))
		lastAlarmTime: 	23304505
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

26 November 2019 11:35:38.352033 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@639)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@639)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1039586304)
	Receiver's instance variables: 
		bounds: 	(342@689.0) corner: (358@705.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(342@689) mouseOver 86720578 nil]
		targetOffset: 	(316@588)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86720578 342 689 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(342@689.0) corner: (358@705.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(342@689) mouseOver 86720578 nil]
		targetOffset: 	(316@588)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86720578 342 689 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	86753466
		lastStepMessage: 	nil
		lastCycleTime: 	86753488
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(762200064)))
		lastAlarmTime: 	86753466
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

26 November 2019 11:36:55.205989 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(85435392)
	Receiver's instance variables: 
		bounds: 	(111@564.0) corner: (127@580.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(111@564) mouseOver 86829160 nil]
		targetOffset: 	(32@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86829160 111 564 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(111@564.0) corner: (127@580.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(111@564) mouseOver 86829160 nil]
		targetOffset: 	(32@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86829160 111 564 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(835592192))(a DropList...etc...
		lastStepTime: 	86830542
		lastStepMessage: 	nil
		lastCycleTime: 	86830564
		alarms: 	a Heap()
		lastAlarmTime: 	86830542
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

26 November 2019 11:36:59.259317 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(85435392)
	Receiver's instance variables: 
		bounds: 	(72@581.0) corner: (88@597.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(72@581) mouseOver 86833039 nil]
		targetOffset: 	(49@122)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86833039 72 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(72@581.0) corner: (88@597.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(72@581) mouseOver 86833039 nil]
		targetOffset: 	(49@122)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86833039 72 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	86834616
		lastStepMessage: 	nil
		lastCycleTime: 	86834636
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(288376832)))
		lastAlarmTime: 	86834616
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

26 November 2019 11:37:18.121617 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(85435392)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(320352256)
		submorphs: 	an Array(a RubCursor(288376832) a RubPrimarySelectionMorph(953101312...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (696985088) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(422625792)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(288376832)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(85435392)
	Receiver's instance variables: 
		bounds: 	(571@541.0) corner: (587@557.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(571@541) mouseOver 86853101 nil]
		targetOffset: 	(666@79)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86853101 571 541 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(571@541.0) corner: (587@557.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(571@541) mouseOver 86853101 nil]
		targetOffset: 	(666@79)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86853101 571 541 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	86853478
		lastStepMessage: 	nil
		lastCycleTime: 	86853500
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(288376832)))
		lastAlarmTime: 	86853478
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

26 November 2019 11:38:47.472155 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@677)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@677)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@677)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@677)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@677)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@677)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1039586304)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@677)
		owner: 	a TransformWithLayoutMorph(400588800)
		submorphs: 	an Array(a RubCursor(762200064) a RubPrimarySelectionMorph(560280064...etc...
		fullBounds: 	(0@0) corner: (1395@677)
		color: 	Color transparent
		extension: 	a MorphExtension (985518592) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(338489856)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(762200064)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1039586304)
	Receiver's instance variables: 
		bounds: 	(621@ -168.0) corner: (637@ -152.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@ -168) mouseOver 86938405 nil]
		targetOffset: 	(288@55)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86938405 621 -168 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(621@ -168.0) corner: (637@ -152.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(621@ -168) mouseOver 86938405 nil]
		targetOffset: 	(288@55)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 86938405 621 -168 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a SpecDropListMorph(992900096))(a Spec...etc...
		lastStepTime: 	86942816
		lastStepMessage: 	nil
		lastCycleTime: 	86942837
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(762200064)))
		lastAlarmTime: 	86942816
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
3 December 2019 10:08:56.955429 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(579182592)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(201271808)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (659542528)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(579182592)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(201271808)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		each: 	a ClyMethodCodeEditorToolMorph(201271808)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(201271808))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(201271808) nil nil nil nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(201271808))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>itemsChangedIn:
	Receiver: a ClyQueryViewMorph(452259840)
	Arguments and temporary variables: 
		aDataSource: 	a ClyCollapsedDataSource
		selectionWasEmpty: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(173191680)
		submorphs: 	an Array(a FTTableMorph(581175296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1058106368)
		table: 	a FTTableMorph(581175296)
		browser: 	a ClyQueryBrowser(579182592)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyCollapsedDataSource(ClyDataSource)>>runUpdate
	Receiver: a ClyCollapsedDataSource
	Arguments and temporary variables: 

	Receiver's instance variables: 
		table: 	a FTTableMorph(581175296)
		query: 	a ClyAsyncQuery(methods sources with 'myCurrentThread', class comments w...etc...
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(methods sources with 'myCur...etc...
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(452259840)
		dirty: 	false
		expandedItems: 	a SortedCollection()


[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
	Receiver: a ClyDataSourceUpdateScheduler
	Arguments and temporary variables: 
		dataSources: 	an OrderedCollection(a ClyCollapsedDataSource)
		each: 	a ClyCollapsedDataSource
	Receiver's instance variables: 
		updateQueue: 	AtomicSharedQueue with 0 items
		process: 	a Process in AtomicSharedQueue>>waitForNewItems


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyCollapsedDataSource)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each runUpdate ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyCollapsedDataSource nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
3 December 2019 10:12:04.016868 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(201271808)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (659542528)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(579182592)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(201271808)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(201271808)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState class(ClyBrowserState class)>>of:
	Receiver: ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		superclass: 	ClyBrowserState
		methodDict: 	a MethodDictionary(#activeScope->ClyQueryBrowserState>>#activeScope...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyQueryBrowserState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemTools-QueryBrowser-UI'


ClyQueryBrowser>>snapshotState
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 
		navigationFailed: 	false
		aBlock: 	[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTool...etc...
		state: 	nil
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 
		newTools: 	nil
		aQueryView: 	a ClyQueryViewMorph(452259840)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(452259840)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(173191680)
		submorphs: 	an Array(a FTTableMorph(581175296))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (1058106368)
		table: 	a FTTableMorph(581175296)
		browser: 	a ClyQueryBrowser(579182592)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(452259840)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(173191680)
		submorphs: 	an Array(a FTTableMorph(581175296))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (1058106368)
		table: 	a FTTableMorph(581175296)
		browser: 	a ClyQueryBrowser(579182592)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(452259840)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(452259840)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(452259840)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(452259840)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
ClyQueryBrowserState>>retrieveStateFrom:
ClyQueryBrowserState class(ClyBrowserState class)>>of:
ClyQueryBrowser>>snapshotState
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
3 December 2019 2:08:10.197304 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(201271808)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (659542528)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(579182592)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(201271808)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(201271808)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>desiredSelection:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		toolClasses: 	an OrderedCollection(ClyMethodCodeEditorToolMorph)
		currentSelection: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTools := OrderedCollection new.
		tabManager
			buildToolsOn: newTools
			for: aQueryView createSelectionContext.
		tabManager desiredSelection: (newTools collect: #class) ] ] in ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 
		aQueryView: 	a ClyQueryViewMorph(452259840)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(797630464))
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(797630464))
		aQueryView: 	a ClyQueryViewMorph(452259840)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(452259840)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(173191680)
		submorphs: 	an Array(a FTTableMorph(581175296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1058106368)
		table: 	a FTTableMorph(581175296)
		browser: 	a ClyQueryBrowser(579182592)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(declareCVarsIn:)
		desiredSelection: 	a ClyDesiredSelection(declareCVarsIn:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(452259840)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(173191680)
		submorphs: 	an Array(a FTTableMorph(581175296))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (1058106368)
		table: 	a FTTableMorph(581175296)
		browser: 	a ClyQueryBrowser(579182592)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(declareCVarsIn:)
		desiredSelection: 	a ClyDesiredSelection(declareCVarsIn:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(452259840)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(452259840)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(452259840)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(452259840)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(452259840))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyTabManager>>desiredSelection:
[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTools := OrderedCollection new.
		tabManager
			buildToolsOn: newTools
			for: aQueryView createSelectionContext.
		tabManager desiredSelection: (newTools collect: #class) ] ] in ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
3 December 2019 2:08:11.400485 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(201271808)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (659542528)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(579182592)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(201271808)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(201271808)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(201271808))
		tabMorph: 	a TabManagerMorph(351694336)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState class(ClyBrowserState class)>>of:
	Receiver: ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		superclass: 	ClyBrowserState
		methodDict: 	a MethodDictionary(#activeScope->ClyQueryBrowserState>>#activeScope...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyQueryBrowserState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemTools-QueryBrowser-UI'


ClyQueryBrowser>>snapshotState
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyAccrossWindowNavigationState>>retrieveStateFrom:
	Receiver: a ClyAccrossWindowNavigationState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		windowGroup: 	nil
		window: 	nil
		browserState: 	nil
		browserPlugins: 	nil
		navigationEnvironment: 	nil
		navigationHistory: 	nil


ClyAccrossWindowNavigationState class>>from:
	Receiver: ClyAccrossWindowNavigationState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#applyTo:byUndo:->ClyAccrossWindowNavigationStat...etc...
		format: 	65542
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyAccrossWindowNavigationState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-Browser-NavigationHistory'


ClyFullBrowser(ClyBrowserMorph)>>wasSpawnedFrom:
	Receiver: a ClyFullBrowser(573947904)
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(579182592)
	Receiver's instance variables: 
		bounds: 	(65.0@106.0) corner: (915.0@726.0)
		owner: 	a SystemWindow(241796608) named: StackInterpreter class>>declareCVarsIn:...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(840293376) a PanelMorph(9588387...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (489912832) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(958838784)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(513198592) a ClyQuery...etc...
		toolPanel: 	a PanelMorph(1038170112)
		toolbar: 	a ClyToolbarMorph(220969984)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	false
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		packageView: 	a ClyQueryViewMorph(513198592)
		classView: 	a ClyQueryViewMorph(847058432)
		methodGroupView: 	a ClyQueryViewMorph(842501632)
		methodView: 	a ClyQueryViewMorph(495260672)
		metaLevelScope: 	ClyClassSideScope
		methodGroupQuery: 	a ClyAllMethodGroupsQuery from class side: StackInterpreter


ClyQueryBrowser(ClyBrowserMorph)>>spawnBrowser:withState:
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 
		aBrowserClass: 	ClyFullBrowser
		navigationBlock: 	[ :browser | self navigateSpawnedFullBrowser: browser ]
		browser: 	a ClyFullBrowser(573947904)
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>spawnFullBrowser
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>spawnFullBrowser
	Receiver: a ClyQueryBrowser(579182592)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(310265856) named: Loading: methods sources with 'myCurren...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(600096768) a PanelMorph(1731916...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (992760320) [locked]  [sticky]  [other:  (announcer...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(173191680)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(452259840))
		toolPanel: 	a PanelMorph(113296384)
		toolbar: 	a ClyToolbarMorph(431836672)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(452259840)
		systemQuery: 	a ClyUnionQuery(methods sources with 'myCurrentThread', class comm...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClySpawnFullBrowserCommand>>execute
	Receiver: a ClySpawnFullBrowserCommand
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(579182592)


ClyQueryBrowserContext(ClySystemBrowserContext)>>executeCommand:by:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommand: 	a ClySpawnFullBrowserCommand
		aCommandActivator: 	a CmdCommandActivator(a ClySpawnFullBrowserCommand)
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(579182592)
		selectedItems: 	an Array(a ClyDataSourceItem(declareCVarsIn:))


[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClySpawnFullBrowserCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClySpawnFullBrowserCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a CmdContextMenuActivation(ClyQueryMenuGroup; 1000)


BlockClosure>>on:do:
	Receiver: [ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCom...etc...
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :exc | self processCommandFailure: exc ]
	Receiver's instance variables: 
		outerContext: 	CmdCommandActivator>>executeCommand
		startpc: 	77
		numArgs: 	0


CmdCommandActivator>>executeCommand
	Receiver: a CmdCommandActivator(a ClySpawnFullBrowserCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClySpawnFullBrowserCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a CmdContextMenuActivation(ClyQueryMenuGroup; 1000)


[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(495500800)'Browse'
	Arguments and temporary variables: 
		evt: 	[(123@102) mouseUp 163836009 nil]
		w: 	a WorldMorph(479349760) [world]
		selArgCount: 	0
	Receiver's instance variables: 
		bounds: 	(111.0@98.0) corner: (287.0@116.0)
		owner: 	a MenuMorph(481648640)
		submorphs: 	#()
		fullBounds: 	(111.0@98.0) corner: (287.0@116.0)
		color: 	Color black
		extension: 	a MorphExtension (44550656)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a ClySpawnFullBrowserCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	'b'
		getStateSelector: 	nil
		enablementSelector: 	nil


BlockClosure>>ensure:
	Receiver: [ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := select...etc...
	Arguments and temporary variables: 
		aBlock: 	[ oldcursor show ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	230
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2r100000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[ | selArgCount |
"show cursor in case item opens a new MVC window"
(se...etc...
		oldcursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0
		2...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	(-1@ -1)
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(495500800)'Browse'
	Arguments and temporary variables: 
		evt: 	[(123@102) mouseUp 163836009 nil]
		w: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		bounds: 	(111.0@98.0) corner: (287.0@116.0)
		owner: 	a MenuMorph(481648640)
		submorphs: 	#()
		fullBounds: 	(111.0@98.0) corner: (287.0@116.0)
		color: 	Color black
		extension: 	a MorphExtension (44550656)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a ClySpawnFullBrowserCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	'b'
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(495500800)'Browse'
	Arguments and temporary variables: 
		evt: 	[(123@102) mouseUp 163836009 nil]
	Receiver's instance variables: 
		bounds: 	(111.0@98.0) corner: (287.0@116.0)
		owner: 	a MenuMorph(481648640)
		submorphs: 	#()
		fullBounds: 	(111.0@98.0) corner: (287.0@116.0)
		color: 	Color black
		extension: 	a MorphExtension (44550656)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a ClySpawnFullBrowserCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	'b'
		getStateSelector: 	nil
		enablementSelector: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(495500800)'Browse'
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
	Receiver's instance variables: 
		bounds: 	(111.0@98.0) corner: (287.0@116.0)
		owner: 	a MenuMorph(481648640)
		submorphs: 	#()
		fullBounds: 	(111.0@98.0) corner: (287.0@116.0)
		color: 	Color black
		extension: 	a MorphExtension (44550656)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a ClySpawnFullBrowserCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	'b'
		getStateSelector: 	nil
		enablementSelector: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [(123@102) mouseUp 163836009 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(495500800)'Browse'
	Receiver's instance variables: 
		timeStamp: 	163836009
		source: 	a HandMorph(1030685184)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(123@102)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(495500800)'Browse'
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
	Receiver's instance variables: 
		bounds: 	(111.0@98.0) corner: (287.0@116.0)
		owner: 	a MenuMorph(481648640)
		submorphs: 	#()
		fullBounds: 	(111.0@98.0) corner: (287.0@116.0)
		color: 	Color black
		extension: 	a MorphExtension (44550656)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a ClySpawnFullBrowserCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	'b'
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
		aMorph: 	a ToggleMenuItemMorph(495500800)'Browse'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(495500800)'Browse'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(495500800)'Browse'


MouseButtonEvent>>sentTo:
	Receiver: [(123@102) mouseUp 163836009 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	163836009
		source: 	a HandMorph(1030685184)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(123@102)
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
		aMorph: 	a ToggleMenuItemMorph(495500800)'Browse'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(495500800)'Browse'


BlockClosure>>ensure:
	Receiver: [ ^ anEvent sentTo: self ]
	Arguments and temporary variables: 
		aBlock: 	[ morph := nil ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MorphicEventDispatcher>>dispatchEvent:with:
		startpc: 	48
		numArgs: 	0


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
		aMorph: 	a ToggleMenuItemMorph(495500800)'Browse'
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(495500800)'Browse'


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(495500800)'Browse'
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	(111.0@98.0) corner: (287.0@116.0)
		owner: 	a MenuMorph(481648640)
		submorphs: 	#()
		fullBounds: 	(111.0@98.0) corner: (287.0@116.0)
		color: 	Color black
		extension: 	a MorphExtension (44550656)
		font: 	a LogicalFont
 familyName: 'Source Sans Pro'
 emphasis: nil
 pointSize: 1...etc...
		emphasis: 	0
		contents: 	'Browse'
		hasFocus: 	false
		backgroundColor: 	Color transparent
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	a CmdCommandActivator(a ClySpawnFullBrowserCommand)
		selector: 	#executeCommand
		arguments: 	#()
		icon: 	Form(16x16x32)
		keyText: 	'b'
		getStateSelector: 	nil
		enablementSelector: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
		aMorph: 	a MenuMorph(481648640)
		localEvt: 	[(123@102) mouseUp 163836009 nil]
		index: 	1
		child: 	a ToggleMenuItemMorph(495500800)'Browse'
		morphs: 	an Array(a ToggleMenuItemMorph(495500800)'Browse' a ToggleMenuItemMorph...etc...
		inside: 	false
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(495500800)'Browse'


MorphicEventDispatcher>>handleMouseUp:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(495500800)'Browse'


MouseButtonEvent>>sentTo:
	Receiver: [(123@102) mouseUp 163836009 nil]
	Arguments and temporary variables: 
		anObject: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		timeStamp: 	163836009
		source: 	a HandMorph(1030685184)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	(123@102)
		handler: 	nil
		wasHandled: 	false
		whichButton: 	4


[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[(123@102) mouseUp 163836009 nil]
		aMorph: 	a MenuMorph(481648640)
	Receiver's instance variables: 
		morph: 	a ToggleMenuItemMorph(495500800)'Browse'



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
ClyQueryBrowserState>>retrieveStateFrom:
ClyQueryBrowserState class(ClyBrowserState class)>>of:
ClyQueryBrowser>>snapshotState
ClyAccrossWindowNavigationState>>retrieveStateFrom:
ClyAccrossWindowNavigationState class>>from:
ClyFullBrowser(ClyBrowserMorph)>>wasSpawnedFrom:
ClyQueryBrowser(ClyBrowserMorph)>>spawnBrowser:withState:
ClyQueryBrowser(ClyBrowserMorph)>>spawnFullBrowser
ClyQueryBrowser>>spawnFullBrowser
ClySpawnFullBrowserCommand>>execute
ClyQueryBrowserContext(ClySystemBrowserContext)>>executeCommand:by:
[ self prepareCommandForExecution.
context executeCommand: command by: self.
self applyCommandResult ] in CmdCommandActivator>>executeCommand
BlockClosure>>on:do:
CmdCommandActivator>>executeCommand
[ | selArgCount |
"show cursor in case item opens a new MVC window"
(selArgCount := selector numArgs) = 0
	ifTrue: [ target perform: selector ]
	ifFalse: [ selArgCount = arguments size
			ifTrue: [ target perform: selector withArguments: arguments ]
			ifFalse: [ target perform: selector withArguments: (arguments copyWith: evt) ] ].
self showShortcut.
self changed ] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>handleMouseUp:
MouseButtonEvent>>sentTo:
[ ^ anEvent sentTo: self ] in MorphicEventDispatcher>>dispatchEvent:with:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
BlockClosure>>ensure:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 3:14:26.637884 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(1000252416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@848)
		owner: 	a TransformWithLayoutMorph(744123904)
		submorphs: 	an Array(a RubCursor(342721536) a RubPrimarySelectionMorph(172381696...etc...
		fullBounds: 	(0@0) corner: (1395@848)
		color: 	Color transparent
		extension: 	a MorphExtension (55061504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(619968000)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(342721536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(1000252416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@848)
		owner: 	a TransformWithLayoutMorph(744123904)
		submorphs: 	an Array(a RubCursor(342721536) a RubPrimarySelectionMorph(172381696...etc...
		fullBounds: 	(0@0) corner: (1395@848)
		color: 	Color transparent
		extension: 	a MorphExtension (55061504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(619968000)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(342721536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1000252416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@848)
		owner: 	a TransformWithLayoutMorph(744123904)
		submorphs: 	an Array(a RubCursor(342721536) a RubPrimarySelectionMorph(172381696...etc...
		fullBounds: 	(0@0) corner: (1395@848)
		color: 	Color transparent
		extension: 	a MorphExtension (55061504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(619968000)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(342721536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(1000252416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@848)
		owner: 	a TransformWithLayoutMorph(744123904)
		submorphs: 	an Array(a RubCursor(342721536) a RubPrimarySelectionMorph(172381696...etc...
		fullBounds: 	(0@0) corner: (1395@848)
		color: 	Color transparent
		extension: 	a MorphExtension (55061504) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(619968000)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(342721536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(1000252416)
	Receiver's instance variables: 
		bounds: 	(294@ -169.0) corner: (310@ -153.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(294@ -169) mouseOver 167803056 nil]
		targetOffset: 	(233@584)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 167803056 294 -169 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(294@ -169.0) corner: (310@ -153.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(294@ -169) mouseOver 167803056 nil]
		targetOffset: 	(233@584)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 167803056 294 -169 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892411392))(a DropList...etc...
		lastStepTime: 	167810712
		lastStepMessage: 	nil
		lastCycleTime: 	167810733
		alarms: 	a Heap()
		lastAlarmTime: 	167810712
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 3:26:06.048359 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(256998400)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@164)
		owner: 	a TransformWithLayoutMorph(786257408)
		submorphs: 	an Array(a RubCursor(348499968) a RubPrimarySelectionMorph(852415488...etc...
		fullBounds: 	(0@0) corner: (1408@164)
		color: 	Color transparent
		extension: 	a MorphExtension (684228608) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(88165888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348499968)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(256998400)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@164)
		owner: 	a TransformWithLayoutMorph(786257408)
		submorphs: 	an Array(a RubCursor(348499968) a RubPrimarySelectionMorph(852415488...etc...
		fullBounds: 	(0@0) corner: (1408@164)
		color: 	Color transparent
		extension: 	a MorphExtension (684228608) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(88165888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348499968)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(256998400)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@164)
		owner: 	a TransformWithLayoutMorph(786257408)
		submorphs: 	an Array(a RubCursor(348499968) a RubPrimarySelectionMorph(852415488...etc...
		fullBounds: 	(0@0) corner: (1408@164)
		color: 	Color transparent
		extension: 	a MorphExtension (684228608) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(88165888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348499968)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(256998400)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@164)
		owner: 	a TransformWithLayoutMorph(786257408)
		submorphs: 	an Array(a RubCursor(348499968) a RubPrimarySelectionMorph(852415488...etc...
		fullBounds: 	(0@0) corner: (1408@164)
		color: 	Color transparent
		extension: 	a MorphExtension (684228608) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(88165888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348499968)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(256998400)
	Receiver's instance variables: 
		bounds: 	(134@ -1412.0) corner: (150@ -1396.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@ -1412) mouseOver 168488822 nil]
		targetOffset: 	(212@112)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168488822 134 -1412 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(134@ -1412.0) corner: (150@ -1396.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(134@ -1412) mouseOver 168488822 nil]
		targetOffset: 	(212@112)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168488822 134 -1412 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	168510394
		lastStepMessage: 	nil
		lastCycleTime: 	168510416
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(348499968)))
		lastAlarmTime: 	168510394
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 3:31:09.743274 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(834954752)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(353156608)
		submorphs: 	an Array(a RubCursor(388168704) a RubPrimarySelectionMorph(104152780...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (567370240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(935814144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(388168704)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(834954752)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(353156608)
		submorphs: 	an Array(a RubCursor(388168704) a RubPrimarySelectionMorph(104152780...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (567370240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(935814144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(388168704)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(834954752)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(353156608)
		submorphs: 	an Array(a RubCursor(388168704) a RubPrimarySelectionMorph(104152780...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (567370240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(935814144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(388168704)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(834954752)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(353156608)
		submorphs: 	an Array(a RubCursor(388168704) a RubPrimarySelectionMorph(104152780...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (567370240) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(935814144)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(388168704)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(834954752)
	Receiver's instance variables: 
		bounds: 	(591@555.0) corner: (607@571.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@555) mouseOver CMD 168813233 nil]
		targetOffset: 	(202@148)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168813233 591 555 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(591@555.0) corner: (607@571.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(591@555) mouseOver CMD 168813233 nil]
		targetOffset: 	(202@148)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 168813233 591 555 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892411392))(a DropList...etc...
		lastStepTime: 	168813989
		lastStepMessage: 	nil
		lastCycleTime: 	168814012
		alarms: 	a Heap()
		lastAlarmTime: 	168813989
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 3:43:51.910218 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(834281472)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(848499712)
		submorphs: 	an Array(a RubCursor(769695232) a RubPrimarySelectionMorph(364132352...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (900548096) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(373259776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(769695232)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(834281472)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(848499712)
		submorphs: 	an Array(a RubCursor(769695232) a RubPrimarySelectionMorph(364132352...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (900548096) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(373259776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(769695232)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(834281472)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(848499712)
		submorphs: 	an Array(a RubCursor(769695232) a RubPrimarySelectionMorph(364132352...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (900548096) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(373259776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(769695232)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(834281472)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@202)
		owner: 	a TransformWithLayoutMorph(848499712)
		submorphs: 	an Array(a RubCursor(769695232) a RubPrimarySelectionMorph(364132352...etc...
		fullBounds: 	(0@0) corner: (1408@202)
		color: 	Color transparent
		extension: 	a MorphExtension (900548096) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(373259776)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(769695232)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(834281472)
	Receiver's instance variables: 
		bounds: 	(608@503.0) corner: (624@519.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(608@503) mouseOver CMD 169575970 nil]
		targetOffset: 	(206@34)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 169575970 608 503 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(608@503.0) corner: (624@519.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(608@503) mouseOver CMD 169575970 nil]
		targetOffset: 	(206@34)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 169575970 608 503 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	169576189
		lastStepMessage: 	nil
		lastCycleTime: 	169576209
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(769695232)))
		lastAlarmTime: 	169576189
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 3:51:31.293934 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1532)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1532)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(858456064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1532)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1532)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(858456064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1532)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1532)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(858456064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1532)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1532)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(858456064))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(359897344)
	Receiver's instance variables: 
		bounds: 	(868@493.0) corner: (884@509.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(868@493) mouseOver 170034527 nil]
		targetOffset: 	(398@1084)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 170034527 868 493 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(868@493.0) corner: (884@509.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(868@493) mouseOver 170034527 nil]
		targetOffset: 	(398@1084)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 170034527 868 493 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(892411392))(a DropList...etc...
		lastStepTime: 	170035691
		lastStepMessage: 	nil
		lastCycleTime: 	170035716
		alarms: 	a Heap()
		lastAlarmTime: 	170035691
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 3:53:18.999481 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1513)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1513)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(199557632))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1513)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1513)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(199557632))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1513)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1513)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(199557632))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(359897344)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@1513)
		owner: 	a TransformWithLayoutMorph(410192896)
		submorphs: 	an Array(a RubCursor(106809344) a RubPrimarySelectionMorph(142804224...etc...
		fullBounds: 	(0@0) corner: (1395@1513)
		color: 	Color transparent
		extension: 	a MorphExtension (300843008) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(690568448)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(106809344)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(199557632))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(359897344)
	Receiver's instance variables: 
		bounds: 	(1145@550.0) corner: (1161@566.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1145@550) mouseOver CMD 170143129 nil]
		targetOffset: 	(482@1058)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 170143129 1145 550 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1145@550.0) corner: (1161@566.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1145@550) mouseOver CMD 170143129 nil]
		targetOffset: 	(482@1058)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 170143129 1145 550 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(564585984))(a DropList...etc...
		lastStepTime: 	170143394
		lastStepMessage: 	nil
		lastCycleTime: 	170143415
		alarms: 	a Heap()
		lastAlarmTime: 	170143394
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 5:09:23.460133 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(490469376)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6719)
		owner: 	a TransformWithLayoutMorph(203357184)
		submorphs: 	an Array(a RubCursor(1020208128) a RubPrimarySelectionMorph(61645260...etc...
		fullBounds: 	(0@0) corner: (1395@6719)
		color: 	Color transparent
		extension: 	a MorphExtension (885320704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(107730432)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1020208128)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(490469376)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6719)
		owner: 	a TransformWithLayoutMorph(203357184)
		submorphs: 	an Array(a RubCursor(1020208128) a RubPrimarySelectionMorph(61645260...etc...
		fullBounds: 	(0@0) corner: (1395@6719)
		color: 	Color transparent
		extension: 	a MorphExtension (885320704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(107730432)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1020208128)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(490469376)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6719)
		owner: 	a TransformWithLayoutMorph(203357184)
		submorphs: 	an Array(a RubCursor(1020208128) a RubPrimarySelectionMorph(61645260...etc...
		fullBounds: 	(0@0) corner: (1395@6719)
		color: 	Color transparent
		extension: 	a MorphExtension (885320704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(107730432)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1020208128)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(490469376)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@6719)
		owner: 	a TransformWithLayoutMorph(203357184)
		submorphs: 	an Array(a RubCursor(1020208128) a RubPrimarySelectionMorph(61645260...etc...
		fullBounds: 	(0@0) corner: (1395@6719)
		color: 	Color transparent
		extension: 	a MorphExtension (885320704) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(107730432)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1020208128)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(490469376)
	Receiver's instance variables: 
		bounds: 	(499@541.0) corner: (515@557.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(499@541) mouseOver 174706060 nil]
		targetOffset: 	(219@3724)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 174706060 499 541 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(499@541.0) corner: (515@557.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(499@541) mouseOver 174706060 nil]
		targetOffset: 	(219@3724)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 174706060 499 541 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1013046784))(a DropLis...etc...
		lastStepTime: 	174707465
		lastStepMessage: 	nil
		lastCycleTime: 	174707485
		alarms: 	a Heap()
		lastAlarmTime: 	174707465
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

3 December 2019 5:13:10.003598 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(589955584)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(455262208)
		submorphs: 	an Array(a RubCursor(1028230144) a RubPrimarySelectionMorph(66365235...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1052518912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(108229632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1028230144)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(589955584)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(455262208)
		submorphs: 	an Array(a RubCursor(1028230144) a RubPrimarySelectionMorph(66365235...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1052518912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(108229632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1028230144)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(589955584)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(455262208)
		submorphs: 	an Array(a RubCursor(1028230144) a RubPrimarySelectionMorph(66365235...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1052518912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(108229632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1028230144)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(589955584)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(455262208)
		submorphs: 	an Array(a RubCursor(1028230144) a RubPrimarySelectionMorph(66365235...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1052518912) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(108229632)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1028230144)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(589955584)
	Receiver's instance variables: 
		bounds: 	(774@466.0) corner: (790@482.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@466) mouseOver 174932593 nil]
		targetOffset: 	(748@36)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 174932593 774 466 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(774@466.0) corner: (790@482.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(774@466) mouseOver 174932593 nil]
		targetOffset: 	(748@36)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 174932593 774 466 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a GLMSystemWindow(199743744) named: Pl...etc...
		lastStepTime: 	174934235
		lastStepMessage: 	nil
		lastCycleTime: 	174934257
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1028230144)))
		lastAlarmTime: 	174934235
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 9:42:28.101424 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(937170432)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(308399104)
		submorphs: 	an Array(a RubCursor(36862464) a RubPrimarySelectionMorph(774648320)...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (395235840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312494080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(36862464)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(937170432)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(308399104)
		submorphs: 	an Array(a RubCursor(36862464) a RubPrimarySelectionMorph(774648320)...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (395235840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312494080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(36862464)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(937170432)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(308399104)
		submorphs: 	an Array(a RubCursor(36862464) a RubPrimarySelectionMorph(774648320)...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (395235840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312494080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(36862464)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(937170432)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@867)
		owner: 	a TransformWithLayoutMorph(308399104)
		submorphs: 	an Array(a RubCursor(36862464) a RubPrimarySelectionMorph(774648320)...etc...
		fullBounds: 	(0@0) corner: (1395@867)
		color: 	Color transparent
		extension: 	a MorphExtension (395235840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312494080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(36862464)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(937170432)
	Receiver's instance variables: 
		bounds: 	(438@557.0) corner: (454@573.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(438@557) mouseOver 234286401 nil]
		targetOffset: 	(204@588)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 234286401 438 557 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(438@557.0) corner: (454@573.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(438@557) mouseOver 234286401 nil]
		targetOffset: 	(204@588)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 234286401 438 557 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1013046784))(a DropLis...etc...
		lastStepTime: 	234292457
		lastStepMessage: 	nil
		lastCycleTime: 	234292479
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(36862464)))
		lastAlarmTime: 	234292457
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 9:56:55.158398 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(618167808)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(24224768)
		submorphs: 	an Array(a RubCursor(693990912) a RubPrimarySelectionMorph(548607488...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (626906112) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(198062080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693990912)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(126@17)
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(618167808)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(24224768)
		submorphs: 	an Array(a RubCursor(693990912) a RubPrimarySelectionMorph(548607488...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (626906112) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(198062080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693990912)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(126@17)
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(618167808)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(24224768)
		submorphs: 	an Array(a RubCursor(693990912) a RubPrimarySelectionMorph(548607488...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (626906112) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(198062080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693990912)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(126@17)
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(618167808)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(24224768)
		submorphs: 	an Array(a RubCursor(693990912) a RubPrimarySelectionMorph(548607488...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (626906112) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(198062080)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(693990912)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	(126@17)
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(618167808)
	Receiver's instance variables: 
		bounds: 	(678@524.0) corner: (694@540.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(678@524) mouseOver 235158381 nil]
		targetOffset: 	(126.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 235158381 678 524 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(678@524.0) corner: (694@540.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(678@524) mouseOver 235158381 nil]
		targetOffset: 	(126.0@17.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 235158381 678 524 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1013046784))(a DropLis...etc...
		lastStepTime: 	235159553
		lastStepMessage: 	nil
		lastCycleTime: 	235159575
		alarms: 	a Heap()
		lastAlarmTime: 	235159553
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 11:05:10.25244 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(356999168)
	Receiver's instance variables: 
		bounds: 	(343@611.0) corner: (359@627.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@611) mouseOver 239253695 nil]
		targetOffset: 	(160@152)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 239253695 343 611 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(343@611.0) corner: (359@627.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(343@611) mouseOver 239253695 nil]
		targetOffset: 	(160@152)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 239253695 343 611 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	239254471
		lastStepMessage: 	nil
		lastCycleTime: 	239254492
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(661953536)))
		lastAlarmTime: 	239254471
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 11:05:59.882694 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(356999168)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(16241664)
		submorphs: 	an Array(a RubCursor(661953536) a RubPrimarySelectionMorph(453220864...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (414578688) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(246988288)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(661953536)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(356999168)
	Receiver's instance variables: 
		bounds: 	(1858@ -431.0) corner: (1874@ -415.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1858@ -431) mouseOver 239290286 nil]
		targetOffset: 	(361@135)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 239290286 1858 -431 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1858@ -431.0) corner: (1874@ -415.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1858@ -431) mouseOver 239290286 nil]
		targetOffset: 	(361@135)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 239290286 1858 -431 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1013046784))(a DropLis...etc...
		lastStepTime: 	239304257
		lastStepMessage: 	nil
		lastCycleTime: 	239304279
		alarms: 	a Heap()
		lastAlarmTime: 	239304257
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 11:40:35.71894 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(305167360)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(757405696)
		submorphs: 	an Array(a RubCursor(366940672) a RubPrimarySelectionMorph(807178752...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (645283840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(511973888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(366940672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(305167360)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(757405696)
		submorphs: 	an Array(a RubCursor(366940672) a RubPrimarySelectionMorph(807178752...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (645283840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(511973888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(366940672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(305167360)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(757405696)
		submorphs: 	an Array(a RubCursor(366940672) a RubPrimarySelectionMorph(807178752...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (645283840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(511973888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(366940672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(305167360)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@221)
		owner: 	a TransformWithLayoutMorph(757405696)
		submorphs: 	an Array(a RubCursor(366940672) a RubPrimarySelectionMorph(807178752...etc...
		fullBounds: 	(0@0) corner: (1408@221)
		color: 	Color transparent
		extension: 	a MorphExtension (645283840) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(511973888)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(366940672)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(305167360)
	Receiver's instance variables: 
		bounds: 	(239@ -156.0) corner: (255@ -140.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(239@ -156) mouseOver 241365519 nil]
		targetOffset: 	(164@166)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 241365519 239 -156 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(239@ -156.0) corner: (255@ -140.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(239@ -156) mouseOver 241365519 nil]
		targetOffset: 	(164@166)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 241365519 239 -156 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	241379940
		lastStepMessage: 	nil
		lastCycleTime: 	241379963
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(366940672)))
		lastAlarmTime: 	241379940
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 11:58:11.136268 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(651981312)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(318361600)
		submorphs: 	an Array(a RubCursor(583778304) a RubPrimarySelectionMorph(786674176...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (650334720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(248439808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(583778304)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(651981312)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(318361600)
		submorphs: 	an Array(a RubCursor(583778304) a RubPrimarySelectionMorph(786674176...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (650334720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(248439808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(583778304)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(651981312)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(318361600)
		submorphs: 	an Array(a RubCursor(583778304) a RubPrimarySelectionMorph(786674176...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (650334720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(248439808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(583778304)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(651981312)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(318361600)
		submorphs: 	an Array(a RubCursor(583778304) a RubPrimarySelectionMorph(786674176...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (650334720) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(248439808)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(583778304)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(651981312)
	Receiver's instance variables: 
		bounds: 	(922@369.0) corner: (938@385.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(922@369) mouseOver 242421272 nil]
		targetOffset: 	(114@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 242421272 922 369 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(922@369.0) corner: (938@385.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(922@369) mouseOver 242421272 nil]
		targetOffset: 	(114@132)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 242421272 922 369 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@784)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	242435473
		lastStepMessage: 	nil
		lastCycleTime: 	242435494
		alarms: 	a Heap()
		lastAlarmTime: 	242435473
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@784)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@784)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 2:06:42.950443 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(228721152)
	Receiver's instance variables: 
		bounds: 	(412@633.0) corner: (428@649.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@633) mouseOver 250141861 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 250141861 412 633 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(412@633.0) corner: (428@649.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(412@633) mouseOver 250141861 nil]
		targetOffset: 	(7.0@10.0)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 250141861 412 633 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1013046784))(a DropLis...etc...
		lastStepTime: 	250147174
		lastStepMessage: 	nil
		lastCycleTime: 	250147197
		alarms: 	a Heap()
		lastAlarmTime: 	250147174
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 2:12:41.620917 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(228721152)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(121209344)
		submorphs: 	an Array(a RubPrimarySelectionMorph(961611264) a RubCursor(60918272)...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (217910272) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(280969216)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(60918272)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(228721152)
	Receiver's instance variables: 
		bounds: 	(893@468.0) corner: (909@484.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(893@468) mouseOver CMD 250505871 nil]
		targetOffset: 	(602@188)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 250505871 893 468 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(893@468.0) corner: (909@484.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(893@468) mouseOver CMD 250505871 nil]
		targetOffset: 	(602@188)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 250505871 893 468 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1013046784))(a DropLis...etc...
		lastStepTime: 	250505999
		lastStepMessage: 	nil
		lastCycleTime: 	250506022
		alarms: 	a Heap()
		lastAlarmTime: 	250505999
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 2:34:56.748544 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	5
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	5
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(339069440)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(392755712)
		submorphs: 	an Array(a RubCursor(348669952) a RubPrimarySelectionMorph(83808768)...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1013598208) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(758024192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348669952)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(339069440)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(392755712)
		submorphs: 	an Array(a RubCursor(348669952) a RubPrimarySelectionMorph(83808768)...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1013598208) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(758024192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348669952)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(339069440)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(392755712)
		submorphs: 	an Array(a RubCursor(348669952) a RubPrimarySelectionMorph(83808768)...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1013598208) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(758024192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348669952)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(339069440)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(392755712)
		submorphs: 	an Array(a RubCursor(348669952) a RubPrimarySelectionMorph(83808768)...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (1013598208) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(758024192)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(348669952)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(339069440)
	Receiver's instance variables: 
		bounds: 	(278@ -165.0) corner: (294@ -149.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(278@ -165) mouseOver 251835495 nil]
		targetOffset: 	(183@114)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 251835495 278 -165 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(278@ -165.0) corner: (294@ -149.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(278@ -165) mouseOver 251835495 nil]
		targetOffset: 	(183@114)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 251835495 278 -165 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	251841131
		lastStepMessage: 	nil
		lastCycleTime: 	251841152
		alarms: 	a Heap()
		lastAlarmTime: 	251841131
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

4 December 2019 3:22:53.39432 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(757308416)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(1021245440)
		submorphs: 	an Array(a RubCursor(238342656) a RubPrimarySelectionMorph(307327488...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (555454976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312818176)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(238342656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(757308416)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(1021245440)
		submorphs: 	an Array(a RubCursor(238342656) a RubPrimarySelectionMorph(307327488...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (555454976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312818176)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(238342656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(757308416)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(1021245440)
		submorphs: 	an Array(a RubCursor(238342656) a RubPrimarySelectionMorph(307327488...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (555454976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312818176)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(238342656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(757308416)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@259)
		owner: 	a TransformWithLayoutMorph(1021245440)
		submorphs: 	an Array(a RubCursor(238342656) a RubPrimarySelectionMorph(307327488...etc...
		fullBounds: 	(0@0) corner: (1408@259)
		color: 	Color transparent
		extension: 	a MorphExtension (555454976) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(312818176)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(238342656)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(757308416)
	Receiver's instance variables: 
		bounds: 	(316@615.0) corner: (332@631.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(316@615) mouseOver 254716849 nil]
		targetOffset: 	(281@185)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 254716849 316 615 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(316@615.0) corner: (332@631.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(316@615) mouseOver 254716849 nil]
		targetOffset: 	(281@185)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 254716849 316 615 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	254717790
		lastStepMessage: 	nil
		lastCycleTime: 	254717815
		alarms: 	a Heap()
		lastAlarmTime: 	254717790
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 December 2019 9:46:21.094802 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(612820480)
	Receiver's instance variables: 
		bounds: 	(629@575.0) corner: (645@591.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@575) mouseOver 320924400 nil]
		targetOffset: 	(603@180)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 320924400 629 575 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(629@575.0) corner: (645@591.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(629@575) mouseOver 320924400 nil]
		targetOffset: 	(603@180)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 320924400 629 575 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1013046784))(a DropLis...etc...
		lastStepTime: 	320925443
		lastStepMessage: 	nil
		lastCycleTime: 	320925464
		alarms: 	a Heap()
		lastAlarmTime: 	320925443
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 December 2019 9:52:40.106277 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(13233664))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(13233664))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(13233664))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(13233664))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(612820480)
	Receiver's instance variables: 
		bounds: 	(588@503.0) corner: (604@519.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@503) mouseOver CMD SHIFT 321304437 nil]
		targetOffset: 	(297@134)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 321304437 588 503 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(588@503.0) corner: (604@519.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(588@503) mouseOver CMD SHIFT 321304437 nil]
		targetOffset: 	(297@134)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 321304437 588 503 0 9 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	321304437
		lastStepMessage: 	nil
		lastCycleTime: 	321304460
		alarms: 	a Heap()
		lastAlarmTime: 	321304437
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 December 2019 9:57:30.587201 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(507009536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(507009536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(507009536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection(a ClyCriticalTextSegmentMorph(507009536))
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(612820480)
	Receiver's instance variables: 
		bounds: 	(1240@ -196.0) corner: (1256@ -180.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1240@ -196) mouseOver 321592797 nil]
		targetOffset: 	(105@54)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 321592797 1240 -196 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1240@ -196.0) corner: (1256@ -180.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1240@ -196) mouseOver 321592797 nil]
		targetOffset: 	(105@54)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 321592797 1240 -196 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	321594942
		lastStepMessage: 	nil
		lastCycleTime: 	321594962
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(556659712)))
		lastAlarmTime: 	321594942
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

5 December 2019 9:58:03.610982 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	2
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	2
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(612820480)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@183)
		owner: 	a TransformWithLayoutMorph(342769152)
		submorphs: 	an Array(a RubPrimarySelectionMorph(633981440) a RubCursor(556659712...etc...
		fullBounds: 	(0@0) corner: (1408@183)
		color: 	Color transparent
		extension: 	a MorphExtension (1003439104) [other:  (announcer -> an Announcer) (...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(300016640)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(556659712)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(612820480)
	Receiver's instance variables: 
		bounds: 	(391@548.0) corner: (407@564.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@548) mouseOver CMD 321627616 nil]
		targetOffset: 	(253@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 321627616 392 549 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(391@548.0) corner: (407@564.0)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(391@548) mouseOver CMD 321627616 nil]
		targetOffset: 	(253@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 321627616 392 549 0 8 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@848)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(1050290688))(a DropLis...etc...
		lastStepTime: 	321627960
		lastStepMessage: 	nil
		lastCycleTime: 	321627983
		alarms: 	a Heap()
		lastAlarmTime: 	321627960
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@848)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@848)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-25T11:29:44.344898+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------


*** Warning: Warning: This package depends on the following classes:
  VMStructType
  VMThreadingConstants
  VMBasicConstants
You must resolve these dependencies before you will be able to load these definitions: 
  MockEmptyVMStruct
  MockEmptyVMStruct>>#instVarNamesAndTypesForTranslationDo:
  MockEmptyVMStructWithRedefinedStructName
  MockEmptyVMStructWithRedefinedStructName>>#structTypeName
  VMMTTests
  VMMTTests>>#runCaseManaged
  VMMTTests>>#setUp
  VMMTTests>>#testAssignableThreadIsNotVMOwner
  VMMTTests>>#testAssignableThreadIsWilling
  VMMTTests>>#testDisownOnRelinquishPutsVMInRelinquishingState
  VMMTTests>>#testDisownRemembersLastDisownedThread
  VMMTTests>>#testDisownVMReleasesVM
  VMMTTests>>#testDisownVMSetsCurrentThreadToUnavailable
  VMMTTests>>#testHeartbeatReleasesVMWhenNoProcessIsWilling
  VMMTTests>>#testHeartbeatWakesUpWaitingVMThread
  VMMTTests>>#testInitialThreadIsAssignableOrInVM
  VMMTTests>>#testInitialVMHasManyThreads
  VMMTTests>>#testInitialVMHasNoDisowningVMThread
  VMMTTests>>#testInitialVMThreadsAreUinitialized
  VMMTTests>>#testOwnFreeVMOwnsSameThread
  VMMTTests>>#testPreemptedProcessIsMarkedInExternalCode
  VMMTTests>>#testPreemptedProcessSetsCurrentMethodInThread
  VMMTTests>>#testPreemptedVMThreadHasPreemptedProcessPriority
  VMMTTests>>#testPreemptedVMThreadIsListedInAWOLProcesses
  VMMTTests>>#testPreemptedVMThreadIsTemporarilyAffinedToProcess
  VMMTTests>>#testTryOwningOwnedVMLeavesThreadInWaitingState
  VMMTTests>>#testWantingThreadIsWilling
  VMMTTests>>#testWantingThreadIsWillingOverAssignableThread

