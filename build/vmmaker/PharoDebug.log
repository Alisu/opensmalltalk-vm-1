
*** Warning: Warning: This package depends on the following classes:
  VMStructType
  VMThreadingConstants
  VMBasicConstants
You must resolve these dependencies before you will be able to load these definitions: 
  MockEmptyVMStruct
  MockEmptyVMStruct>>#instVarNamesAndTypesForTranslationDo:
  MockEmptyVMStructWithRedefinedStructName
  MockEmptyVMStructWithRedefinedStructName>>#structTypeName
  VMMTTests
  VMMTTests>>#runCaseManaged
  VMMTTests>>#setUp
  VMMTTests>>#testAssignableThreadIsNotVMOwner
  VMMTTests>>#testAssignableThreadIsWilling
  VMMTTests>>#testDisownOnRelinquishPutsVMInRelinquishingState
  VMMTTests>>#testDisownRemembersLastDisownedThread
  VMMTTests>>#testDisownVMReleasesVM
  VMMTTests>>#testDisownVMSetsCurrentThreadToUnavailable
  VMMTTests>>#testHeartbeatReleasesVMWhenNoProcessIsWilling
  VMMTTests>>#testHeartbeatWakesUpWaitingVMThread
  VMMTTests>>#testInitialThreadIsAssignableOrInVM
  VMMTTests>>#testInitialVMHasManyThreads
  VMMTTests>>#testInitialVMHasNoDisowningVMThread
  VMMTTests>>#testInitialVMThreadsAreUinitialized
  VMMTTests>>#testOwnFreeVMOwnsSameThread
  VMMTTests>>#testPreemptedProcessIsMarkedInExternalCode
  VMMTTests>>#testPreemptedProcessSetsCurrentMethodInThread
  VMMTTests>>#testPreemptedVMThreadHasPreemptedProcessPriority
  VMMTTests>>#testPreemptedVMThreadIsListedInAWOLProcesses
  VMMTTests>>#testPreemptedVMThreadIsTemporarilyAffinedToProcess
  VMMTTests>>#testTryOwningOwnedVMLeavesThreadInWaitingState
  VMMTTests>>#testWantingThreadIsWilling
  VMMTTests>>#testWantingThreadIsWillingOverAssignableThread


*** Warning: Warning: This package depends on the following classes:
  StackMTInterpreterSimulator
  VMClass
  CogThreadManager
You must resolve these dependencies before you will be able to load these definitions: 
  SpurMockMemory
  SpurMockMemory>>#hasSpurMemoryManagerAPI
  SpurMockMemory>>#initializeWithOptions:
  SpurMockMemory>>#numSmallIntegerTagBits
  SpurMockMemory>>#simulatorClass
  SpurMockMemory>>#wordSize
  SpurMockMemory>>#addressCouldBeObj:
  SpurMockMemory>>#addressOf:
  SpurMockMemory>>#baseHeaderSize
  SpurMockMemory>>#bytesPerOop
  SpurMockMemory>>#coInterpreter:
  SpurMockMemory>>#fetchPointer:ofObject:
  SpurMockMemory>>#followField:ofObject:
  SpurMockMemory>>#followObjField:ofObject:
  SpurMockMemory>>#goodContextSize:
  SpurMockMemory>>#hasSpurMemoryManagerAPI
  SpurMockMemory>>#headerIndicatesAlternateBytecodeSet:
  SpurMockMemory>>#initialize
  SpurMockMemory>>#integerObjectOf:
  SpurMockMemory>>#integerValueOf:
  SpurMockMemory>>#isContext:
  SpurMockMemory>>#isForwarded:
  SpurMockMemory>>#isIntegerObject:
  SpurMockMemory>>#isNonImmediate:
  SpurMockMemory>>#isOopCompiledMethod:
  SpurMockMemory>>#isOopForwarded:
  SpurMockMemory>>#lastPointerOf:
  SpurMockMemory>>#lengthOf:
  SpurMockMemory>>#literalCountOf:
  SpurMockMemory>>#maxCInteger
  SpurMockMemory>>#memoryActiveProcess
  SpurMockMemory>>#methodHeaderOf:
  SpurMockMemory>>#nextAddress
  SpurMockMemory>>#nilObject
  SpurMockMemory>>#numBytesOfBytes:
  SpurMockMemory>>#numSlotsOf:
  SpurMockMemory>>#objectFor:
  SpurMockMemory>>#processorSchedulerMock
  SpurMockMemory>>#shiftForWord
  SpurMockMemory>>#smallIntegerTag
  SpurMockMemory>>#splObj:
  SpurMockMemory>>#startOfMemory
  SpurMockMemory>>#storePointer:ofObject:withValue:
  SpurMockMemory>>#storePointerUnchecked:ofObject:withValue:
  SpurMockMemory>>#wordSize
  StackMTInterpreterSimulatorForTest
  StackMTInterpreterSimulatorForTest>>#onObjectMemory:options:
  StackMTInterpreterSimulatorForTest>>#enterSmalltalkExecutiveImplementation
  StackMTInterpreterSimulatorForTest>>#ioNewOS:Thread:
  StackMTInterpreterSimulatorForTest>>#methodCallingPush
  VMMockCogThreadManager
  VMMockCogThreadManager>>#ioWaitOnOSSemaphore:

THERE_BE_DRAGONS_HERE

13 November 2019 10:34:27.810682 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(98109952)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@145)
		owner: 	a TransformWithLayoutMorph(741876736)
		submorphs: 	an Array(a RubPrimarySelectionMorph(859439104) a RubCursor(27687424)...etc...
		fullBounds: 	(0@0) corner: (1408@145)
		color: 	Color transparent
		extension: 	a MorphExtension (73279488) [other:  (announcer -> an Announcer) (km...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(434930688)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	true
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(27687424)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	a RubEditingArea(98109952)
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(98109952)
	Receiver's instance variables: 
		bounds: 	(165@520) corner: (181@536)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(165@520) mouseOver 3098357 nil]
		targetOffset: 	(30@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3098357 165 520 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(165@520) corner: (181@536)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(165@520) mouseOver 3098357 nil]
		targetOffset: 	(30@133)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3098357 165 520 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	3098861
		lastStepMessage: 	nil
		lastCycleTime: 	3098883
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(27687424)))
		lastAlarmTime: 	3098861
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 10:34:54.310571 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(427255296)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(769796096)
		submorphs: 	an Array(a RubCursor(337121280) a RubPrimarySelectionMorph(937102848...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (245180928) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(450437120)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(337121280)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(427255296)
	Receiver's instance variables: 
		bounds: 	(780@648) corner: (796@664)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(780@648) mouseOver 3125235 nil]
		targetOffset: 	(338@94)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3125235 780 648 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(780@648) corner: (796@664)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(780@648) mouseOver 3125235 nil]
		targetOffset: 	(338@94)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 3125235 780 648 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	8


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	3125541
		lastStepMessage: 	nil
		lastCycleTime: 	3125562
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(337121280)))
		lastAlarmTime: 	3125541
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#asSymbol was sent to nil
13 November 2019 11:05:30.87314 am

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asSymbol
		exception: 	MessageNotUnderstood: receiver of "asSymbol" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

Protocol class>>name:
	Receiver: Protocol
	Arguments and temporary variables: 
		nm: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(#addAllMethodsFrom:->Protocol>>#addAllMethodsFro...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AllProtocol}
		name: 	#Protocol
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Kernel-Protocols'


ProtocolOrganizer>>addProtocolNamed:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aName: 	nil
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


[ self addProtocolNamed: name ] in ProtocolOrganizer>>classify:inProtocolNamed:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aSymbol: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
		name: 	nil
		protocol: 	nil
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


IdentitySet(Collection)>>detect:ifFound:ifNone:
	Receiver: an IdentitySet(Protocol (primitive support) - 36 selector(s) Protocol (control primitives)...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | e name = aByteString ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ self addProtocolNamed: name ]
	Receiver's instance variables: 
		tally: 	20
		array: 	an Array(nil nil nil nil nil nil Protocol (primitive support) - 36 selec...etc...


IdentitySet(Collection)>>detect:ifNone:
	Receiver: an IdentitySet(Protocol (primitive support) - 36 selector(s) Protocol (control primitives)...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :e | e name = aByteString ]
		exceptionBlock: 	[ self addProtocolNamed: name ]
	Receiver's instance variables: 
		tally: 	20
		array: 	an Array(nil nil nil nil nil nil Protocol (primitive support) - 36 selec...etc...


ProtocolOrganizer>>getProtocolNamed:ifNone:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aByteString: 	nil
		aBlockClosure: 	[ self addProtocolNamed: name ]
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


ProtocolOrganizer>>classify:inProtocolNamed:
	Receiver: a ProtocolOrganizer
	Arguments and temporary variables: 
		aSymbol: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
		name: 	nil
		protocol: 	nil
	Receiver's instance variables: 
		allProtocol: 	AllProtocol (-- all --) - 303 selector(s)
		protocols: 	an IdentitySet(Protocol (primitive support) - 36 selector(s) Protoco...etc...


ClassOrganization>>classify:under:suppressIfDefault:
	Receiver: a ClassOrganization
	Arguments and temporary variables: 
		selector: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
		aBoolean: 	true
		oldCategory: 	#'as yet unclassified'
		forceNotify: 	true
		oldProtocols: 	#()
	Receiver's instance variables: 
		comment: 	a RemoteString
		commentStamp: 	''
		protocolOrganizer: 	a ProtocolOrganizer
		organizedClass: 	InterpreterPrimitives


ClassOrganization>>classify:under:
	Receiver: a ClassOrganization
	Arguments and temporary variables: 
		aSymbol: 	#newImageNamed:withArguments:
		aProtocolName: 	nil
	Receiver's instance variables: 
		comment: 	a RemoteString
		commentStamp: 	''
		protocolOrganizer: 	a ProtocolOrganizer
		organizedClass: 	InterpreterPrimitives


[ self organization
	classify: selector
	under:
		(category = Protocol unclassified
			ifTrue: [ oldProtocol ]
			ifFalse: [ category ]) ] in InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		selector: 	#newImageNamed:withArguments:
		compiledMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:
		category: 	nil
		priorMethodOrNil: 	nil
		priorOriginOrNil: 	nil
		oldProtocol: 	#'as yet unclassified'
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


BlockClosure>>ensure:
	Receiver: [ self organization
	classify: selector
	under:
		(category = Protocol unclassified
			ifT...etc...
	Arguments and temporary variables: 
		aBlock: 	[ suspended := oldSuspended ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	InterpreterPrimitives class(ClassDescription)>>addAndClassifySele...etc...
		startpc: 	222
		numArgs: 	0


SystemAnnouncer>>suspendAllWhile:
	Receiver: a SystemAnnouncer
	Arguments and temporary variables: 
		aBlock: 	[ self organization
	classify: selector
	under:
		(category = Protocol ...etc...
		oldSuspended: 	false
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry
		suspended: 	true
		private: 	an Announcer
		storedAnnouncements: 	nil


InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		selector: 	#newImageNamed:withArguments:
		compiledMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:
		category: 	nil
		priorMethodOrNil: 	nil
		priorOriginOrNil: 	nil
		oldProtocol: 	#'as yet unclassified'
		newProtocol: 	nil
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		text: 	a Text for 'newImageNamed: anImageName withArguments: anArrayOfArgs

	

	...etc...
		category: 	nil
		changeStamp: 	'Pablo 11/13/2019 11:05'
		requestor: 	a RubScrolledTextMorph(1066556416)
		logSource: 	true
		method: 	InterpreterPrimitives>>#newImageNamed:withArguments:
		selector: 	#newImageNamed:withArguments:
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		text: 	a Text for 'newImageNamed: anImageName withArguments: anArrayOfArgs

	

	...etc...
		category: 	nil
		changeStamp: 	'Pablo 11/13/2019 11:05'
		requestor: 	a RubScrolledTextMorph(1066556416)
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


InterpreterPrimitives class(ClassDescription)>>compile:classified:notifying:
	Receiver: InterpreterPrimitives
	Arguments and temporary variables: 
		text: 	a Text for 'newImageNamed: anImageName withArguments: anArrayOfArgs

	

	...etc...
		category: 	nil
		requestor: 	a RubScrolledTextMorph(1066556416)
		stamp: 	'Pablo 11/13/2019 11:05'
	Receiver's instance variables: 
		superclass: 	VMClass
		methodDict: 	a MethodDictionary(size 304)
		format: 	65552
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{StackInterpreter}
		name: 	#InterpreterPrimitives
		classPool: 	a Dictionary(#CrossedX->258 #EndOfRun->257 #MillisecondClockMask->53...etc...
		sharedPools: 	an OrderedCollection(VMBasicConstants VMBytecodeConstants VMMethod...etc...
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'VMMaker-Interpreter'
		timeStamp: 	3751089324


ClyMethodCodeEditorToolMorph>>applyChanges
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		selector: 	nil
		methodClass: 	InterpreterPrimitives
		currentMethod: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ self changesAreAboutApply.
applied := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		applied: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


BlockClosure>>on:do:
	Receiver: [ self changesAreAboutApply.
applied := self applyChanges ]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[ :err | 
textModel text: self editingText.
textMorph hasUnaccep...etc...
	Receiver's instance variables: 
		outerContext: 	[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply...etc...
		startpc: 	140
		numArgs: 	0


[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		applied: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


BlockClosure>>ensure:
	Receiver: [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyCh...etc...
	Arguments and temporary variables: 
		aBlock: 	[ applyingChanges := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAcce...etc...
		startpc: 	130
		numArgs: 	0


ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>applyChangesBy:
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		aBlock: 	[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
appl...etc...
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
	Receiver: a ClyMethodCodeEditorToolMorph(331595776)
	Arguments and temporary variables: 
		applied: 	nil
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@705.0)
		owner: 	a Morph(513284608)
		submorphs: 	an Array(a PanelMorph(569287168))
		fullBounds: 	(7@402) corner: (1434@705)
		color: 	Color transparent
		extension: 	a MorphExtension (972455424) [other:  (kmDispatcher -> a CmdKMDispat...etc...
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyFullBrowser(909185792)
		context: 	a ClyMethodContextOfFullBrowser
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	a TabMorph(8120320)
		isDirty: 	true
		isManagedByUser: 	false
		statusBar: 	a ClyStatusBarMorph(265609216)
		textModel: 	a RubScrolledTextModel
		textMorph: 	a RubScrolledTextMorph(1066556416)
		changesCancelRequested: 	false
		applyingChanges: 	true
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	{InterpreterPrimitives}
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


MessageSend>>value
	Receiver: MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(331595776))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyMethodCodeEditorToolMorph(331595776)
		selector: 	#changesAccepted
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(331595776))
	Arguments and temporary variables: 
		arg: 	a RubTextAccepted
	Receiver's instance variables: 
		receiver: 	a ClyMethodCodeEditorToolMorph(331595776)
		selector: 	#changesAccepted
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(331595776))
	Arguments and temporary variables: 
		arg1: 	a RubTextAccepted
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyMethodCodeEditorToolMorph(331595776)
		selector: 	#changesAccepted
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a ClyMethodCodeEditorToolMorph(331595776)
		action: 	MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(33159577...etc...


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	RubTextAccepted
		subscriber: 	a ClyMethodCodeEditorToolMorph(331595776)
		action: 	MessageSend(#changesAccepted -> a ClyMethodCodeEditorToolMorph(33159577...etc...


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		subs: 	an Array(an AnnouncementSubscription)
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription)
		anAnnouncement: 	a RubTextAccepted
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAccepted
		announcement: 	a RubTextAccepted
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubScrolledTextMorph>>acceptContents
	Receiver: a RubScrolledTextMorph(1066556416)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@678.0)
		owner: 	a PanelMorph(569287168)
		submorphs: 	an Array(a RubTextScrollPane(615418880) a RubAdornmentDisplayer(9414...etc...
		fullBounds: 	(7@402) corner: (1434@678)
		color: 	Color white
		extension: 	a MorphExtension (692116992) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	nil
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(615418880)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(800009216) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()


RubScrolledTextMorph>>whenTextAcceptRequest:
	Receiver: a RubScrolledTextMorph(1066556416)
	Arguments and temporary variables: 
		anAnnouncement: 	a RubTextAcceptRequest
	Receiver's instance variables: 
		bounds: 	(7.0@402.0) corner: (1434.0@678.0)
		owner: 	a PanelMorph(569287168)
		submorphs: 	an Array(a RubTextScrollPane(615418880) a RubAdornmentDisplayer(9414...etc...
		fullBounds: 	(7@402) corner: (1434@678)
		color: 	Color white
		extension: 	a MorphExtension (692116992) [other:  (announcer -> an Announcer) (k...etc...
		hasEditingConflicts: 	false
		hasUnacceptedEdits: 	true
		alwaysAccept: 	nil
		setTextSelector: 	#setText:from:
		getTextSelector: 	#getText
		getSelectionSelector: 	#primarySelectionInterval
		setSelectionSelector: 	nil
		autoAccept: 	false
		scrollPane: 	a RubTextScrollPane(615418880)
		rulers: 	a SortedCollection(a RubTextSegmentIconDisplayer(800009216) a RubAdornm...etc...
		enabled: 	true
		highlights: 	an OrderedCollection()



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asSymbol
Protocol class>>name:
ProtocolOrganizer>>addProtocolNamed:
[ self addProtocolNamed: name ] in ProtocolOrganizer>>classify:inProtocolNamed:
IdentitySet(Collection)>>detect:ifFound:ifNone:
IdentitySet(Collection)>>detect:ifNone:
ProtocolOrganizer>>getProtocolNamed:ifNone:
ProtocolOrganizer>>classify:inProtocolNamed:
ClassOrganization>>classify:under:suppressIfDefault:
ClassOrganization>>classify:under:
[ self organization
	classify: selector
	under:
		(category = Protocol unclassified
			ifTrue: [ oldProtocol ]
			ifFalse: [ category ]) ] in InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
BlockClosure>>ensure:
SystemAnnouncer>>suspendAllWhile:
InterpreterPrimitives class(ClassDescription)>>addAndClassifySelector:withMethod:inProtocol:
InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:logSource:
InterpreterPrimitives class(ClassDescription)>>compile:classified:withStamp:notifying:
InterpreterPrimitives class(ClassDescription)>>compile:classified:notifying:
ClyMethodCodeEditorToolMorph>>applyChanges
[ self changesAreAboutApply.
applied := self applyChanges ] in [ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
BlockClosure>>on:do:
[ textMorph hasUnacceptedEdits: true.
[ self changesAreAboutApply.
applied := self applyChanges ]
	on: Error
	do: [ :err | 
		textModel text: self editingText.
		textMorph hasUnacceptedEdits: true.
		err pass ].
applied
	ifTrue: [ textMorph hasUnacceptedEdits: false.
		self textUpdated.
		browser focusActiveTab ]
	ifFalse: [ textModel text: self editingText.
		textMorph hasUnacceptedEdits: true ] ] in ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
BlockClosure>>ensure:
ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>applyChangesBy:
ClyMethodCodeEditorToolMorph(ClyTextEditorToolMorph)>>changesAccepted
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubScrolledTextMorph>>acceptContents
RubScrolledTextMorph>>whenTextAcceptRequest:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
MessageSend>>value:
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(RubAbstractTextArea)>>announce:
RubEditingArea(RubAbstractTextArea)>>acceptContents
ClyTextEditor(RubTextEditor)>>accept
[ :target | target editor accept ] in RubTextEditor class>>buildShortcutsOn:
BlockClosure>>cull:
BlockClosure>>cull:cull:
BlockClosure>>cull:cull:cull:
KMCategoryBinding>>completeMatch:buffer:
[ :l | l completeMatch: self buffer: aBuffer ] in KMKeymap>>notifyCompleteMatchTo:buffer:
Array(SequenceableCollection)>>do:
KMKeymap>>notifyCompleteMatchTo:buffer:
KMKeymap>>onMatchWith:notify:andDo:
[ :entry | entry onMatchWith: anEventBuffer notify: aMatchListener andDo: aBlock ] in KMCategory>>onMatchWith:notify:andDo:
Set>>do:
KMCategory>>onMatchWith:notify:andDo:
KMCategoryBinding>>verifyMatchWith:notifying:thenDoing:
[ :aTarget | 
"nice hack to stop in the first listener"
aTarget
	verifyMatchWith: anEventBuffer
	notifying: self
	thenDoing: [ ^ self ] ] in CmdKMDispatcher(KMDispatcher)>>dispatch:
OrderedCollection>>do:
CmdKMDispatcher(KMDispatcher)>>dispatch:
CmdKMDispatcher>>dispatch:
KMTarget>>dispatch:
[ :targetToDispatch | 
targetToDispatch dispatch: KMBuffer uniqueInstance buffer copy.
aKeyboardEvent wasHandled
	ifTrue: [ ^ self ] ] in KMDispatchChain>>dispatch:
KMDispatchChain>>do:
KMDispatchChain>>dispatch:
CmdKMDispatcher(KMDispatcher)>>dispatchKeystroke:
RubEditingArea(Morph)>>dispatchKeystrokeForEvent:
RubEditingArea(RubAbstractTextArea)>>handleKeystroke:
KeyboardEvent>>sentTo:
RubEditingArea(Morph)>>handleEvent:
RubEditingArea(Morph)>>handleFocusEvent:
[ ActiveHand := self.
ActiveEvent := anEvent.
result := focusHolder
	handleFocusEvent: (anEvent transformedBy: (focusHolder transformedFrom: self)) ] in HandMorph>>sendFocusEvent:to:clear:
BlockClosure>>on:do:
WorldMorph(PasteUpMorph)>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEventsFromQueue:
HandMorph>>processEvents
[ :h | 
self activeHand: h.
h processEvents.
self activeHand: nil ] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:02:39.919977 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(514639872)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@772)
		owner: 	a TransformWithLayoutMorph(564625408)
		submorphs: 	an Array(a RubPrimarySelectionMorph(590332416) a RubCursor(532238848...etc...
		fullBounds: 	(0@0) corner: (1395@772)
		color: 	Color transparent
		extension: 	a MorphExtension (799267328) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(1004346880)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(532238848)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(514639872)
	Receiver's instance variables: 
		bounds: 	(371@548) corner: (387@564)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(371@548) mouseOver 11990047 nil]
		targetOffset: 	(16@684)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 11990047 371 548 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(371@548) corner: (387@564)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(371@548) mouseOver 11990047 nil]
		targetOffset: 	(16@684)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 11990047 371 548 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	11991026
		lastStepMessage: 	nil
		lastCycleTime: 	11991051
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(532238848)))
		lastAlarmTime: 	11991026
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
13 November 2019 1:09:19.17035 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(759837696)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(21626368)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (139375104)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(759837696)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(21626368)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		each: 	a ClyMethodCodeEditorToolMorph(21626368)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(21626368) nil nil nil nil nil ni...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>itemsChangedIn:
	Receiver: a ClyQueryViewMorph(294241792)
	Arguments and temporary variables: 
		aDataSource: 	a ClyCollapsedDataSource
		selectionWasEmpty: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(162950144)
		submorphs: 	an Array(a FTTableMorph(65669632))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (979340800)
		table: 	a FTTableMorph(65669632)
		browser: 	a ClyQueryBrowser(759837696)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyCollapsedDataSource(ClyDataSource)>>runUpdate
	Receiver: a ClyCollapsedDataSource
	Arguments and temporary variables: 

	Receiver's instance variables: 
		table: 	a FTTableMorph(65669632)
		query: 	a ClyAsyncQuery(methods sources with 'setMyCurrentThread', class comment...etc...
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(methods sources with 'setMy...etc...
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(294241792)
		dirty: 	false
		expandedItems: 	a SortedCollection()


[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
	Receiver: a ClyDataSourceUpdateScheduler
	Arguments and temporary variables: 
		dataSources: 	an OrderedCollection(a ClyCollapsedDataSource)
		each: 	a ClyCollapsedDataSource
	Receiver's instance variables: 
		updateQueue: 	AtomicSharedQueue with 0 items
		process: 	a Process in AtomicSharedQueue>>waitForNewItems


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyCollapsedDataSource)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each runUpdate ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyCollapsedDataSource nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
13 November 2019 1:09:25.67157 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(21626368)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (139375104)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(759837696)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(21626368)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(21626368)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(759837696)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(21626368))
		tabMorph: 	a TabManagerMorph(171307008)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(759837696)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(759837696)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState class(ClyBrowserState class)>>of:
	Receiver: ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(759837696)
	Receiver's instance variables: 
		superclass: 	ClyBrowserState
		methodDict: 	a MethodDictionary(#activeScope->ClyQueryBrowserState>>#activeScope...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyQueryBrowserState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemTools-QueryBrowser-UI'


ClyQueryBrowser>>snapshotState
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 
		navigationFailed: 	false
		aBlock: 	[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTool...etc...
		state: 	nil
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(759837696)
	Arguments and temporary variables: 
		newTools: 	nil
		aQueryView: 	a ClyQueryViewMorph(294241792)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(808266752) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(726400000) a PanelMorph(1629501...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (663032320) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(162950144)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(294241792))
		toolPanel: 	a PanelMorph(456666624)
		toolbar: 	a ClyToolbarMorph(742311936)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(294241792)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(294241792)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(162950144)
		submorphs: 	an Array(a FTTableMorph(65669632))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (979340800)
		table: 	a FTTableMorph(65669632)
		browser: 	a ClyQueryBrowser(759837696)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(294241792)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(162950144)
		submorphs: 	an Array(a FTTableMorph(65669632))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (979340800)
		table: 	a FTTableMorph(65669632)
		browser: 	a ClyQueryBrowser(759837696)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(294241792)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(294241792)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(294241792)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(294241792)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(294241792))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
ClyQueryBrowserState>>retrieveStateFrom:
ClyQueryBrowserState class(ClyBrowserState class)>>of:
ClyQueryBrowser>>snapshotState
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:11:49.581334 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(943994880)
	Receiver's instance variables: 
		bounds: 	(676@581) corner: (692@597)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(676@581) mouseOver 12539109 nil]
		targetOffset: 	(650@459)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12539109 676 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(676@581) corner: (692@597)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(676@581) mouseOver 12539109 nil]
		targetOffset: 	(650@459)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 12539109 676 581 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	12540703
		lastStepMessage: 	nil
		lastCycleTime: 	12540726
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(732914688)))
		lastAlarmTime: 	12540703
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:30:41.220286 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	1
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	1
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(943994880)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1395@696)
		owner: 	a TransformWithLayoutMorph(114370048)
		submorphs: 	an Array(a RubCursor(732914688) a RubPrimarySelectionMorph(47860224)...etc...
		fullBounds: 	(0@0) corner: (1395@696)
		color: 	Color transparent
		extension: 	a MorphExtension (656916992) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(222220800)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(732914688)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(943994880)
	Receiver's instance variables: 
		bounds: 	(764@564) corner: (780@580)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(764@564) mouseOver 13670250 nil]
		targetOffset: 	(738@442)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13670250 764 564 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(764@564) corner: (780@580)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(764@564) mouseOver 13670250 nil]
		targetOffset: 	(738@442)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 13670250 764 564 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	13672448
		lastStepMessage: 	nil
		lastCycleTime: 	13672471
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(732914688)))
		lastAlarmTime: 	13672448
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#name was sent to nil
13 November 2019 1:39:08.899501 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #name
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	name
		exception: 	MessageNotUnderstood: receiver of "name" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
		each: 	IceLibgitRepository(iceberg)
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection>>do:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifFound:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		foundBlock: 	[ :element | element ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


OrderedCollection(Collection)>>detect:ifNone:
	Receiver: an OrderedCollection(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibgitRepo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each includesPackageNamed: aPackage name ]
		exceptionBlock: 	[ nil ]
	Receiver's instance variables: 
		array: 	an Array(IceLibgitRepository(iceberg) IceLibgitRepository(pharo) IceLibg...etc...
		firstIndex: 	1
		lastIndex: 	3


IceRepository class>>registeredRepositoryIncludingPackage:
	Receiver: IceRepository
	Arguments and temporary variables: 
		aPackage: 	nil
	Receiver's instance variables: 
		superclass: 	Object
		methodDict: 	a MethodDictionary(size 110)
		format: 	65540
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{IceLibgitRepository}
		name: 	#IceRepository
		classPool: 	a Dictionary(#Registry->an OrderedCollection(IceLibgitRepository(ice...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Iceberg-Core'


ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
	Receiver: ClyIcebergShowMethodVersionCommand
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		superclass: 	CmdCommand
		methodDict: 	a MethodDictionary(#defaultMenuIconName->ClyIcebergShowMethodVersio...etc...
		format: 	65538
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyIcebergShowMethodVersionCommand
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemPlugins-Monticello-Browser'


ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
	Receiver: a ClyQueryBrowserContext
	Arguments and temporary variables: 
		aCommandClass: 	ClyIcebergShowMethodVersionCommand
	Receiver's instance variables: 
		tool: 	a ClyQueryBrowser(48120320)
		selectedItems: 	an Array(a ClyDataSourceItem(newImageNamed:withArguments:))


ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
	Receiver: a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)
	Arguments and temporary variables: 
		aToolContext: 	a ClyQueryBrowserContext
	Receiver's instance variables: 
		annotatedClass: 	ClyIcebergShowMethodVersionCommand
		declarationSelector: 	#methodBrowserTabActivation
		priority: 	0
		activeContext: 	a ClyBrowserItemContext
		menuItemOrder: 	1000
		menuGroup: 	CmdRootMenuGroup
		menuItemName: 	nil


CmdCommandActivator>>canExecuteCommand
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandActivator>>buildBrowserTabActions
	Receiver: a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		command: 	a ClyIcebergShowMethodVersionCommand
		context: 	a ClyQueryBrowserContext
		activationStrategy: 	a ClyBrowserTabCommandActivation(CmdRootMenuGroup; 1000)


CmdCommandMenuItem>>buildBrowserTabActions
	Receiver: a CmdCommandMenuItem(History)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	a CmdRootMenuGroup
		activator: 	a CmdCommandActivator(a ClyIcebergShowMethodVersionCommand)


[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
		each: 	a CmdCommandMenuItem(History)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(OrderedCollection)>>do:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | col addAll: (aBlock value: each) ]
		index: 	6
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection(Collection)>>flatCollect:as:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
		aCollectionClass: 	OrderedCollection
		col: 	an OrderedCollection(a TabAction)
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


SortedCollection>>flatCollect:
	Receiver: a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a CmdCommandMenuItem(Hi...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | each buildBrowserTabActions ]
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil a CmdCommandMenuItem(Copy name(s) to Clipboard)...etc...
		firstIndex: 	5
		lastIndex: 	10
		sortBlock: 	[ :a :b | 
a order = b order
	ifTrue: [ a name <= b name ]
	ifFalse:...etc...


CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
	Receiver: a CmdRootMenuGroup
	Arguments and temporary variables: 

	Receiver's instance variables: 
		parentGroup: 	nil
		contents: 	a SortedCollection(a CmdCommandMenuItem(Copy name(s) to Clipboard) a ...etc...
		name: 	nil


CmdMenu>>buildBrowserTabActions
	Receiver: a CmdMenu
	Arguments and temporary variables: 

	Receiver's instance variables: 
		rootGroup: 	a CmdRootMenuGroup
		activationStrategyClass: 	ClyBrowserTabCommandActivation


ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
	Receiver: a ClyMethodCodeEditorToolMorph(102535680)
	Arguments and temporary variables: 
		menu: 	a CmdMenu
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (226137088)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(48120320)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


ClyTabManager>>addTool:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBrowserTool: 	a ClyMethodCodeEditorToolMorph(102535680)
		tab: 	nil
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		each: 	a ClyMethodCodeEditorToolMorph(102535680)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
	Arguments and temporary variables: 
		aBlock: 	[ :each | self addTool: each ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyMethodCodeEditorToolMorph(102535680) nil nil nil nil nil n...etc...
		firstIndex: 	1
		lastIndex: 	1


ClyTabManager>>updateTabsWith:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		toRemove: 	an OrderedCollection()
		toInstall: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


BlockClosure>>ensure:
	Receiver: [ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildTo...etc...
	Arguments and temporary variables: 
		aBlock: 	[ updatingStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyTabManager>>updateTools
		startpc: 	122
		numArgs: 	0


ClyTabManager>>updateToolsBy:
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		aBlock: 	[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :...etc...
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		needsNewSelection: 	false
		newTools: 	an OrderedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		currentTools: 	a SortedCollection()
		selectedTools: 	a SortedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyTabManager>>updateToolsForChangedEnvironment
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		currentState: 	an OrderedCollection()
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	true
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser>>rebuildToolsForChangedEnvironment
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


BlockClosure>>ensure:
	Receiver: [ self rebuildToolsForChangedEnvironment ]
	Arguments and temporary variables: 
		aBlock: 	[ navigationStarted := false ]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
		startpc: 	59
		numArgs: 	0


ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>itemsChangedIn:
	Receiver: a ClyQueryViewMorph(673286656)
	Arguments and temporary variables: 
		aDataSource: 	a ClyCollapsedDataSource
		selectionWasEmpty: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(1023407104)
		submorphs: 	an Array(a FTTableMorph(944602112))
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (656441856)
		table: 	a FTTableMorph(944602112)
		browser: 	a ClyQueryBrowser(48120320)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyCollapsedDataSource(ClyDataSource)>>runUpdate
	Receiver: a ClyCollapsedDataSource
	Arguments and temporary variables: 

	Receiver's instance variables: 
		table: 	a FTTableMorph(944602112)
		query: 	a ClyAsyncQuery(methods sources with 'setMyCurrentThread', class comment...etc...
		itemCursor: 	a ClyBrowserQueryCursor(a ClyUnionQuery(methods sources with 'setMy...etc...
		depth: 	0
		parentItem: 	nil
		lastFilteredDataSource: 	nil
		queryView: 	a ClyQueryViewMorph(673286656)
		dirty: 	false
		expandedItems: 	a SortedCollection()


[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
	Receiver: a ClyDataSourceUpdateScheduler
	Arguments and temporary variables: 
		dataSources: 	an OrderedCollection(a ClyCollapsedDataSource)
		each: 	a ClyCollapsedDataSource
	Receiver's instance variables: 
		updateQueue: 	AtomicSharedQueue with 0 items
		process: 	a Process in AtomicSharedQueue>>waitForNewItems


OrderedCollection>>do:
	Receiver: an OrderedCollection(a ClyCollapsedDataSource)
	Arguments and temporary variables: 
		aBlock: 	[ :each | each runUpdate ]
		index: 	1
	Receiver's instance variables: 
		array: 	an Array(a ClyCollapsedDataSource nil nil nil nil nil nil nil nil nil)
		firstIndex: 	1
		lastIndex: 	1



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #name
[ :each | each includesPackageNamed: aPackage name ] in IceRepository class>>registeredRepositoryIncludingPackage:
[ :each | 
(aBlock value: each)
	ifTrue: [ ^ foundBlock cull: each ] ] in OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection>>do:
OrderedCollection(Collection)>>detect:ifFound:ifNone:
OrderedCollection(Collection)>>detect:ifNone:
IceRepository class>>registeredRepositoryIncludingPackage:
ClyIcebergShowMethodVersionCommand class>>canBeExecutedInContext:
ClyQueryBrowserContext(CmdToolContext)>>allowsExecutionOf:
ClyBrowserTabCommandActivation(CmdCommandActivationStrategy)>>isActiveInContext:
CmdCommandActivator>>canExecuteCommand
CmdCommandActivator>>buildBrowserTabActions
CmdCommandMenuItem>>buildBrowserTabActions
[ :each | each buildBrowserTabActions ] in CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
[ :each | col addAll: (aBlock value: each) ] in SortedCollection(Collection)>>flatCollect:as:
SortedCollection(OrderedCollection)>>do:
SortedCollection(Collection)>>flatCollect:as:
SortedCollection>>flatCollect:
CmdRootMenuGroup(CmdMenuGroup)>>buildBrowserTabActions
CmdMenu>>buildBrowserTabActions
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>createTab
ClyTabManager>>addTool:
[ :each | self addTool: each ] in ClyTabManager>>updateTabsWith:
OrderedCollection>>do:
ClyTabManager>>updateTabsWith:
[ newTools := OrderedCollection new.
browser
	navigationContextsDo: [ :each | self buildToolsOn: newTools for: each ].
needsNewSelection := self requiresNewDesiredSelection.
selectedTools := self selectedTools.
currentTools := tools copy.
self updateTabsWith: newTools.
tools ~= currentTools | needsNewSelection
	ifTrue: [ self restoreSelectedTools: selectedTools ] ] in ClyTabManager>>updateTools
BlockClosure>>ensure:
ClyTabManager>>updateToolsBy:
ClyTabManager>>updateTools
ClyTabManager>>updateToolsForChangedEnvironment
ClyQueryBrowser(ClyBrowserMorph)>>rebuildToolsForChangedEnvironment
ClyQueryBrowser>>rebuildToolsForChangedEnvironment
[ self rebuildToolsForChangedEnvironment ] in ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
BlockClosure>>ensure:
ClyQueryBrowser(ClyBrowserMorph)>>itemsChanged
ClyQueryViewMorph>>itemsChangedIn:
ClyCollapsedDataSource(ClyDataSource)>>runUpdate
[ :each | each runUpdate ] in [ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
OrderedCollection>>do:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ dataSources do: [ :each | each runUpdate ] ] in ClyDataSourceUpdateScheduler>>runUpdateFor:
WorldState>>runStepMethodsIn:
WorldMorph>>runStepMethods
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
WorldMorph>>doOneCycle
WorldMorph class>>doOneCycle
[ [ WorldMorph doOneCycle.
Processor yield.
false ] whileFalse: [  ] ] in MorphicUIManager>>spawnNewProcess
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE
#selected was sent to nil
13 November 2019 1:39:14.006917 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

UndefinedObject(Object)>>doesNotUnderstand: #selected
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	selected
		exception: 	MessageNotUnderstood: receiver of "selected" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
	Receiver: a ClyMethodCodeEditorToolMorph(102535680)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (850@40)
		owner: 	nil
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color transparent
		extension: 	a MorphExtension (226137088)
		borderWidth: 	0
		borderColor: 	Color black
		browser: 	a ClyQueryBrowser(48120320)
		context: 	a ClyQueryBrowserContext
		decorators: 	an OrderedCollection(a ClyCriticDecorator)
		containerTab: 	nil
		isDirty: 	false
		isManagedByUser: 	false
		statusBar: 	nil
		textModel: 	nil
		textMorph: 	nil
		changesCancelRequested: 	false
		applyingChanges: 	false
		methodTags: 	#()
		extendingPackage: 	nil
		targetClasses: 	nil
		editingMethod: 	InterpreterPrimitives>>#newImageNamed:withArguments:


[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 
		each: 	a ClyMethodCodeEditorToolMorph(102535680)
	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


SortedCollection(OrderedCollection)>>select:
	Receiver: a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
	Arguments and temporary variables: 
		selectBlock: 	[ :each | each isTabSelected ]
		newCollection: 	a SortedCollection()
		element: 	a ClyMethodCodeEditorToolMorph(102535680)
		index: 	10
	Receiver's instance variables: 
		array: 	an Array(nil nil nil nil nil nil nil nil nil a ClyMethodCodeEditorToolMo...etc...
		firstIndex: 	10
		lastIndex: 	10
		sortBlock: 	[ :a :b | a tabOrder <= b tabOrder ]


ClyTabManager>>selectedTools
	Receiver: a ClyTabManager
	Arguments and temporary variables: 

	Receiver's instance variables: 
		browser: 	a ClyQueryBrowser(48120320)
		tools: 	a SortedCollection(a ClyMethodCodeEditorToolMorph(102535680))
		tabMorph: 	a TabManagerMorph(563950080)
		updatingStarted: 	false
		selectionPriorities: 	an IdentityDictionary()
		desiredSelection: 	an IdentitySet(ClyMethodCodeEditorToolMorph)
		shouldSkipCurrentDesiredSelection: 	false


ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(48120320)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState>>retrieveStateFrom:
	Receiver: a ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(48120320)
	Receiver's instance variables: 
		viewStates: 	an OrderedCollection(a ClyQueryViewState)
		selectedTabs: 	nil
		systemScope: 	a ClySystemEnvironmentScope(current image)
		activeScope: 	nil
		methodQuery: 	nil
		queryScopes: 	nil
		expectedFlatQueryResult: 	nil


ClyQueryBrowserState class(ClyBrowserState class)>>of:
	Receiver: ClyQueryBrowserState
	Arguments and temporary variables: 
		aBrowser: 	a ClyQueryBrowser(48120320)
	Receiver's instance variables: 
		superclass: 	ClyBrowserState
		methodDict: 	a MethodDictionary(#activeScope->ClyQueryBrowserState>>#activeScope...etc...
		format: 	65543
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	nil
		name: 	#ClyQueryBrowserState
		classPool: 	a Dictionary()
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Calypso-SystemTools-QueryBrowser-UI'


ClyQueryBrowser>>snapshotState
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 
		navigationFailed: 	false
		aBlock: 	[ aBlock value.
aQueryView changesWasInitiatedByUser
	ifTrue: [ newTool...etc...
		state: 	nil
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
	Receiver: a ClyQueryBrowser(48120320)
	Arguments and temporary variables: 
		newTools: 	nil
		aQueryView: 	a ClyQueryViewMorph(673286656)
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@686.0)
		owner: 	a SystemWindow(421825536) named: Loading: methods sources with 'setMyCur...etc...
		submorphs: 	an Array(a ProportionalSplitterMorph(665631232) a PanelMorph(1023407...etc...
		fullBounds: 	(25@66) corner: (875@686)
		color: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000000001...etc...
		extension: 	a MorphExtension (135607296) [sticky]  [other:  (announcer -> an Ann...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.8230000000000001 g: 0.8230000000000001 b: 0.8230000000...etc...
		navigationPanel: 	a PanelMorph(1023407104)
		navigationViews: 	an OrderedCollection(a ClyQueryViewMorph(673286656))
		toolPanel: 	a PanelMorph(392603136)
		toolbar: 	a ClyToolbarMorph(840175104)
		tabManager: 	a ClyTabManager
		navigationHistory: 	a ClyNavigationHistory
		navigationStarted: 	true
		plugins: 	a SortedCollection(a ClyStandardBrowserPlugin a ClyMonticelloBrowserPl...etc...
		navigationEnvironment: 	a ClyNavigationEnvironment
		systemScope: 	a ClySystemEnvironmentScope(current image)
		resultView: 	a ClyQueryViewMorph(673286656)
		systemQuery: 	a ClyUnionQuery(methods sources with 'setMyCurrentThread', class c...etc...
		queryScopes: 	an OrderedCollection(a ClySystemEnvironmentScope(current image) a ...etc...
		activeScope: 	a ClySystemEnvironmentScope(current image)
		expectedFlatQueryResult: 	a ClySortedQueryResult


ClyQueryViewMorph>>changeStateBy:
	Receiver: a ClyQueryViewMorph(673286656)
	Arguments and temporary variables: 
		aBlock: 	[ self isFilterChanged
	ifTrue: [ selectionIsChanged := self updateSele...etc...
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(1023407104)
		submorphs: 	an Array(a FTTableMorph(944602112))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (656441856)
		table: 	a FTTableMorph(944602112)
		browser: 	a ClyQueryBrowser(48120320)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


ClyQueryViewMorph>>selectionChanged
	Receiver: a ClyQueryViewMorph(673286656)
	Arguments and temporary variables: 
		selectionIsChanged: 	true
	Receiver's instance variables: 
		bounds: 	(25.0@66.0) corner: (875.0@346.0)
		owner: 	a PanelMorph(1023407104)
		submorphs: 	an Array(a FTTableMorph(944602112))
		fullBounds: 	(25@66) corner: (875@346)
		color: 	Color transparent
		extension: 	a MorphExtension (656441856)
		table: 	a FTTableMorph(944602112)
		browser: 	a ClyQueryBrowser(48120320)
		treeStructure: 	#()
		selection: 	a ClyDataSourceSelection(newImageNamed:withArguments:)
		desiredSelection: 	a ClyDesiredSelection(newImageNamed:withArguments:)
		shouldRestoreSelection: 	true
		highlighting: 	a ClyHighlightingSelection()
		changesWasInitiatedByUser: 	true
		navigationSelector: 	nil


MessageSend>>value
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(673286656)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))
	Arguments and temporary variables: 
		arg: 	a FTSelectionChanged
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(673286656)
		selector: 	#selectionChanged
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))
	Arguments and temporary variables: 
		arg1: 	a FTSelectionChanged
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a ClyQueryViewMorph(673286656)
		selector: 	#selectionChanged
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a FTSelectionChanged
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	FTSelectionChanged
		subscriber: 	a ClyQueryViewMorph(673286656)
		action: 	MessageSend(#selectionChanged -> a ClyQueryViewMorph(673286656))


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
<<error during printing>
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #selected
ClyMethodCodeEditorToolMorph(ClyBrowserToolMorph)>>isTabSelected
[ :each | each isTabSelected ] in ClyTabManager>>selectedTools
SortedCollection(OrderedCollection)>>select:
ClyTabManager>>selectedTools
ClyQueryBrowserState(ClyBrowserState)>>retrieveStateFrom:
ClyQueryBrowserState>>retrieveStateFrom:
ClyQueryBrowserState class(ClyBrowserState class)>>of:
ClyQueryBrowser>>snapshotState
ClyQueryBrowser(ClyBrowserMorph)>>changeStateBy:
ClyQueryBrowser(ClyBrowserMorph)>>changeStateOf:by:
ClyQueryViewMorph>>changeStateBy:
ClyQueryViewMorph>>selectionChanged
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
[ Processor terminateActive ] in [ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx := thisContext.
thisCtx := onDoCtx home.

"find the context on stack for which this method's is sender"
[ onDoCtx sender == thisCtx ]
	whileFalse: [ onDoCtx := onDoCtx sender.
		onDoCtx
			ifNil: [ "Can't find our home context. seems like we're already forked
				and handling another exception in new thread. In this case, just pass it through handler." ^ handlerAction cull: ex ] ].
bottom := [ Processor terminateActive ] asContext.
onDoCtx privSender: bottom.
handler := [ handlerAction cull: ex ] asContext.
handler privSender: thisContext sender.
(Process forContext: handler priority: Processor activePriority)
	resume.

"cut the stack of current process"
thisContext privSender: thisCtx.
nil ] in BlockClosure>>on:fork:
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:40:15.415407 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in Process>>terminate
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	Process>>terminate
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in Process>>terminate


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(373354496)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@107)
		owner: 	a TransformWithLayoutMorph(24483840)
		submorphs: 	an Array(a RubCursor(590522880) a RubPrimarySelectionMorph(979389952...etc...
		fullBounds: 	(0@0) corner: (1408@107)
		color: 	Color transparent
		extension: 	a MorphExtension (325053952) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(258393600)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(590522880)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(373354496)
	Receiver's instance variables: 
		bounds: 	(711@584) corner: (727@600)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(711@584) mouseOver 14245204 nil]
		targetOffset: 	(286@38)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14245204 711 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(711@584) corner: (727@600)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(711@584) mouseOver 14245204 nil]
		targetOffset: 	(286@38)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14245204 711 584 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	14246514
		lastStepMessage: 	nil
		lastCycleTime: 	14246537
		alarms: 	a Heap()
		lastAlarmTime: 	14246514
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:46:49.586215 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	4
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	4
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(823261184)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@126)
		owner: 	a TransformWithLayoutMorph(316264448)
		submorphs: 	an Array(a RubCursor(827165696) a RubPrimarySelectionMorph(975346176...etc...
		fullBounds: 	(0@0) corner: (1408@126)
		color: 	Color transparent
		extension: 	a MorphExtension (441146368) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(436162048)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(827165696)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(823261184)
	Receiver's instance variables: 
		bounds: 	(393@553) corner: (409@569)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(393@553) mouseOver 14639334 nil]
		targetOffset: 	(289@37)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14639334 393 553 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(393@553) corner: (409@569)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(393@553) mouseOver 14639334 nil]
		targetOffset: 	(289@37)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 14639334 393 553 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	14640818
		lastStepMessage: 	nil
		lastCycleTime: 	14640841
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(827165696)))
		lastAlarmTime: 	14640818
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 1:55:44.884464 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (534200832) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(707623936)
	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	15176143
		lastStepMessage: 	nil
		lastCycleTime: 	15176166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1055244800)))
		lastAlarmTime: 	15176143
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	false
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	false
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self managedServers do: [ :each ...etc...
		id: 	nil
		creationTime: 	2019-11-13T09:42:48.542354+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	false
		snapshotResult: 	false
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

THERE_BE_DRAGONS_HERE

13 November 2019 2:20:03.529833 pm

VM: Mac OS - x64 - 1014.5 - CoInterpreter VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
StackToRegisterMappingCogit VMMaker.oscog-eem.2504 uuid: a00b0fad-c04c-47a6-8a11-5dbff110ac11 Jan  5 2019
VM: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git Date: Sat Jan 5 20:00:11 2019 CommitHash: 7a3c6b6 Plugins: 201901051900 https://github.com/OpenSmalltalk/opensmalltalk-vm.git

Image: Pharo7.0.4 [Build information: Pharo-7.0.4+build.168.sha.ccd1f6489120f58ddeacb2cac77cd3a0f0dcfbe6 (64 Bit)]

Process>>terminate
	Receiver: a Process in [ self value.
Processor terminateActive ] in BlockClosure>>newProcess
	Arguments and temporary variables: 
		ctxt: 	nil
		unwindBlock: 	nil
		oldList: 	nil
	Receiver's instance variables: 
		nextLink: 	nil
		suspendedContext: 	[ self value.
Processor terminateActive ] in BlockClosure>>ne...etc...
		priority: 	40
		myList: 	nil
		name: 	nil
		env: 	nil
		effectiveProcess: 	nil
		terminating: 	true
		level: 	nil


NECController>>stopCompletionDelay
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


NECController>>closeMenu
	Receiver: a NECController
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a RubScrolledTextModel
		menuMorph: 	nil
		editor: 	a ClyTextEditor
		context: 	nil
		inverseMapping: 	a Dictionary($"->$" $'->$' $)->$( $>->$< $]->$[ $|->$| $}->${ )...etc...
		completionDelay: 	a Process in [ self value.
Processor terminateActive ] in Bloc...etc...


MessageSend>>value
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg: 	a MorphLostFocus
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


MessageSend>>cull:cull:
	Receiver: MessageSend(#closeMenu -> a NECController)
	Arguments and temporary variables: 
		arg1: 	a MorphLostFocus
		arg2: 	an Announcer
	Receiver's instance variables: 
		receiver: 	a NECController
		selector: 	#closeMenu
		arguments: 	#()


[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


BlockClosure>>on:do:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | 
| copy onDoCtx process handler bottom thisCtx |
onDoCtx...etc...
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


BlockClosure>>on:fork:
	Receiver: [ action cull: anAnnouncement cull: announcer ]
	Arguments and temporary variables: 
		exception: 	UnhandledError
		handlerAction: 	[ :ex | ex pass ]
	Receiver's instance variables: 
		outerContext: 	AnnouncementSubscription>>deliver:
		startpc: 	83
		numArgs: 	0


AnnouncementSubscription>>deliver:
	Receiver: an AnnouncementSubscription
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		announcer: 	an Announcer
		announcementClass: 	MorphLostFocus
		subscriber: 	a NECController
		action: 	MessageSend(#closeMenu -> a NECController)


[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		index: 	3
		subscription: 	an AnnouncementSubscription
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


BlockClosure>>ifCurtailed:
	Receiver: [ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ]
	Arguments and temporary variables: 
		aBlock: 	[ self deliver: anAnnouncement to: subs startingAt: index + 1 ]
		complete: 	nil
		result: 	nil
	Receiver's instance variables: 
		outerContext: 	SubscriptionRegistry>>deliver:to:startingAt:
		startpc: 	82
		numArgs: 	0


SubscriptionRegistry>>deliver:to:startingAt:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
		startIndex: 	1
		subscription: 	an AnnouncementSubscription
		index: 	3
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:to:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		subs: 	an Array(an AnnouncementSubscription an AnnouncementSubscription an Annou...etc...
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


SubscriptionRegistry>>deliver:
	Receiver: a SubscriptionRegistry
	Arguments and temporary variables: 
		interestedSubscriptions: 	an Array(an AnnouncementSubscription an AnnouncementSu...etc...
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		subscriptions: 	an IdentitySet(an AnnouncementSubscription an AnnouncementSubscr...etc...
		monitor: 	a Semaphore()


Announcer>>announce:
	Receiver: an Announcer
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		registry: 	a SubscriptionRegistry


RubEditingArea(Morph)>>doAnnounce:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		anAnnouncement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>announceKeyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
		announcement: 	a MorphLostFocus
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(Morph)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		gotFocus: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
	Receiver: a RubEditingArea(707623936)
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1408@240)
		owner: 	a TransformWithLayoutMorph(273738752)
		submorphs: 	an Array(a RubCursor(1055244800) a RubPrimarySelectionMorph(40305305...etc...
		fullBounds: 	(0@0) corner: (1408@240)
		color: 	Color transparent
		extension: 	a MorphExtension (199764736) [other:  (announcer -> an Announcer) (k...etc...
		model: 	a RubScrolledTextModel
		paragraph: 	a RubShoutStylerDecorator
		editor: 	a ClyTextEditor
		scrollPane: 	a RubTextScrollPane(818844160)
		editingState: 	a RubEditingState
		textStyle: 	a TextStyle Source Code Pro
		textColor: 	Color black
		margins: 	a Margin top: 6 left: 6 bottom: 6 right: 6
		readOnly: 	false
		menuAllowed: 	nil
		editingMode: 	a ClyTextEditingMode
		cursor: 	a RubCursor(1055244800)
		segments: 	an OrderedCollection()
		getMenuPolicy: 	nil
		mouseDownPoint: 	nil
		wrapped: 	true
		editorClass: 	ClyTextEditor


HandMorph>>newKeyboardFocus:
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 
		aMorphOrNil: 	nil
		oldFocus: 	a RubEditingArea(707623936)
	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


HandMorph>>releaseKeyboardFocus
	Receiver: a HandMorph(1030685184)
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(1050@797) corner: (1066@813)
		owner: 	a WorldMorph(479349760) [world]
		submorphs: 	#()
		fullBounds: 	nil
		color: 	Color blue
		extension: 	a MorphExtension (623352320)
		mouseFocus: 	nil
		keyboardFocus: 	nil
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[(1050@797) mouseOver 15149696 nil]
		targetOffset: 	(366@201)
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	false
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		lastEventBuffer: 	#(1 15149696 1050 797 0 0 0 1)
		lastKeyScanCode: 	1
		combinedChar: 	nil
		eventSource: 	nil
		lastSystemEvent: 	nil
		captureBlock: 	nil
		recentModifiers: 	9


[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
		hand: 	a HandMorph(1030685184)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(1030685184))
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
		index: 	1
	Receiver's instance variables: 
an Array(a HandMorph(1030685184))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[ :hand | hand releaseKeyboardFocus ]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(1030685184))
		viewBox: 	(0@0) corner: (1440@772)
		canvas: 	nil
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a DropListMorph(480666112))(a DropList...etc...
		lastStepTime: 	15176143
		lastStepMessage: 	nil
		lastCycleTime: 	15176166
		alarms: 	a Heap(MorphicAlarm(#hideShow -> a RubCursor(1055244800)))
		lastAlarmTime: 	15176143
		menuBuilder: 	a PragmaMenuBuilder ( nil ) 
		activeHand: 	a HandMorph(1030685184)
		currentCursor: 	((CursorWithMask
	extent: (16@16)
	depth: 1
	fromArray: #(
		2r0...etc...


WorldMorph>>viewBox:
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 
		newViewBox: 	(0@0) corner: (1440@772)
	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
	Receiver: a WorldMorph(479349760) [world]
	Arguments and temporary variables: 

	Receiver's instance variables: 
		bounds: 	(0@0) corner: (1440@772)
		owner: 	nil
		submorphs: 	an Array(a MenubarMorph(783971328) a TaskbarMorph(810381824) a Syste...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.9400000000000001 g: 0.9400000000000001 b: 0.9400000000000001...etc...
		extension: 	a MorphExtension (1051472640) [other:  (dragEnabled -> true) (dropEn...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.861 g: 1.0 b: 0.722 alpha: 1.0)
		backgroundMorph: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil
		osWindow: 	nil
		osWindowMutex: 	nil
		session: 	nil


WorldMorph class>>startUp
	Receiver: WorldMorph
	Arguments and temporary variables: 
		world: 	a WorldMorph(479349760) [world]
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


WorldMorph class(Behavior)>>startUp:
	Receiver: WorldMorph
	Arguments and temporary variables: 
		resuming: 	true
	Receiver's instance variables: 
		superclass: 	PasteUpMorph
		methodDict: 	a MethodDictionary(#acceptDroppingMorph:event:->WorldMorph>>#accept...etc...
		format: 	65550
		layout: 	a FixedLayout
		organization: 	a ClassOrganization
		subclasses: 	{AthensWorldMorph. OSWindowWorldMorph}
		name: 	#WorldMorph
		classPool: 	a Dictionary(#AllowDropFiles->nil #CursorOwnerWorld->a WorldMorph(47...etc...
		sharedPools: 	an OrderedCollection()
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Morphic-Core-Worlds'
		announcer: 	nil
		displayScaleFactor: 	1


ClassSessionHandler>>startup:
	Receiver: a ClassSessionHandler(WorldMorph)
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		registeredClassName: 	#WorldMorph


[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


BlockClosure>>on:do:
	Receiver: [ aBlock value: each ]
	Arguments and temporary variables: 
		exception: 	Exception
		handlerAction: 	[ :error | self errorHandler handleError: error ]
	Receiver's instance variables: 
		outerContext: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | ...etc...
		startpc: 	69
		numArgs: 	0


[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
		each: 	a ClassSessionHandler(WorldMorph)
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


Array(SequenceableCollection)>>do:
	Receiver: an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...
	Arguments and temporary variables: 
		aBlock: 	[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self e...etc...
		index: 	48
	Receiver's instance variables: 
an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(SmallInteger) a Cla...etc...

WorkingSession>>runList:do:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		aList: 	an Array(a ClassSessionHandler(GlobalIdentifier) a ClassSessionHandler(S...etc...
		aBlock: 	[ :each | each startup: isImageStarting ]
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


WorkingSession>>runStartup:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


WorkingSession>>start:
	Receiver: a WorkingSession
	Arguments and temporary variables: 
		isImageStarting: 	true
	Receiver's instance variables: 
		manager: 	a SessionManager
		deferredStartupActions: 	an OrderedCollection([ self new activate ] [ self manag...etc...
		id: 	nil
		creationTime: 	2019-11-13T14:20:03.068724+01:00


SessionManager>>launchSnapshot:andQuit:
	Receiver: a SessionManager
	Arguments and temporary variables: 
		save: 	true
		quit: 	false
		isImageStarting: 	true
		snapshotResult: 	true
	Receiver's instance variables: 
		currentSession: 	a WorkingSession
		categories: 	an OrderedCollection(a SessionCategory(System) a SessionCategory(Ne...etc...
		guiCategory: 	a SessionCategory(Graphical User Interface)
		toolsCategory: 	a SessionCategory(Tools)
		networkCategory: 	a SessionCategory(Network)
		systemCategory: 	a SessionCategory(System)
		userCategory: 	a SessionCategory(User)



--- The full stack ---
Process>>terminate
NECController>>stopCompletionDelay
NECController>>closeMenu
MessageSend>>value
MessageSend>>cull:
MessageSend>>cull:cull:
[ action cull: anAnnouncement cull: announcer ] in AnnouncementSubscription>>deliver:
BlockClosure>>on:do:
BlockClosure>>on:fork:
AnnouncementSubscription>>deliver:
[ "Ensure delivery to remaining announcements" subscription deliver: anAnnouncement ] in SubscriptionRegistry>>deliver:to:startingAt:
BlockClosure>>ifCurtailed:
SubscriptionRegistry>>deliver:to:startingAt:
SubscriptionRegistry>>deliver:to:
SubscriptionRegistry>>deliver:
Announcer>>announce:
RubEditingArea(Morph)>>doAnnounce:
RubEditingArea(Morph)>>announceKeyboardFocusChange:
RubEditingArea(Morph)>>keyboardFocusChange:
RubEditingArea(RubAbstractTextArea)>>keyboardFocusChange:
HandMorph>>newKeyboardFocus:
HandMorph>>releaseKeyboardFocus
[ :hand | hand releaseKeyboardFocus ] in WorldMorph>>viewBox:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldMorph>>viewBox:
WorldMorph(PasteUpMorph)>>restoreMorphicDisplay
WorldMorph class>>startUp
WorldMorph class(Behavior)>>startUp:
ClassSessionHandler>>startup:
[ :each | each startup: isImageStarting ] in WorkingSession>>runStartup:
[ aBlock value: each ] in [ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
BlockClosure>>on:do:
[ :each | 
[ aBlock value: each ]
	on: Exception
	do: [ :error | self errorHandler handleError: error ] ] in WorkingSession>>runList:do:
Array(SequenceableCollection)>>do:
WorkingSession>>runList:do:
WorkingSession>>runStartup:
WorkingSession>>start:
SessionManager>>launchSnapshot:andQuit:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[ isImageStarting := self launchSnapshot: save andQuit: quit.
wait signal ] in SessionManager>>snapshot:andQuit:
[ self value.
Processor terminateActive ] in BlockClosure>>newProcess
-------------------------------------------------------------------------------

