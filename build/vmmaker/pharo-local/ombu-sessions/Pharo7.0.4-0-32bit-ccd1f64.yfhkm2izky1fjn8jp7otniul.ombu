OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T09:23:50.512219+01:00' ],		#prior : OmReference [ 'Pharo7.0.4-0-32bit-ccd1f64.6fhslcr09mlbkcxk9foeljs5i', '1' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Interpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\taCCodeGenerator addHeaderFile:\'<setjmp.h>\'.\r\tself declareInterpreterVersionIn: aCCodeGenerator\r\t\tdefaultName: \'Context\'.\r\taCCodeGenerator \r\t\tvar: #interpreterProxy \r\t\ttype: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void *primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex +2) printString, \' */] = \',\tself primitiveTableString.\r"\taCCodeGenerator\r\t\tvar: #primitiveFunctionPointer\r\t\tdeclareC: \'void *primitiveFunctionPointer\'.\tuse a better type than void *, apparently - tpr"\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #atCache\r\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'.\r\taCCodeGenerator var: #localIP type: #\'char*\'.\r\taCCodeGenerator var: #localSP type: #\'char*\'.\r\taCCodeGenerator var: #showSurfaceFn type: #\'void*\'.\r\taCCodeGenerator var: \'semaphoresToSignalA\'\r\t\tdeclareC: \'sqInt semaphoresToSignalA[SemaphoresToSignalSize + 1 /* \', (SemaphoresToSignalSize + 1) printString, \' */]\'.\r\taCCodeGenerator var: \'semaphoresToSignalB\'\r\t\tdeclareC: \'sqInt semaphoresToSignalB[SemaphoresToSignalSize + 1 /* \', (SemaphoresToSignalSize + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #compilerHooks\r\t\tdeclareC: \'sqInt (*compilerHooks[CompilerHooksSize + 1 /* \', (CompilerHooksSize + 1) printString, \' */])()\'.\r\taCCodeGenerator\r\t\tvar: #externalPrimitiveTable\r\t\tdeclareC: \'void *externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */]\'.\r\r\taCCodeGenerator\r\t\tvar: #jmpBuf\r\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #suspendedCallbacks\r\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #suspendedMethods\r\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsOop: {\r\t\t#instructionPointer. \r\t\t#method. \r\t\t#newMethod. \r\t\t#activeContext. \r\t\t#theHomeContext. \r\t\t#stackPointer\r\t} in: aCCodeGenerator.\r\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r',			#stamp : 'Pablo 10/30/2019 16:35',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'Interpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\taCCodeGenerator addHeaderFile:\'<setjmp.h>\'.\r\tself declareInterpreterVersionIn: aCCodeGenerator\r\t\tdefaultName: \'Context\'.\r\taCCodeGenerator \r\t\tvar: #interpreterProxy \r\t\ttype: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void *primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex +2) printString, \' */] = \',\tself primitiveTableString.\r\taCCodeGenerator\r\t\tvar: #primitiveFunctionPointer\r\t\tdeclareC: \'void *primitiveFunctionPointer\'.\t"use a better type than void *, apparently - tpr"\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #atCache\r\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'.\r\taCCodeGenerator var: #localIP type: #\'char*\'.\r\taCCodeGenerator var: #localSP type: #\'char*\'.\r\taCCodeGenerator var: #showSurfaceFn type: #\'void*\'.\r\taCCodeGenerator var: \'semaphoresToSignalA\'\r\t\tdeclareC: \'sqInt semaphoresToSignalA[SemaphoresToSignalSize + 1 /* \', (SemaphoresToSignalSize + 1) printString, \' */]\'.\r\taCCodeGenerator var: \'semaphoresToSignalB\'\r\t\tdeclareC: \'sqInt semaphoresToSignalB[SemaphoresToSignalSize + 1 /* \', (SemaphoresToSignalSize + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #compilerHooks\r\t\tdeclareC: \'sqInt (*compilerHooks[CompilerHooksSize + 1 /* \', (CompilerHooksSize + 1) printString, \' */])()\'.\r\taCCodeGenerator\r\t\tvar: #externalPrimitiveTable\r\t\tdeclareC: \'void *externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */]\'.\r\r\taCCodeGenerator\r\t\tvar: #jmpBuf\r\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #suspendedCallbacks\r\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\taCCodeGenerator\r\t\tvar: #suspendedMethods\r\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsOop: {\r\t\t#instructionPointer. \r\t\t#method. \r\t\t#newMethod. \r\t\t#activeContext. \r\t\t#theHomeContext. \r\t\t#stackPointer\r\t} in: aCCodeGenerator.\r\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r',			#stamp : 'Pablo 10/31/2019 09:23',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T09:25:09.39009+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\t| vmClass |\r\tself class == thisContext methodClass ifFalse: [^self]. "Don\'t duplicate decls in subclasses"\r\tvmClass := aCCodeGenerator vmClass. "Generate primitiveTable etc based on vmClass, not just StackInterpreter"\r\taCCodeGenerator\r\t\taddHeaderFile:\'<stddef.h> /* for e.g. alloca */\';\r\t\taddHeaderFile:\'<setjmp.h>\';\r\t\taddHeaderFile:\'<wchar.h> /* for wint_t */\';\r\t\taddHeaderFile:\'"vmCallback.h"\';\r\t\taddHeaderFile:\'"sqMemoryFence.h"\';\r\t\taddHeaderFile:\'"dispdbg.h"\'.\r\tLowcodeVM ifTrue: [ aCCodeGenerator addHeaderFile:\'"sqLowcodeFFI.h"\'].\r\r\tvmClass declareInterpreterVersionIn: aCCodeGenerator defaultName: \'Stack\'.\r\taCCodeGenerator\r\t\tvar: #interpreterProxy  type: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tdeclareVar: #sendTrace type: \'volatile int\';\r\t\tdeclareVar: #byteCount type: #usqInt;\r\t\tdeclareVar: #myCurrentThread type: \'pthread_t\';\r\t\tvar: #primitiveFunctionPointer declareC: \'void (*primitiveFunctionPointer)()\'.\r\t\t\r\t"These need to be pointers or unsigned."\r\tself declareC: #(instructionPointer method newMethod)\r\t\tas: #usqInt\r\t\tin: aCCodeGenerator.\r\t"These are all pointers; char * because Slang has no support for C pointer arithmetic."\r\tself declareC: #(localIP localSP localFP stackPointer framePointer stackLimit breakSelector)\r\t\tas: #\'char *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #breakSelectorLength\r\t\tdeclareC: \'sqInt breakSelectorLength = MinSmallInteger\'.\r\tself declareC: #(stackPage overflowedPage)\r\t\tas: #\'StackPage *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator removeVariable: \'stackPages\'.  "this is an implicit receiver in the translated code."\r\t"This defines bytecodeSetSelector as 0 if MULTIPLEBYTECODESETS\r\t is not defined, for the benefit of the interpreter on slow machines."\r\taCCodeGenerator addConstantForBinding: (self bindingOf: #MULTIPLEBYTECODESETS).\r\tMULTIPLEBYTECODESETS == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'bytecodeSetSelector\'].\r\tBytecodeSetHasExtensions == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'extA\';\r\t\t\tremoveVariable: \'extB\'].\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\tNewspeakVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #nsMethodCache\r\t\t\t\tdeclareC: \'sqIntptr_t nsMethodCache[NSMethodCacheSize + 1 /* \', (NSMethodCacheSize + 1) printString, \' */]\']\r\t\tifFalse:\r\t\t\t[aCCodeGenerator\r\t\t\t\tremoveVariable: #nsMethodCache;\r\t\t\t\tremoveVariable: \'localAbsentReceiver\';\r\t\t\t\tremoveVariable: \'localAbsentReceiverOrZero\'].\r\tAtCacheTotalSize isInteger ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tvar: #atCache\r\t\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'].\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void (*primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */])(void) = \', vmClass primitiveTableString.\r\tvmClass primitiveTable do:\r\t\t[:symbolOrNot|\r\t\t(symbolOrNot isSymbol\r\t\t and: [symbolOrNot ~~ #primitiveFail]) ifTrue:\r\t\t\t[(aCCodeGenerator methodNamed: symbolOrNot) ifNotNil:\r\t\t\t\t[:tMethod| tMethod returnType: #void]]].\r\tvmClass objectMemoryClass hasSpurMemoryManagerAPI\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #primitiveAccessorDepthTable\r\t\t\t\ttype: \'signed char\'\r\t\t\t\tsizeString: \'MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */\'\r\t\t\t\tarray: vmClass primitiveAccessorDepthTable]\r\t\tifFalse:\r\t\t\t[aCCodeGenerator removeVariable: #primitiveAccessorDepthTable].\r\taCCodeGenerator\r\t\tvar: #displayBits type: #\'void *\'.\r\tself declareC: #(displayWidth displayHeight displayDepth) as: #int in: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #externalPrimitiveTable\r\t\t\tdeclareC: \'void (*externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */])(void)\';\r\t\tvar: #interruptCheckChain\r\t\t\tdeclareC: \'void (*interruptCheckChain)(void) = 0\';\r\t\tvar: #showSurfaceFn\r\t\t\tdeclareC: \'int (*showSurfaceFn)(sqIntptr_t, int, int, int, int)\';\r\t\tvar: #jmpBuf\r\t\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedCallbacks\r\t\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedMethods\r\t\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsUSqLong: #(nextPollUsecs nextWakeupUsecs longRunningPrimitiveGCUsecs\r\t\t\t\t\t\t\t\tlongRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs\r\t\t\t\t\t\t\t\t"these are high-frequency enough that they\'re overflowing quite quickly on modern hardware"\r\t\t\t\t\t\t\t\tstatProcessSwitch statIOProcessEvents statForceInterruptCheck\r\t\t\t\t\t\t\t\tstatCheckForEvents statStackOverflow statStackPageDivorce\r\t\t\t\t\t\t\t\tstatIdleUsecs)\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r\taCCodeGenerator\r\t\tvar: #reenterInterpreter\r\t\tdeclareC: \'jmp_buf reenterInterpreter; /* private export */\'.\r\tLowcodeVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #lowcodeCalloutState type: #\'sqLowcodeCalloutState*\'.\r\t\t\t self declareC: #(nativeSP nativeStackPointer shadowCallStackPointer)\r\t\t\t\tas: #\'char *\'\r\t\t\t\tin: aCCodeGenerator]\r\t\tifFalse:\r\t\t\t[#(lowcodeCalloutState nativeSP nativeStackPointer shadowCallStackPointer) do:\r\t\t\t\t[:var| aCCodeGenerator removeVariable: var]]',			#stamp : 'Pablo 10/30/2019 17:04',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\t| vmClass |\r\tself class == thisContext methodClass ifFalse: [^self]. "Don\'t duplicate decls in subclasses"\r\tvmClass := aCCodeGenerator vmClass. "Generate primitiveTable etc based on vmClass, not just StackInterpreter"\r\taCCodeGenerator\r\t\taddHeaderFile:\'<stddef.h> /* for e.g. alloca */\';\r\t\taddHeaderFile:\'<setjmp.h>\';\r\t\taddHeaderFile:\'<wchar.h> /* for wint_t */\';\r\t\taddHeaderFile:\'"vmCallback.h"\';\r\t\taddHeaderFile:\'"sqMemoryFence.h"\';\r\t\taddHeaderFile:\'"dispdbg.h"\'.\r\tLowcodeVM ifTrue: [ aCCodeGenerator addHeaderFile:\'"sqLowcodeFFI.h"\'].\r\r\tvmClass declareInterpreterVersionIn: aCCodeGenerator defaultName: \'Stack\'.\r\taCCodeGenerator\r\t\tvar: #interpreterProxy  type: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tdeclareVar: #sendTrace type: \'volatile int\';\r\t\tdeclareVar: #byteCount type: #usqInt;\r\t\tdeclareVar: #myCurrentThread type: \'pthread_t\'.\r\t\t\r\t"These need to be pointers or unsigned."\r\tself declareC: #(instructionPointer method newMethod)\r\t\tas: #usqInt\r\t\tin: aCCodeGenerator.\r\t"These are all pointers; char * because Slang has no support for C pointer arithmetic."\r\tself declareC: #(localIP localSP localFP stackPointer framePointer stackLimit breakSelector)\r\t\tas: #\'char *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #breakSelectorLength\r\t\tdeclareC: \'sqInt breakSelectorLength = MinSmallInteger\'.\r\tself declareC: #(stackPage overflowedPage)\r\t\tas: #\'StackPage *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator removeVariable: \'stackPages\'.  "this is an implicit receiver in the translated code."\r\t"This defines bytecodeSetSelector as 0 if MULTIPLEBYTECODESETS\r\t is not defined, for the benefit of the interpreter on slow machines."\r\taCCodeGenerator addConstantForBinding: (self bindingOf: #MULTIPLEBYTECODESETS).\r\tMULTIPLEBYTECODESETS == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'bytecodeSetSelector\'].\r\tBytecodeSetHasExtensions == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'extA\';\r\t\t\tremoveVariable: \'extB\'].\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\tNewspeakVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #nsMethodCache\r\t\t\t\tdeclareC: \'sqIntptr_t nsMethodCache[NSMethodCacheSize + 1 /* \', (NSMethodCacheSize + 1) printString, \' */]\']\r\t\tifFalse:\r\t\t\t[aCCodeGenerator\r\t\t\t\tremoveVariable: #nsMethodCache;\r\t\t\t\tremoveVariable: \'localAbsentReceiver\';\r\t\t\t\tremoveVariable: \'localAbsentReceiverOrZero\'].\r\tAtCacheTotalSize isInteger ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tvar: #atCache\r\t\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'].\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void (*primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */])(void) = \', vmClass primitiveTableString.\r\tvmClass primitiveTable do:\r\t\t[:symbolOrNot|\r\t\t(symbolOrNot isSymbol\r\t\t and: [symbolOrNot ~~ #primitiveFail]) ifTrue:\r\t\t\t[(aCCodeGenerator methodNamed: symbolOrNot) ifNotNil:\r\t\t\t\t[:tMethod| tMethod returnType: #void]]].\r\tvmClass objectMemoryClass hasSpurMemoryManagerAPI\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #primitiveAccessorDepthTable\r\t\t\t\ttype: \'signed char\'\r\t\t\t\tsizeString: \'MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */\'\r\t\t\t\tarray: vmClass primitiveAccessorDepthTable]\r\t\tifFalse:\r\t\t\t[aCCodeGenerator removeVariable: #primitiveAccessorDepthTable].\r\taCCodeGenerator\r\t\tvar: #displayBits type: #\'void *\'.\r\tself declareC: #(displayWidth displayHeight displayDepth) as: #int in: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #externalPrimitiveTable\r\t\t\tdeclareC: \'void (*externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */])(void)\';\r\t\tvar: #interruptCheckChain\r\t\t\tdeclareC: \'void (*interruptCheckChain)(void) = 0\';\r\t\tvar: #showSurfaceFn\r\t\t\tdeclareC: \'int (*showSurfaceFn)(sqIntptr_t, int, int, int, int)\';\r\t\tvar: #jmpBuf\r\t\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedCallbacks\r\t\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedMethods\r\t\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsUSqLong: #(nextPollUsecs nextWakeupUsecs longRunningPrimitiveGCUsecs\r\t\t\t\t\t\t\t\tlongRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs\r\t\t\t\t\t\t\t\t"these are high-frequency enough that they\'re overflowing quite quickly on modern hardware"\r\t\t\t\t\t\t\t\tstatProcessSwitch statIOProcessEvents statForceInterruptCheck\r\t\t\t\t\t\t\t\tstatCheckForEvents statStackOverflow statStackPageDivorce\r\t\t\t\t\t\t\t\tstatIdleUsecs)\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r\taCCodeGenerator\r\t\tvar: #reenterInterpreter\r\t\tdeclareC: \'jmp_buf reenterInterpreter; /* private export */\'.\r\tLowcodeVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #lowcodeCalloutState type: #\'sqLowcodeCalloutState*\'.\r\t\t\t self declareC: #(nativeSP nativeStackPointer shadowCallStackPointer)\r\t\t\t\tas: #\'char *\'\r\t\t\t\tin: aCCodeGenerator]\r\t\tifFalse:\r\t\t\t[#(lowcodeCalloutState nativeSP nativeStackPointer shadowCallStackPointer) do:\r\t\t\t\t[:var| aCCodeGenerator removeVariable: var]]',			#stamp : 'Pablo 10/31/2019 09:25',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T10:03:02.327233+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tself haltIf: varName== \'primitiveFunctionPointer\'.\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : 'Pablo 10/31/2019 10:03',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T10:07:19.933674+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tself haltIf: varName== \'primitiveFunctionPointer\'.\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : 'Pablo 10/31/2019 10:03',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tself haltIf: varName == #primitiveFunctionPointer.\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : 'Pablo 10/31/2019 10:07',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T10:08:09.386066+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tself haltIf: varName == #primitiveFunctionPointer.\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : 'Pablo 10/31/2019 10:07',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tself haltIf: [varName == #primitiveFunctionPointer].\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : 'Pablo 10/31/2019 10:08',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T10:09:41.610275+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tself haltIf: [varName == #primitiveFunctionPointer].\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : 'Pablo 10/31/2019 10:08',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'var:declareC:',			#protocol : #public,			#sourceCode : 'var: varName declareC: declarationString\r\t"Record the given C declaration for a global variable."\r\r\t(declarationString includesSubstring: varName) ifFalse:\r\t\t[self error: \'declaration omits variable name.  probably an error.  use e.g. var:type:\'].\r\tvarName crLog.\r\tself haltIf: [varName == #primitiveFunctionPointer].\r\tvariableDeclarations at: varName asString put: declarationString.',			#stamp : 'Pablo 10/31/2019 10:09',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T10:16:38.420144+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'cFunctionNameFor:',			#protocol : #'C code generator',			#sourceCode : 'cFunctionNameFor: aSelector\r\t"Create a C function name from the given selector by finding\r\t a specific translation, or if none, simply omitting colons, and\r\t any trailing underscores (this supports a varargs convention)."\r\t^selectorTranslations\r\t\tat: aSelector\r\t\tifAbsent:\r\t\t\t[| cSelector |\r\t\t\t cSelector := aSelector copyWithout: $:.\r\t\t\t aSelector last = $: ifTrue:\r\t\t\t\t[[cSelector last = $_] whileTrue:\r\t\t\t\t\t[cSelector := cSelector allButLast]].\r\t\t\t cSelector]',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'cFunctionNameFor:',			#protocol : #'C code generator',			#sourceCode : 'cFunctionNameFor: aSelector\r\t"Create a C function name from the given selector by finding\r\t a specific translation, or if none, simply omitting colons, and\r\t any trailing underscores (this supports a varargs convention)."\r\tself haltIf: [aSelector == #primitiveFunctionPointer].\r\t^selectorTranslations\r\t\tat: aSelector\r\t\tifAbsent:\r\t\t\t[| cSelector |\r\t\t\t cSelector := aSelector copyWithout: $:.\r\t\t\t aSelector last = $: ifTrue:\r\t\t\t\t[[cSelector last = $_] whileTrue:\r\t\t\t\t\t[cSelector := cSelector allButLast]].\r\t\t\t cSelector]',			#stamp : 'Pablo 10/31/2019 10:16',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T10:17:18.01065+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'cFunctionNameFor:',			#protocol : #'C code generator',			#sourceCode : 'cFunctionNameFor: aSelector\r\t"Create a C function name from the given selector by finding\r\t a specific translation, or if none, simply omitting colons, and\r\t any trailing underscores (this supports a varargs convention)."\r\tself haltIf: [aSelector == #primitiveFunctionPointer].\r\t^selectorTranslations\r\t\tat: aSelector\r\t\tifAbsent:\r\t\t\t[| cSelector |\r\t\t\t cSelector := aSelector copyWithout: $:.\r\t\t\t aSelector last = $: ifTrue:\r\t\t\t\t[[cSelector last = $_] whileTrue:\r\t\t\t\t\t[cSelector := cSelector allButLast]].\r\t\t\t cSelector]',			#stamp : 'Pablo 10/31/2019 10:16',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #'cFunctionNameFor:',			#protocol : #'C code generator',			#sourceCode : 'cFunctionNameFor: aSelector\r\t"Create a C function name from the given selector by finding\r\t a specific translation, or if none, simply omitting colons, and\r\t any trailing underscores (this supports a varargs convention)."\r\tself halt.\r\t^selectorTranslations\r\t\tat: aSelector\r\t\tifAbsent:\r\t\t\t[| cSelector |\r\t\t\t cSelector := aSelector copyWithout: $:.\r\t\t\t aSelector last = $: ifTrue:\r\t\t\t\t[[cSelector last = $_] whileTrue:\r\t\t\t\t\t[cSelector := cSelector allButLast]].\r\t\t\t cSelector]',			#stamp : 'Pablo 10/31/2019 10:17',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-31T10:18:09.203052+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #initializeCTranslationDictionary,			#protocol : #'C translation support',			#sourceCode : 'initializeCTranslationDictionary \r\t"Initialize the dictionary mapping message names to actions for C code generation."\r\r\t| pairs |\r\t\r\ttranslationDict := Dictionary new: 200.\r\tpairs := #(\r\t#&\t\t\t\t#generateAnd:on:indent:\r\t#|\t\t\t\t#generateOr:on:indent:\r\t#abs\t\t\t#generateAbs:on:indent:\r\t#and:\t\t\t#generateSequentialAnd:on:indent:\r\t#or:\t\t\t#generateSequentialOr:on:indent:\r\t#not\t\t\t#generateNot:on:indent:\r\r\t#+\t\t\t\t#generatePlus:on:indent:\r\t#-\t\t\t\t#generateMinus:on:indent:\r\t#negated\t\t#generateNegated:on:indent:\r\t#*\t\t\t\t#generateTimes:on:indent:\r\t#/\t\t\t\t#generateDivide:on:indent:\r\t#//\t\t\t\t#generateDivide:on:indent:\r\t#\\\\\t\t\t\t#generateModulo:on:indent:\r\t#<<\t\t\t#generateShiftLeft:on:indent:\r\t#>>\t\t\t#generateShiftRight:on:indent:\r\t#>>>\t\t\t#generateSignedShiftRight:on:indent:\r\t#min:\t\t\t#generateMin:on:indent:\r\t#max:\t\t\t#generateMax:on:indent:\r\t#between:and:\t#generateBetweenAnd:on:indent:\r\r\t#bitAnd:\t\t\t#generateBitAnd:on:indent:\r\t#bitOr:\t\t\t\t#generateBitOr:on:indent:\r\t#bitXor:\t\t\t#generateBitXor:on:indent:\r\t#bitShift:\t\t\t#generateBitShift:on:indent:\r\t#signedBitShift:\t#generateSignedBitShift:on:indent:\r\t#bitInvert32\t\t#generateBitInvert:on:indent:\r\t#bitInvert64\t\t#generateBitInvert:on:indent:\r\t#bitClear:\t\t\t#generateBitClear:on:indent:\r\t#truncateTo:\t\t#generateTruncateTo:on:indent:\r\t#rounded\t\t\t#generateRounded:on:indent:\r\r\t#byteSwap32\t\t#generateByteSwap32:on:indent:\r\t#byteSwap64\t\t#generateByteSwap64:on:indent:\r\t#byteSwapped32IfBigEndian:\tgenerateByteSwap32IfBigEndian:on:indent:\r\t#byteSwapped64IfBigEndian:\tgenerateByteSwap64IfBigEndian:on:indent:\r\t\r\t#<\t\t\t\t#generateLessThan:on:indent:\r\t#<=\t\t\t#generateLessThanOrEqual:on:indent:\r\t#=\t\t\t\t#generateEqual:on:indent:\r\t#>\t\t\t\t#generateGreaterThan:on:indent:\r\t#>=\t\t\t#generateGreaterThanOrEqual:on:indent:\r\t#~=\t\t\t#generateNotEqual:on:indent:\r\t#==\t\t\t#generateEqual:on:indent:\r\t#~~\t\t\t#generateNotEqual:on:indent:\r\t#isNil\t\t\t#generateIsNil:on:indent:\r\t#notNil\t\t\t#generateNotNil:on:indent:\r\r\t#whileTrue: \t#generateWhileTrue:on:indent:\r\t#whileFalse:\t#generateWhileFalse:on:indent:\r\t#whileTrue \t#generateDoWhileTrue:on:indent:\r\t#whileFalse\t\t#generateDoWhileFalse:on:indent:\r\t#to:do:\t\t\t#generateToDo:on:indent:\r\t#to:by:do:\t\t#generateToByDo:on:indent:\r\t#repeat \t\t#generateRepeat:on:indent:\r\t#timesRepeat:\t#generateTimesRepeat:on:indent:\r\r\t#ifTrue:\t\t\t#generateIfTrue:on:indent:\r\t#ifFalse:\t\t#generateIfFalse:on:indent:\r\t#ifTrue:ifFalse:\t#generateIfTrueIfFalse:on:indent:\r\t#ifFalse:ifTrue:\t#generateIfFalseIfTrue:on:indent:\r\r\t#ifNotNil:\t\t#generateIfNotNil:on:indent:\r\t#ifNil:\t\t\t#generateIfNil:on:indent:\r\t#ifNotNil:ifNil:\t#generateIfNotNilIfNil:on:indent:\r\t#ifNil:ifNotNil:\t#generateIfNilIfNotNil:on:indent:\r\r\t#at:\t\t\t\t#generateAt:on:indent:\r\t#at:put:\t\t\t#generateAtPut:on:indent:\r\t#basicAt:\t\t#generateAt:on:indent:\r\t#basicAt:put:\t#generateAtPut:on:indent:\r\r\t#integerValueOf:\t\t\t#generateIntegerValueOf:on:indent:\r\t#integerObjectOf:\t\t\t#generateIntegerObjectOf:on:indent:\r\t#isIntegerObject: \t\t\t#generateIsIntegerObject:on:indent:\r\t#cCode:\t\t\t\t\t#generateInlineCCode:on:indent:\r\t#cCode:inSmalltalk:\t\t\t#generateInlineCCode:on:indent:\r\t#cPreprocessorDirective:\t#generateInlineCPreprocessorDirective:on:indent:\r\t#cppIf:ifTrue:ifFalse:\t\t#generateInlineCppIfElse:on:indent:\r\t#cppIf:ifTrue:\t\t\t\t#generateInlineCppIfElse:on:indent:\r\t#cCoerce:to:\t\t\t\t#generateCCoercion:on:indent:\r\t#cCoerceSimple:to:\t\t\t#generateCCoercion:on:indent:\r\t#addressOf:\t\t\t\t#generateAddressOf:on:indent:\r\t#addressOf:put:\t\t\t#generateAddressOf:on:indent:\r\t#asAddress:put:\t\t\t#generateAsAddress:on:indent:\r\t#signedIntFromLong64\t\t#generateSignedIntFromLong64:on:indent:\r\t#signedIntFromLong\t\t#generateSignedIntFromLong:on:indent:\r\t#signedIntFromShort\t\t#generateSignedIntFromShort:on:indent:\r\t#signedIntToLong64\t\t#generateSignedIntToLong64:on:indent:\r\t#signedIntToLong\t\t\t#generateSignedIntToLong:on:indent:\r\t#signedIntToShort\t\t\t#generateSignedIntToShort:on:indent:\r\t#preIncrement\t\t\t\t#generatePreIncrement:on:indent:\r\t#preDecrement\t\t\t#generatePreDecrement:on:indent:\r\t#inline:\t\t\t\t\t\t#generateInlineDirective:on:indent:\r\t#asFloat\t\t\t\t\t#generateAsFloat:on:indent:\r\t#asInteger\t\t\t\t\t#generateAsInteger:on:indent:\r\t#asIntegerPtr\t\t\t\t#generateAsIntegerPtr:on:indent:\r\t#asUnsignedInteger\t\t#generateAsUnsignedInteger:on:indent:\r\t#asUnsignedIntegerPtr\t\t#generateAsUnsignedIntegerPtr:on:indent:\r\t#asLong\t\t\t\t\t#generateAsLong:on:indent:\r\t#asUnsignedLong\t\t\t#generateAsUnsignedLong:on:indent:\r\t#asUnsignedLongLong\t\t#generateAsUnsignedLongLong:on:indent:\r\t#asVoidPointer\t\t\t\t#generateAsVoidPointer:on:indent:\r\t#asSymbol\t\t\t\t\t#generateAsSymbol:on:indent:\r\t#flag:\t\t\t\t\t\t#generateFlag:on:indent:\r\t#anyMask:\t\t\t\t\t#generateBitAnd:on:indent:\r\t#allMask:\t\t\t\t\t#generateAllMask:on:indent:\r\t#noMask:\t\t\t\t\t#generateNoMask:on:indent:\r\t#raisedTo:\t\t\t\t\t#generateRaisedTo:on:indent:\r\t#touch:\t\t\t\t\t\t#generateTouch:on:indent:\r\r\t#bytesPerOop \t\t\t\t#generateBytesPerOop:on:indent:\r\t#bytesPerWord \t\t\t#generateBytesPerWord:on:indent:\r\t#wordSize\t\t \t\t\t#generateBytesPerWord:on:indent:\r\t#baseHeaderSize\t\t\t#generateBaseHeaderSize:on:indent:\r\t#minSmallInteger\t\t\t#generateSmallIntegerConstant:on:indent:\r\t#maxSmallInteger\t\t\t#generateSmallIntegerConstant:on:indent:\r\t\r\t#sharedCodeNamed:inCase:\t\t#generateSharedCodeDirective:on:indent:\r\r\t#perform:\t\t\t\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:\t\t\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:with:\t\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:with:with:\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:with:with:with:\t\t#generatePerform:on:indent:\r\t#perform:with:with:with:with:with:\t#generatePerform:on:indent:\r\r\t#value\t\t\t\t\t\t\t\t#generateValue:on:indent:\r\t#value:\t\t\t\t\t\t\t\t#generateValue:on:indent:\r\t#value:value:\t\t\t\t\t\t#generateValue:on:indent:\r\t#value:value:value:\t\t\t\t\t#generateValue:on:indent:\r\t#value:value:value:value:\t\t\t#generateValue:on:indent:\r\t#value:value:value:value:value:\t\t\t#generateValue:on:indent:\r\t#value:value:value:value:value:value:\t#generateValue:on:indent:\r\r\t#deny:\t\t\t\t\t\t\t\t#generateDeny:on:indent:\r\r\t#shouldNotImplement\t\t\t\t#generateSmalltalkMetaError:on:indent:\r\t#shouldBeImplemented\t\t\t#generateSmalltalkMetaError:on:indent:\r\t#subclassResponsibility\t\t\t#generateSmalltalkMetaError:on:indent:\r\t).\r\r\t1 to: pairs size by: 2 do: [:i |\r\t\ttranslationDict at: (pairs at: i) put: (pairs at: i + 1)].\r\r\tpairs := #(\r\t#ifTrue:\t\t\t\t\t#generateIfTrueAsArgument:on:indent:\t\r\t#ifFalse:\t\t\t\t#generateIfFalseAsArgument:on:indent:\r\t#ifTrue:ifFalse:\t\t\t#generateIfTrueIfFalseAsArgument:on:indent:\r\t#ifFalse:ifTrue:\t\t\t#generateIfFalseIfTrueAsArgument:on:indent:\r\t#ifNotNil:\t\t\t\t#generateIfNotNilAsArgument:on:indent:\t\r\t#ifNil:\t\t\t\t\t#generateIfNilAsArgument:on:indent:\r\t#ifNotNil:ifNil:\t\t\t#generateIfNotNilIfNilAsArgument:on:indent:\r\t#ifNil:ifNotNil:\t\t\t#generateIfNilIfNotNilAsArgument:on:indent:\r\t#cCode:\t\t\t\t#generateInlineCCodeAsArgument:on:indent:\r\t#cCode:inSmalltalk:\t\t#generateInlineCCodeAsArgument:on:indent:\r\t#cppIf:ifTrue:ifFalse:\t#generateInlineCppIfElseAsArgument:on:indent:\r\t#cppIf:ifTrue:\t\t\t#generateInlineCppIfElseAsArgument:on:indent:\r\r\t#value\t\t\t\t\t#generateValueAsArgument:on:indent:\r\t#value:\t\t\t\t\t#generateValueAsArgument:on:indent:\r\t#value:value:\t\t\t#generateValueAsArgument:on:indent:\r\t).\r\r\tasArgumentTranslationDict := Dictionary new: 8.\r\t1 to: pairs size by: 2 do: [:i |\r\t\tasArgumentTranslationDict at: (pairs at: i) put: (pairs at: i + 1)].\r',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGenerator,				#isMetaSide : false			},			#name : #initializeCTranslationDictionary,			#protocol : #'C translation support',			#sourceCode : 'initializeCTranslationDictionary \r\t"Initialize the dictionary mapping message names to actions for C code generation."\r\r\t| pairs |\r\t\r\ttranslationDict := Dictionary new: 200.\r\tpairs := #(\r\t#&\t\t\t\t#generateAnd:on:indent:\r\t#|\t\t\t\t#generateOr:on:indent:\r\t#abs\t\t\t#generateAbs:on:indent:\r\t#and:\t\t\t#generateSequentialAnd:on:indent:\r\t#or:\t\t\t#generateSequentialOr:on:indent:\r\t#not\t\t\t#generateNot:on:indent:\r\r\t#+\t\t\t\t#generatePlus:on:indent:\r\t#-\t\t\t\t#generateMinus:on:indent:\r\t#negated\t\t#generateNegated:on:indent:\r\t#*\t\t\t\t#generateTimes:on:indent:\r\t#/\t\t\t\t#generateDivide:on:indent:\r\t#//\t\t\t\t#generateDivide:on:indent:\r\t#\\\\\t\t\t\t#generateModulo:on:indent:\r\t#<<\t\t\t#generateShiftLeft:on:indent:\r\t#>>\t\t\t#generateShiftRight:on:indent:\r\t#>>>\t\t\t#generateSignedShiftRight:on:indent:\r\t#min:\t\t\t#generateMin:on:indent:\r\t#max:\t\t\t#generateMax:on:indent:\r\t#between:and:\t#generateBetweenAnd:on:indent:\r\r\t#bitAnd:\t\t\t#generateBitAnd:on:indent:\r\t#bitOr:\t\t\t\t#generateBitOr:on:indent:\r\t#bitXor:\t\t\t#generateBitXor:on:indent:\r\t#bitShift:\t\t\t#generateBitShift:on:indent:\r\t#signedBitShift:\t#generateSignedBitShift:on:indent:\r\t#bitInvert32\t\t#generateBitInvert:on:indent:\r\t#bitInvert64\t\t#generateBitInvert:on:indent:\r\t#bitClear:\t\t\t#generateBitClear:on:indent:\r\t#truncateTo:\t\t#generateTruncateTo:on:indent:\r\t#rounded\t\t\t#generateRounded:on:indent:\r\r\t#byteSwap32\t\t#generateByteSwap32:on:indent:\r\t#byteSwap64\t\t#generateByteSwap64:on:indent:\r\t#byteSwapped32IfBigEndian:\tgenerateByteSwap32IfBigEndian:on:indent:\r\t#byteSwapped64IfBigEndian:\tgenerateByteSwap64IfBigEndian:on:indent:\r\t\r\t#<\t\t\t\t#generateLessThan:on:indent:\r\t#<=\t\t\t#generateLessThanOrEqual:on:indent:\r\t#=\t\t\t\t#generateEqual:on:indent:\r\t#>\t\t\t\t#generateGreaterThan:on:indent:\r\t#>=\t\t\t#generateGreaterThanOrEqual:on:indent:\r\t#~=\t\t\t#generateNotEqual:on:indent:\r\t#==\t\t\t#generateEqual:on:indent:\r\t#~~\t\t\t#generateNotEqual:on:indent:\r\t#isNil\t\t\t#generateIsNil:on:indent:\r\t#notNil\t\t\t#generateNotNil:on:indent:\r\r\t#whileTrue: \t#generateWhileTrue:on:indent:\r\t#whileFalse:\t#generateWhileFalse:on:indent:\r\t#whileTrue \t#generateDoWhileTrue:on:indent:\r\t#whileFalse\t\t#generateDoWhileFalse:on:indent:\r\t#to:do:\t\t\t#generateToDo:on:indent:\r\t#to:by:do:\t\t#generateToByDo:on:indent:\r\t#repeat \t\t#generateRepeat:on:indent:\r\t#timesRepeat:\t#generateTimesRepeat:on:indent:\r\r\t#ifTrue:\t\t\t#generateIfTrue:on:indent:\r\t#ifFalse:\t\t#generateIfFalse:on:indent:\r\t#ifTrue:ifFalse:\t#generateIfTrueIfFalse:on:indent:\r\t#ifFalse:ifTrue:\t#generateIfFalseIfTrue:on:indent:\r\r\t#ifNotNil:\t\t#generateIfNotNil:on:indent:\r\t#ifNil:\t\t\t#generateIfNil:on:indent:\r\t#ifNotNil:ifNil:\t#generateIfNotNilIfNil:on:indent:\r\t#ifNil:ifNotNil:\t#generateIfNilIfNotNil:on:indent:\r\r\t#at:\t\t\t\t#generateAt:on:indent:\r\t#at:put:\t\t\t#generateAtPut:on:indent:\r\t#basicAt:\t\t#generateAt:on:indent:\r\t#basicAt:put:\t#generateAtPut:on:indent:\r\r\t#integerValueOf:\t\t\t#generateIntegerValueOf:on:indent:\r\t#integerObjectOf:\t\t\t#generateIntegerObjectOf:on:indent:\r\t#isIntegerObject: \t\t\t#generateIsIntegerObject:on:indent:\r\t#cCode:\t\t\t\t\t#generateInlineCCode:on:indent:\r\t#cCode:inSmalltalk:\t\t\t#generateInlineCCode:on:indent:\r\t#cPreprocessorDirective:\t#generateInlineCPreprocessorDirective:on:indent:\r\t#cppIf:ifTrue:ifFalse:\t\t#generateInlineCppIfElse:on:indent:\r\t#cppIf:ifTrue:\t\t\t\t#generateInlineCppIfElse:on:indent:\r\t#cCoerce:to:\t\t\t\t#generateCCoercion:on:indent:\r\t#cCoerceSimple:to:\t\t\t#generateCCoercion:on:indent:\r\t#addressOf:\t\t\t\t#generateAddressOf:on:indent:\r\t#addressOf:put:\t\t\t#generateAddressOf:on:indent:\r\t#asAddress:put:\t\t\t#generateAsAddress:on:indent:\r\t#signedIntFromLong64\t\t#generateSignedIntFromLong64:on:indent:\r\t#signedIntFromLong\t\t#generateSignedIntFromLong:on:indent:\r\t#signedIntFromShort\t\t#generateSignedIntFromShort:on:indent:\r\t#signedIntToLong64\t\t#generateSignedIntToLong64:on:indent:\r\t#signedIntToLong\t\t\t#generateSignedIntToLong:on:indent:\r\t#signedIntToShort\t\t\t#generateSignedIntToShort:on:indent:\r\t#preIncrement\t\t\t\t#generatePreIncrement:on:indent:\r\t#preDecrement\t\t\t#generatePreDecrement:on:indent:\r\t#inline:\t\t\t\t\t\t#generateInlineDirective:on:indent:\r\t#asFloat\t\t\t\t\t#generateAsFloat:on:indent:\r\t#asInteger\t\t\t\t\t#generateAsInteger:on:indent:\r\t#asIntegerPtr\t\t\t\t#generateAsIntegerPtr:on:indent:\r\t#asUnsignedInteger\t\t#generateAsUnsignedInteger:on:indent:\r\t#asUnsignedIntegerPtr\t\t#generateAsUnsignedIntegerPtr:on:indent:\r\t#asLong\t\t\t\t\t#generateAsLong:on:indent:\r\t#asUnsignedLong\t\t\t#generateAsUnsignedLong:on:indent:\r\t#asUnsignedLongLong\t\t#generateAsUnsignedLongLong:on:indent:\r\t#asVoidPointer\t\t\t\t#generateAsVoidPointer:on:indent:\r\t#asSymbol\t\t\t\t\t#generateAsSymbol:on:indent:\r\t#flag:\t\t\t\t\t\t#generateFlag:on:indent:\r\t#anyMask:\t\t\t\t\t#generateBitAnd:on:indent:\r\t#allMask:\t\t\t\t\t#generateAllMask:on:indent:\r\t#noMask:\t\t\t\t\t#generateNoMask:on:indent:\r\t#raisedTo:\t\t\t\t\t#generateRaisedTo:on:indent:\r\t#touch:\t\t\t\t\t\t#generateTouch:on:indent:\r\r\t#bytesPerOop \t\t\t\t#generateBytesPerOop:on:indent:\r\t#bytesPerWord \t\t\t#generateBytesPerWord:on:indent:\r\t#wordSize\t\t \t\t\t#generateBytesPerWord:on:indent:\r\t#baseHeaderSize\t\t\t#generateBaseHeaderSize:on:indent:\r\t#minSmallInteger\t\t\t#generateSmallIntegerConstant:on:indent:\r\t#maxSmallInteger\t\t\t#generateSmallIntegerConstant:on:indent:\r\t\r\t#sharedCodeNamed:inCase:\t\t#generateSharedCodeDirective:on:indent:\r\r\t#perform:\t\t\t\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:\t\t\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:with:\t\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:with:with:\t\t\t\t#generatePerform:on:indent:\r\t#perform:with:with:with:with:\t\t#generatePerform:on:indent:\r\t#perform:with:with:with:with:with:\t#generatePerform:on:indent:\r\r\t#value\t\t\t\t\t\t\t\t#generateValue:on:indent:\r\t#value:\t\t\t\t\t\t\t\t#generateValue:on:indent:\r\t#value:value:\t\t\t\t\t\t#generateValue:on:indent:\r\t#value:value:value:\t\t\t\t\t#generateValue:on:indent:\r\t#value:value:value:value:\t\t\t#generateValue:on:indent:\r\t#value:value:value:value:value:\t\t\t#generateValue:on:indent:\r\t#value:value:value:value:value:value:\t#generateValue:on:indent:\r\r\t#deny:\t\t\t\t\t\t\t\t#generateDeny:on:indent:\r\r\t#shouldNotImplement\t\t\t\t#generateSmalltalkMetaError:on:indent:\r\t#shouldBeImplemented\t\t\t#generateSmalltalkMetaError:on:indent:\r\t#subclassResponsibility\t\t\t#generateSmalltalkMetaError:on:indent:\r\t).\r\r\t1 to: pairs size by: 2 do: [:i |\r\t\ttranslationDict at: (pairs at: i) put: (pairs at: i + 1)].\r\r\tpairs := #(\r\t#ifTrue:\t\t\t\t\t#generateIfTrueAsArgument:on:indent:\t\r\t#ifFalse:\t\t\t\t#generateIfFalseAsArgument:on:indent:\r\t#ifTrue:ifFalse:\t\t\t#generateIfTrueIfFalseAsArgument:on:indent:\r\t#ifFalse:ifTrue:\t\t\t#generateIfFalseIfTrueAsArgument:on:indent:\r\t#ifNotNil:\t\t\t\t#generateIfNotNilAsArgument:on:indent:\t\r\t#ifNil:\t\t\t\t\t#generateIfNilAsArgument:on:indent:\r\t#ifNotNil:ifNil:\t\t\t#generateIfNotNilIfNilAsArgument:on:indent:\r\t#ifNil:ifNotNil:\t\t\t#generateIfNilIfNotNilAsArgument:on:indent:\r\t#cCode:\t\t\t\t#generateInlineCCodeAsArgument:on:indent:\r\t#cCode:inSmalltalk:\t\t#generateInlineCCodeAsArgument:on:indent:\r\t#cppIf:ifTrue:ifFalse:\t#generateInlineCppIfElseAsArgument:on:indent:\r\t#cppIf:ifTrue:\t\t\t#generateInlineCppIfElseAsArgument:on:indent:\r\r\t#value\t\t\t\t\t#generateValueAsArgument:on:indent:\r\t#value:\t\t\t\t\t#generateValueAsArgument:on:indent:\r\t#value:value:\t\t\t#generateValueAsArgument:on:indent:\r\t).\r\r\tasArgumentTranslationDict := Dictionary new: 8.\r\t1 to: pairs size by: 2 do: [:i |\r\t\tasArgumentTranslationDict at: (pairs at: i) put: (pairs at: i + 1)].\r\tself halt.\r',			#stamp : 'Pablo 10/31/2019 10:18',			#package : #VMMaker		}	}}