OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T16:03:58.379309+01:00' ],		#prior : OmReference [ 'Pharo7.0.4-0-32bit-ccd1f64.24j2q2ky4f2vz77jikdh07yho', '2' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _: index\r\t<var: #aThread type: \'pthread_t\'>\r\t<var: #index type: \'size_t\'>\r\r\tself\r\t\tcCode: \'all_threads_global[index].MyCurrentThread=thread;\'\r\t\tinSmalltalk: [ myCurrentThread := aThread ]',			#stamp : 'Pablo 10/30/2019 15:54',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _: index\r\t<var: #aThread type: \'pthread_t\'>\r\t<var: #index type: \'size_t\'>\r\r\tself\r\t\tcCode: \'all_threads_global[index].MyCurrentThread=aThread;\'\r\t\tinSmalltalk: [ myCurrentThread := aThread ]',			#stamp : 'Pablo 10/30/2019 16:03',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T16:06:37.518099+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGeneratorGlobalStructure,				#isMetaSide : false			},			#name : #'emitCVariablesOn:',			#protocol : #'C code generator',			#sourceCode : 'emitCVariablesOn: aStream\r\t"Store the global variable declarations on the given stream.\r\t Break logic into vars for structure and vars for non-structure."\r\t| structure nonstruct |\r\r\tstructure := WriteStream on: (String new: 32768).\r\tnonstruct := WriteStream on: (String new: 32768).\r\taStream nextPutAll: \'/*** Variables ***/\'; cr.\r\tstructure\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT\'; cr;\r\t\tnextPutAll: \'# define _iss /* define in-struct static as void */\'; cr;\r\t\tnextPutAll: \'static struct foo {\'; cr;\r\t\tnextPutAll: \'#else\'; cr;\r\t\tnextPutAll: \'# define _iss static\'; cr;\r\t\tnextPutAll: \'#endif\'; cr.\r\tself buildSortedVariablesCollection do:\r\t\t[ :var | | decl varString inStruct target |\r\t\ttarget := (inStruct := self placeInStructure: (varString := var asString)) \r\t\t\t\t\tifTrue: [structure]\r\t\t\t\t\tifFalse: [nonstruct].\r\t\tdecl := variableDeclarations at: varString ifAbsent: [\'sqInt \' , varString].\r\t\tdecl first == $# "support cgen var: #bytecodeSetSelector declareC: \'#define bytecodeSetSelector 0\' hack"\r\t\t\tifTrue:\r\t\t\t\t[target nextPutAll: decl; cr]\r\t\t\tifFalse:\r\t\t\t\t[self isGeneratingPluginCode\r\t\t\t\t\tifTrue:\r\t\t\t\t\t\t[varString = \'interpreterProxy\'\r\t\t\t\t\t\t\tifTrue: "quite special..."\r\t\t\t\t\t\t\t\t[self preDeclareInterpreterProxyOn: target]\r\t\t\t\t\t\t\tifFalse: [target nextPutAll: \'static \']]\r\t\t\t\t\tifFalse:\r\t\t\t\t\t\t[(vmClass mustBeGlobal: varString) ifFalse:\r\t\t\t\t\t\t\t[target nextPutAll: (inStruct ifTrue: [\'_iss \'] ifFalse: [\'static \'])]].\r\t\t\t\ttarget nextPutAll: decl; nextPut: $;; cr]].\r\tstructure\r\t\tnextPutAll: \'#undef _iss\'; cr;\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT\'; cr;\r\t\tnextPutAll: \' } fum;\'; cr;\r\t\tnextPutAll: \' #if SQ_USE_GLOBAL_STRUCT_REG\';cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_SQ_GLOBAL_STRUCT /* using a global reg pointer */\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_VOLATILE_SQ_GLOBAL_STRUCT /* using a global reg pointer */\'; cr;\r\t\tnextPutAll:\'#else\';cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_SQ_GLOBAL_STRUCT register struct foo * foo = &fum;\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_VOLATILE_SQ_GLOBAL_STRUCT volatile register struct foo * foo = &fum;\'; cr;\r\t\tnextPutAll: \'#endif\';cr;\r\t\tnextPutAll: \'# define GIV(interpreterInstVar) (foo->interpreterInstVar)\'; cr;\r\t\tnextPutAll: \'#else\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_SQ_GLOBAL_STRUCT /* oh, no mr bill! */\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_VOLATILE_SQ_GLOBAL_STRUCT /* oh no, mr bill! */\'; cr;\r\t\tnextPutAll: \'# define GIV(interpreterInstVar) interpreterInstVar\'; cr;\r\t\tnextPutAll: \'#endif\'; cr.\r\r\t"if the machine needs the fum structure defining locally, do it now; global register users don\'t need that, but DO need some batshit insane C macro fudging in order to convert the define of USE_GLOBAL_STRUCT_REG into a simple string to use in the asm clause below. Sigh."\r\tstructure\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT\'; cr;\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT_REG\';cr;\r\t\tnextPutAll: \'#define fooxstr(s) foostr(s)\'; cr;\r\t\tnextPutAll: \'#define foostr(s)  #s\'; cr;\r\t\tnextPutAll: \'register struct foo * foo asm(fooxstr(USE_GLOBAL_STRUCT_REG));\'; cr;\r\t\tnextPutAll: \'#else\'; cr;\r\t\tnextPutAll: \'static struct foo * foo = &fum;\'; cr;\r\t\tnextPutAll: \'#endif\'; cr;\r\t\tnextPutAll: \'#endif\'; cr.\r\r\taStream\r\t\tnextPutAll: structure contents;\r\t\tnextPutAll: nonstruct contents;\r\t\tcr',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #CCodeGeneratorGlobalStructure,				#isMetaSide : false			},			#name : #'emitCVariablesOn:',			#protocol : #'C code generator',			#sourceCode : 'emitCVariablesOn: aStream\r\t"Store the global variable declarations on the given stream.\r\t Break logic into vars for structure and vars for non-structure."\r\t| structure nonstruct |\r\r\tstructure := WriteStream on: (String new: 32768).\r\tnonstruct := WriteStream on: (String new: 32768).\r\taStream nextPutAll: \'/*** Variables ***/\'; cr.\r\tstructure\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT\'; cr;\r\t\tnextPutAll: \'# define _iss /* define in-struct static as void */\'; cr;\r\t\tnextPutAll: \'static struct foo {\'; cr;\r\t\tnextPutAll: \'#else\'; cr;\r\t\tnextPutAll: \'# define _iss static\'; cr;\r\t\tnextPutAll: \'#endif\'; cr.\r\tself buildSortedVariablesCollection do:\r\t\t[ :var | | decl varString inStruct target |\r\t\ttarget := (inStruct := self placeInStructure: (varString := var asString)) \r\t\t\t\t\tifTrue: [structure]\r\t\t\t\t\tifFalse: [nonstruct].\r\t\tdecl := variableDeclarations at: varString ifAbsent: [\'sqInt \' , varString].\r\t\tdecl first == $# "support cgen var: #bytecodeSetSelector declareC: \'#define bytecodeSetSelector 0\' hack"\r\t\t\tifTrue:\r\t\t\t\t[target nextPutAll: decl; cr]\r\t\t\tifFalse:\r\t\t\t\t[self isGeneratingPluginCode\r\t\t\t\t\tifTrue:\r\t\t\t\t\t\t[varString = \'interpreterProxy\'\r\t\t\t\t\t\t\tifTrue: "quite special..."\r\t\t\t\t\t\t\t\t[self preDeclareInterpreterProxyOn: target]\r\t\t\t\t\t\t\tifFalse: [target nextPutAll: \'static \']]\r\t\t\t\t\tifFalse:\r\t\t\t\t\t\t[(vmClass mustBeGlobal: varString) ifFalse:\r\t\t\t\t\t\t\t[target nextPutAll: (inStruct ifTrue: [\'_iss \'] ifFalse: [\'static \'])]].\r\t\t\t\ttarget nextPutAll: decl; nextPut: $;; cr]].\r\tstructure\r\t\tnextPutAll: \'#undef _iss\'; cr;\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT\'; cr;\r\t\tnextPutAll: \' } fum;\'; cr;\r\t\tnextPutAll: \' #if SQ_USE_GLOBAL_STRUCT_REG\';cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_SQ_GLOBAL_STRUCT /* using a global reg pointer */\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_VOLATILE_SQ_GLOBAL_STRUCT /* using a global reg pointer */\'; cr;\r\t\tnextPutAll:\'#else\';cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_SQ_GLOBAL_STRUCT register struct foo * foo = &fum;\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_VOLATILE_SQ_GLOBAL_STRUCT volatile register struct foo * foo = &fum;\'; cr;\r\t\tnextPutAll: \'#endif\';cr;\r\t\tnextPutAll: \'struct foo  all_threads_global[2];\'; cr;\r\t\tnextPutAll: \'# define GIV(interpreterInstVar) (returnGlobalStructForCurrentThread()->interpreterInstVar)\'; cr;\r\t\tnextPutAll: \'#else\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_SQ_GLOBAL_STRUCT /* oh, no mr bill! */\'; cr;\r\t\tnextPutAll: \'# define DECL_MAYBE_VOLATILE_SQ_GLOBAL_STRUCT /* oh no, mr bill! */\'; cr;\r\t\tnextPutAll: \'# define GIV(interpreterInstVar) interpreterInstVar\'; cr;\r\t\tnextPutAll: \'#endif\'; cr.\r\r\t"if the machine needs the fum structure defining locally, do it now; global register users don\'t need that, but DO need some batshit insane C macro fudging in order to convert the define of USE_GLOBAL_STRUCT_REG into a simple string to use in the asm clause below. Sigh."\r\tstructure\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT\'; cr;\r\t\tnextPutAll: \'#if SQ_USE_GLOBAL_STRUCT_REG\';cr;\r\t\tnextPutAll: \'#define fooxstr(s) foostr(s)\'; cr;\r\t\tnextPutAll: \'#define foostr(s)  #s\'; cr;\r\t\tnextPutAll: \'register struct foo * foo asm(fooxstr(USE_GLOBAL_STRUCT_REG));\'; cr;\r\t\tnextPutAll: \'#else\'; cr;\r\t\tnextPutAll: \'static struct foo * foo = &fum;\'; cr;\r\t\tnextPutAll: \'#endif\'; cr;\r\t\tnextPutAll: \'#endif\'; cr.\r\r\taStream\r\t\tnextPutAll: structure contents;\r\t\tnextPutAll: nonstruct contents;\r\t\tcr',			#stamp : 'Pablo 10/30/2019 16:06',			#package : #VMMaker		}	}}