OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:48:59.549002+01:00' ],		#prior : OmReference [ 'Pharo7.0.4-0-32bit-ccd1f64.akq114peh6a8h7ml9jo640wzp', '3' ],		#self : OmReference [ '1' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreterPrimitives subclass: #CoInterpreterWithQueueFFI\r\tinstanceVariableNames: \'disabledFFIFunction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-QueueFFI\'',				#superclassName : 'CoInterpreterPrimitives'			},			#name : #CoInterpreterWithQueueFFI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterWithQueueFFI,						#isMetaSide : false					},					#name : #disabledFFIFunction,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreterWithQueueFFI class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreterWithQueueFFI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreterWithQueueFFI,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-QueueFFI,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreterPrimitives subclass: #CoInterpreterWithQueueFFI\r\tinstanceVariableNames: \'disabledFFIFunction\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-QueueFFI\'',				#superclassName : 'CoInterpreterPrimitives'			},			#name : #CoInterpreterWithQueueFFI,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterWithQueueFFI,						#isMetaSide : false					},					#name : #disabledFFIFunction,					#parent : @23				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreterWithQueueFFI class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreterWithQueueFFI class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @23			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreterWithQueueFFI,					#isMetaSide : false				},				#parent : @23,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-QueueFFI,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:48:59.980485+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CogVMSimulator subclass: #CogVMSimulatorLSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-JITSimulation\'',				#superclassName : 'CogVMSimulator'			},			#name : #CogVMSimulatorLSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CogVMSimulatorLSB class\r\tinstanceVariableNames: \'\''				},				#name : #'CogVMSimulatorLSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CogVMSimulatorLSB,					#isMetaSide : false				},				#parent : @7,				#content : 'This class overrides a few methods in CogVMSimulator required for simulation to work on little-endian architectures (such as the x86 family of processors).  To start it up simply use CogVMSimulatorLSB instead of CogVMSimulator (see the class comment there for more details).  For example:\r\r\t(CogVMSimulatorLSB new openOn: Smalltalk imageName) test\r\rNote that the image must have been saved at least once on the local architecture, since the compiled VM performs some byte swapping that the simulator cannot cope with.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-JITSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CogVMSimulator subclass: #CogVMSimulatorLSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-JITSimulation\'',				#superclassName : 'CogVMSimulator'			},			#name : #CogVMSimulatorLSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CogVMSimulatorLSB class\r\tinstanceVariableNames: \'\''				},				#name : #'CogVMSimulatorLSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CogVMSimulatorLSB,					#isMetaSide : false				},				#parent : @21,				#content : 'This class overrides a few methods in CogVMSimulator required for simulation to work on little-endian architectures (such as the x86 family of processors).  To start it up simply use CogVMSimulatorLSB instead of CogVMSimulator (see the class comment there for more details).  For example:\r\r\t(CogVMSimulatorLSB new openOn: Smalltalk imageName) test\r\rNote that the image must have been saved at least once on the local architecture, since the compiled VM performs some byte swapping that the simulator cannot cope with.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-JITSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:48:59.982373+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreterMT subclass: #CogVMSimulator\r\tinstanceVariableNames: \'parent enableCog byteCount lastPollCount lastExtPC sendCount lookupCount printSends traceOn myBitBlt displayForm fakeForm imageName pluginList mappedPluginEntries quitBlock transcript displayView eventTransformer printFrameAtEachStep printBytecodeAtEachStep systemAttributes uniqueIndices uniqueIndex breakCount atEachStepBlock startMicroseconds lastYieldMicroseconds externalSemaphoreSignalRequests externalSemaphoreSignalResponses extSemTabSize debugStackDepthDictionary performFilters eventQueue expectedSends expecting\'\r\tclassVariableNames: \'ByteCountsPerMicrosecond ExpectedSends\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-JITSimulation\'',				#superclassName : 'CoInterpreterMT'			},			#name : #CogVMSimulator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #parent,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #enableCog,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #byteCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lastPollCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lastExtPC,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #sendCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lookupCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #printSends,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #traceOn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #myBitBlt,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #displayForm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #fakeForm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #imageName,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #pluginList,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #mappedPluginEntries,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #quitBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #transcript,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #displayView,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #eventTransformer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #printFrameAtEachStep,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #printBytecodeAtEachStep,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #systemAttributes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #uniqueIndices,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #uniqueIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #breakCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #atEachStepBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #startMicroseconds,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lastYieldMicroseconds,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalRequests,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalResponses,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #extSemTabSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #debugStackDepthDictionary,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #performFilters,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #eventQueue,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #expectedSends,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #expecting,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CogVMSimulator class\r\tinstanceVariableNames: \'\''				},				#name : #'CogVMSimulator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CogVMSimulator,					#isMetaSide : false				},				#parent : @7,				#content : 'This class defines basic memory access and primitive simulation so that the CoInterpreter can run simulated in the Squeak environment.  It also defines a number of handy object viewing methods to facilitate pawing around in the object memory.  Remember that you can test the Cogit using its class-side in-image compilation facilities.\r\rTo see the thing actually run, you could (after backing up this image and changes), execute\r\r\t(CogVMSimulator new openOn: Smalltalk imageName) test\r\rand be patient both to wait for things to happen, and to accept various things that may go wrong depending on how large or unusual your image may be.  We usually do this with a small and simple benchmark image.\r\rHere\'s an example to launch the simulator in a window.  The bottom-right window has a menu packed with useful stuff:\r\r(CogVMSimulator newWithOptions: #(Cogit StackToRegisterMappingCogit))\r\tdesiredNumStackPages: 8;\r\topenOn: \'/Users/eliot/Cog/startreader.image\';\r\topenAsMorph;\r\trun\r\rHere\'s a hairier example that I (Eliot) actually use in daily development with some of the breakpoint facilities commented out.\r\r| cos proc opts |\rCoInterpreter initializeWithOptions: (opts := Dictionary newFromPairs: #(Cogit StackToRegisterMappingCogit)).\rCogVMSimulator chooseAndInitCogitClassWithOpts: opts.\rcos := CogVMSimulator new.\r"cos initializeThreadSupport." "to test the multi-threaded VM"\rcos desiredNumStackPages: 8. "to set the size of the stack zone"\r"cos desiredCogCodeSize: 8 * 1024 * 1024." "to set the size of the Cogit\'s code zone"\rcos openOn: \'/Users/eliot/Squeak/Squeak4.4/trunk44.image\'. "choose your favourite image"\r"cos setBreakSelector: \'r:degrees:\'." "set a breakpoint at a specific selector"\rproc := cos cogit processor.\r"cos cogit sendTrace: 7." "turn on tracing"\r"set a complex breakpoint at a specific point in machine code"\r"cos cogit singleStep: true; breakPC: 16r56af; breakBlock: [:cg|  cos framePointer > 16r101F3C and: [(cos longAt: cos framePointer - 4) = 16r2479A and: [(cos longAt: 16r101F30) = (cos longAt: 16r101F3C) or: [(cos longAt: 16r101F2C) = (cos longAt: 16r101F3C)]]]]; sendTrace: 1".\r"[cos cogit compilationTrace: -1] on: MessageNotUnderstood do: [:ex|]." "turn on compilation tracing in the StackToRegisterMappingCogit"\r"cos cogit setBreakMethod: 16rB38880."\rcos\r\topenAsMorph;\r\t"toggleTranscript;" "toggleTranscript will send output to the Transcript instead of the morph\'s rather small window"\r\thalt;\r\trun',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #ByteCountsPerMicrosecond,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #ExpectedSends,					#parent : @7				}			],			#category : #VMMaker-JITSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreterMT subclass: #CogVMSimulator\r\tinstanceVariableNames: \'parent enableCog byteCount lastPollCount lastExtPC sendCount lookupCount printSends traceOn myBitBlt displayForm fakeForm imageName pluginList mappedPluginEntries quitBlock transcript displayView eventTransformer printFrameAtEachStep printBytecodeAtEachStep systemAttributes uniqueIndices uniqueIndex breakCount atEachStepBlock startMicroseconds lastYieldMicroseconds externalSemaphoreSignalRequests externalSemaphoreSignalResponses extSemTabSize debugStackDepthDictionary performFilters eventQueue expectedSends expecting\'\r\tclassVariableNames: \'ByteCountsPerMicrosecond ExpectedSends\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-JITSimulation\'',				#superclassName : 'CoInterpreterMT'			},			#name : #CogVMSimulator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #parent,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #enableCog,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #byteCount,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lastPollCount,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lastExtPC,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #sendCount,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lookupCount,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #printSends,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #traceOn,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #myBitBlt,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #displayForm,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #fakeForm,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #imageName,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #pluginList,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #mappedPluginEntries,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #quitBlock,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #transcript,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #displayView,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #eventTransformer,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #printFrameAtEachStep,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #printBytecodeAtEachStep,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #systemAttributes,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #uniqueIndices,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #uniqueIndex,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #breakCount,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #atEachStepBlock,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #startMicroseconds,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #lastYieldMicroseconds,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalRequests,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalResponses,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #extSemTabSize,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #debugStackDepthDictionary,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #performFilters,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #eventQueue,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #expectedSends,					#parent : @97				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #expecting,					#parent : @97				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CogVMSimulator class\r\tinstanceVariableNames: \'\''				},				#name : #'CogVMSimulator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @97			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CogVMSimulator,					#isMetaSide : false				},				#parent : @97,				#content : 'This class defines basic memory access and primitive simulation so that the CoInterpreter can run simulated in the Squeak environment.  It also defines a number of handy object viewing methods to facilitate pawing around in the object memory.  Remember that you can test the Cogit using its class-side in-image compilation facilities.\r\rTo see the thing actually run, you could (after backing up this image and changes), execute\r\r\t(CogVMSimulator new openOn: Smalltalk imageName) test\r\rand be patient both to wait for things to happen, and to accept various things that may go wrong depending on how large or unusual your image may be.  We usually do this with a small and simple benchmark image.\r\rHere\'s an example to launch the simulator in a window.  The bottom-right window has a menu packed with useful stuff:\r\r(CogVMSimulator newWithOptions: #(Cogit StackToRegisterMappingCogit))\r\tdesiredNumStackPages: 8;\r\topenOn: \'/Users/eliot/Cog/startreader.image\';\r\topenAsMorph;\r\trun\r\rHere\'s a hairier example that I (Eliot) actually use in daily development with some of the breakpoint facilities commented out.\r\r| cos proc opts |\rCoInterpreter initializeWithOptions: (opts := Dictionary newFromPairs: #(Cogit StackToRegisterMappingCogit)).\rCogVMSimulator chooseAndInitCogitClassWithOpts: opts.\rcos := CogVMSimulator new.\r"cos initializeThreadSupport." "to test the multi-threaded VM"\rcos desiredNumStackPages: 8. "to set the size of the stack zone"\r"cos desiredCogCodeSize: 8 * 1024 * 1024." "to set the size of the Cogit\'s code zone"\rcos openOn: \'/Users/eliot/Squeak/Squeak4.4/trunk44.image\'. "choose your favourite image"\r"cos setBreakSelector: \'r:degrees:\'." "set a breakpoint at a specific selector"\rproc := cos cogit processor.\r"cos cogit sendTrace: 7." "turn on tracing"\r"set a complex breakpoint at a specific point in machine code"\r"cos cogit singleStep: true; breakPC: 16r56af; breakBlock: [:cg|  cos framePointer > 16r101F3C and: [(cos longAt: cos framePointer - 4) = 16r2479A and: [(cos longAt: 16r101F30) = (cos longAt: 16r101F3C) or: [(cos longAt: 16r101F2C) = (cos longAt: 16r101F3C)]]]]; sendTrace: 1".\r"[cos cogit compilationTrace: -1] on: MessageNotUnderstood do: [:ex|]." "turn on compilation tracing in the StackToRegisterMappingCogit"\r"cos cogit setBreakMethod: 16rB38880."\rcos\r\topenAsMorph;\r\t"toggleTranscript;" "toggleTranscript will send output to the Transcript instead of the morph\'s rather small window"\r\thalt;\r\trun',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #ByteCountsPerMicrosecond,					#parent : @97				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CogVMSimulator,						#isMetaSide : false					},					#name : #ExpectedSends,					#parent : @97				}			],			#category : #VMMaker-JITSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:48:59.984499+01:00' ],		#prior : OmReference [ '3' ],		#self : OmReference [ '4' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreterPrimitives subclass: #CoInterpreterMT\r\tinstanceVariableNames: \'cogThreadManager checkThreadActivation maxWaitingPriority foreignCallbackPriority deferThreadSwitch disowningVMThread disownCount foreignCallbackProcessSlot willNotThreadWarnCount activeProcessAffined relinquishing processHasThreadId noThreadingOfGUIThread\'\r\tclassVariableNames: \'DisownFlagsShift LockGUIThreadFlag LockGUIThreadShift OwnVMForeignThreadFlag ProcessUnaffinedOnDisown ReturnToThreadSchedulingLoop VMAlreadyOwnedHenceDoNotDisown\'\r\tpoolDictionaries: \'VMThreadingConstants\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'CoInterpreterPrimitives'			},			#name : #CoInterpreterMT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #cogThreadManager,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #checkThreadActivation,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #maxWaitingPriority,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackPriority,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #deferThreadSwitch,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #disowningVMThread,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #disownCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackProcessSlot,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #willNotThreadWarnCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #activeProcessAffined,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #relinquishing,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #processHasThreadId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #noThreadingOfGUIThread,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreterMT class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreterMT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreterMT,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #DisownFlagsShift,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadFlag,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadShift,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #OwnVMForeignThreadFlag,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #ProcessUnaffinedOnDisown,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #ReturnToThreadSchedulingLoop,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #VMAlreadyOwnedHenceDoNotDisown,					#parent : @7				}			],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #VMThreadingConstants,					#parent : @7				}			]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreterPrimitives subclass: #CoInterpreterMT\r\tinstanceVariableNames: \'cogThreadManager checkThreadActivation maxWaitingPriority foreignCallbackPriority deferThreadSwitch disowningVMThread disownCount foreignCallbackProcessSlot willNotThreadWarnCount activeProcessAffined relinquishing processHasThreadId noThreadingOfGUIThread\'\r\tclassVariableNames: \'DisownFlagsShift LockGUIThreadFlag LockGUIThreadShift OwnVMForeignThreadFlag ProcessUnaffinedOnDisown ReturnToThreadSchedulingLoop VMAlreadyOwnedHenceDoNotDisown\'\r\tpoolDictionaries: \'VMThreadingConstants\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'CoInterpreterPrimitives'			},			#name : #CoInterpreterMT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #cogThreadManager,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #checkThreadActivation,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #maxWaitingPriority,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackPriority,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #deferThreadSwitch,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #disowningVMThread,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #disownCount,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackProcessSlot,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #willNotThreadWarnCount,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #activeProcessAffined,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #relinquishing,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #processHasThreadId,					#parent : @63				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #noThreadingOfGUIThread,					#parent : @63				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreterMT class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreterMT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @63			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreterMT,					#isMetaSide : false				},				#parent : @63,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #DisownFlagsShift,					#parent : @63				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadFlag,					#parent : @63				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadShift,					#parent : @63				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #OwnVMForeignThreadFlag,					#parent : @63				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #ProcessUnaffinedOnDisown,					#parent : @63				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #ReturnToThreadSchedulingLoop,					#parent : @63				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #VMAlreadyOwnedHenceDoNotDisown,					#parent : @63				}			],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreterMT,						#isMetaSide : false					},					#name : #VMThreadingConstants,					#parent : @63				}			]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:48:59.986882+01:00' ],		#prior : OmReference [ '4' ],		#self : OmReference [ '5' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreter subclass: #CoInterpreterPrimitives\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-JIT\'',				#superclassName : 'CoInterpreter'			},			#name : #CoInterpreterPrimitives,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreterPrimitives class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreterPrimitives class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreterPrimitives,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-JIT,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'CoInterpreter subclass: #CoInterpreterPrimitives\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-JIT\'',				#superclassName : 'CoInterpreter'			},			#name : #CoInterpreterPrimitives,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreterPrimitives class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreterPrimitives class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreterPrimitives,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-JIT,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:48:59.990171+01:00' ],		#prior : OmReference [ '5' ],		#self : OmReference [ '6' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterPrimitives subclass: #CoInterpreter\r\tinstanceVariableNames: \'cogit cogMethodZone gcMode cogCodeSize desiredCogCodeSize heapBase lastCoggableInterpretedBlockMethod deferSmash deferredSmash primTraceLog primTraceLogIndex traceLog traceLogIndex traceSources cogCompiledCodeCompactionCalledFor statCodeCompactionCount statCodeCompactionUsecs lastUncoggableInterpretedBlockMethod flagInterpretedMethods maxLiteralCountForCompile minBackwardJumpCountForCompile\'\r\tclassVariableNames: \'CSCallbackEnter CSCallbackLeave CSCheckEvents CSEnterCriticalSection CSExitCriticalSection CSOwnVM CSResume CSSignal CSSuspend CSSwitchIfNeccessary CSThreadBind CSThreadSchedulingLoop CSWait CSYield HasBeenReturnedFromMCPC HasBeenReturnedFromMCPCOop MFMethodFlagFrameIsMarkedFlag MinBackwardJumpCountForCompile PrimNumberHashMultiply PrimTraceLogSize RumpCStackSize TraceBlockActivation TraceBlockCreation TraceBufferSize TraceCodeCompaction TraceContextSwitch TraceDisownVM TraceFullGC TraceIncrementalGC TraceIsFromInterpreter TraceIsFromMachineCode TraceOwnVM TracePreemptDisowningThread TracePrimitiveFailure TracePrimitiveRetry TraceSources TraceStackOverflow TraceThreadSwitch TraceVMCallback TraceVMCallbackReturn\'\r\tpoolDictionaries: \'CogMethodConstants VMStackFrameOffsets\'\r\tcategory: \'VMMaker-JIT\'',				#superclassName : 'StackInterpreterPrimitives'			},			#name : #CoInterpreter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogit,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogMethodZone,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #gcMode,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogCodeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #desiredCogCodeSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #heapBase,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #lastCoggableInterpretedBlockMethod,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #deferSmash,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #deferredSmash,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #primTraceLog,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #primTraceLogIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #traceLog,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #traceLogIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #traceSources,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogCompiledCodeCompactionCalledFor,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #statCodeCompactionCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #statCodeCompactionUsecs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #lastUncoggableInterpretedBlockMethod,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #flagInterpretedMethods,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #maxLiteralCountForCompile,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #minBackwardJumpCountForCompile,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreter class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreter,					#isMetaSide : false				},				#parent : @7,				#content : 'I am a variant of the StackInterpreter that can co-exist with the Cog JIT.  I interpret unjitted methods, either because they have been found for the first time or because they are judged to be too big to JIT.  See CogMethod class\'s comment for method interoperability.\r\rcogCodeSize\r\t- the current size of the machine code zone\r\rcogCompiledCodeCompactionCalledFor\r\t- a variable set when the machine code zone runs out of space, causing a machine code zone compaction at the next available opportunity\r\rcogMethodZone\r\t- the manager for the machine code zone (instance of CogMethodZone)\r\rcogit\r\t- the JIT (co-jit) (instance of SimpleStackBasedCogit, StackToRegisterMappoingCogit, etc)\r\rdeferSmash\r\t- a flag causing deferral of smashes of the stackLimit around the call of functionSymbol (for assert checks)\r\rdeferredSmash\r\t- a flag noting deferral of smashes of the stackLimit around the call of functionSymbol (for assert checks)\r\rdesiredCogCodeSize\r\t- the desred size of the machine code zone, set at startup or via primitiveVMParameter to be written at snapshot time\r\rflagInterpretedMethods\r\t- true if methods that are interpreted shoudl have their flag bit set (used to identity methods that are interpreted because they\'re unjittable for some reason)\r\rgcMode\r\t- the variable holding the gcMode, used to inform the cogit of how to scan the machine code zone for oops on GC\r\rheapBase\r\t- the address in memory of the base of the objectMemory\'s heap, which is immediately above the machine code zone\r\rlastCoggableInterpretedBlockMethod\r\t- a variable used to invoke the cogit for a block mehtod being invoked repeatedly in the interpreter\r\rlastUncoggableInterpretedBlockMethod\r\t- a variable used to avoid invoking the cogit for an unjittable method encountered on block evaluation\r\rmaxLiteralCountForCompile\r\t- the variable controlling which methods to jit.  methods with a literal count above this value will not be jitted (on the grounds that large methods are typically used for initialization, and take up a lot of space in the code zone)\r\rminBackwardJumpCountForCompile\r\t- the variable controlling when to attempt to jit a method being interpreted.  If as many backward jumps as this occur, the current method will be jitted\r\rprimTraceLog\r\t- a small array implementing a crcular buffer logging the last N primitive invocations, GCs, code compactions, etc used for crash reporting\r\rprimTraceLogIndex\r\t- the index into primTraceLog of the next entry\r\rreenterInterpreter\r\t- the jmpbuf used to jmp back into the interpreter when transitioning from machine code to the interpreter\r\rstatCodeCompactionCount\r\t- the count of machine code zone compactions\r\rstatCodeCompactionUsecs\r\t- the total microseconds spent in machine code zone compactions\r\rtraceLog\r\t- a log of various events, used in debugging\r\rtraceLogIndex\r\t- the index into traceLog of the next entry\r\rtraceSources\r\t- the names associated with the codes of events in traceLog',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSCallbackEnter,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSCallbackLeave,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSCheckEvents,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSEnterCriticalSection,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSExitCriticalSection,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSOwnVM,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSResume,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSSignal,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSSuspend,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSSwitchIfNeccessary,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSThreadBind,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSThreadSchedulingLoop,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSWait,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSYield,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #HasBeenReturnedFromMCPC,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #HasBeenReturnedFromMCPCOop,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #MFMethodFlagFrameIsMarkedFlag,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #MinBackwardJumpCountForCompile,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #PrimNumberHashMultiply,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #PrimTraceLogSize,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #RumpCStackSize,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceBlockActivation,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceBlockCreation,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceBufferSize,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceCodeCompaction,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceContextSwitch,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceDisownVM,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceFullGC,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceIncrementalGC,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceIsFromInterpreter,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceIsFromMachineCode,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceOwnVM,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TracePreemptDisowningThread,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TracePrimitiveFailure,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TracePrimitiveRetry,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceSources,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceStackOverflow,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceThreadSwitch,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceVMCallback,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceVMCallbackReturn,					#parent : @7				}			],			#category : #VMMaker-JIT,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CogMethodConstants,					#parent : @7				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #VMStackFrameOffsets,					#parent : @7				}			]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterPrimitives subclass: #CoInterpreter\r\tinstanceVariableNames: \'cogit cogMethodZone gcMode cogCodeSize desiredCogCodeSize heapBase lastCoggableInterpretedBlockMethod deferSmash deferredSmash primTraceLog primTraceLogIndex traceLog traceLogIndex traceSources cogCompiledCodeCompactionCalledFor statCodeCompactionCount statCodeCompactionUsecs lastUncoggableInterpretedBlockMethod flagInterpretedMethods maxLiteralCountForCompile minBackwardJumpCountForCompile\'\r\tclassVariableNames: \'CSCallbackEnter CSCallbackLeave CSCheckEvents CSEnterCriticalSection CSExitCriticalSection CSOwnVM CSResume CSSignal CSSuspend CSSwitchIfNeccessary CSThreadBind CSThreadSchedulingLoop CSWait CSYield HasBeenReturnedFromMCPC HasBeenReturnedFromMCPCOop MFMethodFlagFrameIsMarkedFlag MinBackwardJumpCountForCompile PrimNumberHashMultiply PrimTraceLogSize RumpCStackSize TraceBlockActivation TraceBlockCreation TraceBufferSize TraceCodeCompaction TraceContextSwitch TraceDisownVM TraceFullGC TraceIncrementalGC TraceIsFromInterpreter TraceIsFromMachineCode TraceOwnVM TracePreemptDisowningThread TracePrimitiveFailure TracePrimitiveRetry TraceSources TraceStackOverflow TraceThreadSwitch TraceVMCallback TraceVMCallbackReturn\'\r\tpoolDictionaries: \'CogMethodConstants VMStackFrameOffsets\'\r\tcategory: \'VMMaker-JIT\'',				#superclassName : 'StackInterpreterPrimitives'			},			#name : #CoInterpreter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogit,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogMethodZone,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #gcMode,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogCodeSize,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #desiredCogCodeSize,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #heapBase,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #lastCoggableInterpretedBlockMethod,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #deferSmash,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #deferredSmash,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #primTraceLog,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #primTraceLogIndex,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #traceLog,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #traceLogIndex,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #traceSources,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #cogCompiledCodeCompactionCalledFor,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #statCodeCompactionCount,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #statCodeCompactionUsecs,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #lastUncoggableInterpretedBlockMethod,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #flagInterpretedMethods,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #maxLiteralCountForCompile,					#parent : @147				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #minBackwardJumpCountForCompile,					#parent : @147				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'CoInterpreter class\r\tinstanceVariableNames: \'\''				},				#name : #'CoInterpreter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @147			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #CoInterpreter,					#isMetaSide : false				},				#parent : @147,				#content : 'I am a variant of the StackInterpreter that can co-exist with the Cog JIT.  I interpret unjitted methods, either because they have been found for the first time or because they are judged to be too big to JIT.  See CogMethod class\'s comment for method interoperability.\r\rcogCodeSize\r\t- the current size of the machine code zone\r\rcogCompiledCodeCompactionCalledFor\r\t- a variable set when the machine code zone runs out of space, causing a machine code zone compaction at the next available opportunity\r\rcogMethodZone\r\t- the manager for the machine code zone (instance of CogMethodZone)\r\rcogit\r\t- the JIT (co-jit) (instance of SimpleStackBasedCogit, StackToRegisterMappoingCogit, etc)\r\rdeferSmash\r\t- a flag causing deferral of smashes of the stackLimit around the call of functionSymbol (for assert checks)\r\rdeferredSmash\r\t- a flag noting deferral of smashes of the stackLimit around the call of functionSymbol (for assert checks)\r\rdesiredCogCodeSize\r\t- the desred size of the machine code zone, set at startup or via primitiveVMParameter to be written at snapshot time\r\rflagInterpretedMethods\r\t- true if methods that are interpreted shoudl have their flag bit set (used to identity methods that are interpreted because they\'re unjittable for some reason)\r\rgcMode\r\t- the variable holding the gcMode, used to inform the cogit of how to scan the machine code zone for oops on GC\r\rheapBase\r\t- the address in memory of the base of the objectMemory\'s heap, which is immediately above the machine code zone\r\rlastCoggableInterpretedBlockMethod\r\t- a variable used to invoke the cogit for a block mehtod being invoked repeatedly in the interpreter\r\rlastUncoggableInterpretedBlockMethod\r\t- a variable used to avoid invoking the cogit for an unjittable method encountered on block evaluation\r\rmaxLiteralCountForCompile\r\t- the variable controlling which methods to jit.  methods with a literal count above this value will not be jitted (on the grounds that large methods are typically used for initialization, and take up a lot of space in the code zone)\r\rminBackwardJumpCountForCompile\r\t- the variable controlling when to attempt to jit a method being interpreted.  If as many backward jumps as this occur, the current method will be jitted\r\rprimTraceLog\r\t- a small array implementing a crcular buffer logging the last N primitive invocations, GCs, code compactions, etc used for crash reporting\r\rprimTraceLogIndex\r\t- the index into primTraceLog of the next entry\r\rreenterInterpreter\r\t- the jmpbuf used to jmp back into the interpreter when transitioning from machine code to the interpreter\r\rstatCodeCompactionCount\r\t- the count of machine code zone compactions\r\rstatCodeCompactionUsecs\r\t- the total microseconds spent in machine code zone compactions\r\rtraceLog\r\t- a log of various events, used in debugging\r\rtraceLogIndex\r\t- the index into traceLog of the next entry\r\rtraceSources\r\t- the names associated with the codes of events in traceLog',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSCallbackEnter,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSCallbackLeave,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSCheckEvents,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSEnterCriticalSection,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSExitCriticalSection,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSOwnVM,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSResume,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSSignal,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSSuspend,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSSwitchIfNeccessary,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSThreadBind,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSThreadSchedulingLoop,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSWait,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CSYield,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #HasBeenReturnedFromMCPC,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #HasBeenReturnedFromMCPCOop,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #MFMethodFlagFrameIsMarkedFlag,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #MinBackwardJumpCountForCompile,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #PrimNumberHashMultiply,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #PrimTraceLogSize,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #RumpCStackSize,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceBlockActivation,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceBlockCreation,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceBufferSize,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceCodeCompaction,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceContextSwitch,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceDisownVM,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceFullGC,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceIncrementalGC,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceIsFromInterpreter,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceIsFromMachineCode,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceOwnVM,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TracePreemptDisowningThread,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TracePrimitiveFailure,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TracePrimitiveRetry,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceSources,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceStackOverflow,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceThreadSwitch,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceVMCallback,					#parent : @147				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #TraceVMCallbackReturn,					#parent : @147				}			],			#category : #VMMaker-JIT,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #CogMethodConstants,					#parent : @147				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #CoInterpreter,						#isMetaSide : false					},					#name : #VMStackFrameOffsets,					#parent : @147				}			]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:49:00.218983+01:00' ],		#prior : OmReference [ '6' ],		#self : OmReference [ '7' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterSimulator subclass: #StackInterpreterSimulatorLSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-InterpreterSimulation\'',				#superclassName : 'StackInterpreterSimulator'			},			#name : #StackInterpreterSimulatorLSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterSimulatorLSB class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterSimulatorLSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterSimulatorLSB,					#isMetaSide : false				},				#parent : @7,				#content : 'This class overrides a few methods in StackInterpreterSimulator required for simulation to work on little-endian architectures (such as the x86 family of processors).  To start it up simply use StackInterpreterSimulatorLSB instead of StackInterpreterSimulator (see the class comment there for more details).  For example:\r\r\t(StackInterpreterSimulatorLSB new openOn: Smalltalk imageName) test\r\rNote that the image must have been saved at least once on the local architecture, since the compiled VM performs some byte swapping that the simulator cannot cope with.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-InterpreterSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterSimulator subclass: #StackInterpreterSimulatorLSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-InterpreterSimulation\'',				#superclassName : 'StackInterpreterSimulator'			},			#name : #StackInterpreterSimulatorLSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterSimulatorLSB class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterSimulatorLSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterSimulatorLSB,					#isMetaSide : false				},				#parent : @21,				#content : 'This class overrides a few methods in StackInterpreterSimulator required for simulation to work on little-endian architectures (such as the x86 family of processors).  To start it up simply use StackInterpreterSimulatorLSB instead of StackInterpreterSimulator (see the class comment there for more details).  For example:\r\r\t(StackInterpreterSimulatorLSB new openOn: Smalltalk imageName) test\r\rNote that the image must have been saved at least once on the local architecture, since the compiled VM performs some byte swapping that the simulator cannot cope with.',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-InterpreterSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:49:00.220923+01:00' ],		#prior : OmReference [ '7' ],		#self : OmReference [ '8' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterPrimitives subclass: #StackInterpreterSimulator\r\tinstanceVariableNames: \'parent bootstrapping byteCount breakCount sendCount lookupCount printSends printReturns traceOn myBitBlt displayForm fakeForm filesOpen imageName pluginList mappedPluginEntries quitBlock transcript displayView eventTransformer printFrameAtEachStep printBytecodeAtEachStep systemAttributes startMicroseconds lastYieldMicroseconds externalSemaphoreSignalRequests externalSemaphoreSignalResponses extSemTabSize atEachStepBlock disableBooleanCheat performFilters eventQueue assertVEPAES primTraceLog\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-InterpreterSimulation\'',				#superclassName : 'StackInterpreterPrimitives'			},			#name : #StackInterpreterSimulator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #parent,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #bootstrapping,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #byteCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #breakCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #sendCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #lookupCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printSends,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printReturns,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #traceOn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #myBitBlt,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #displayForm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #fakeForm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #filesOpen,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #imageName,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #pluginList,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #mappedPluginEntries,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #quitBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #transcript,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #displayView,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #eventTransformer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printFrameAtEachStep,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printBytecodeAtEachStep,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #systemAttributes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #startMicroseconds,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #lastYieldMicroseconds,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalRequests,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalResponses,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #extSemTabSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #atEachStepBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #disableBooleanCheat,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #performFilters,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #eventQueue,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #assertVEPAES,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #primTraceLog,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterSimulator class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterSimulator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterSimulator,					#isMetaSide : false				},				#parent : @7,				#content : 'This class defines basic memory access and primitive simulation so that the StackInterpreter can run simulated in the Squeak environment.  It also defines a number of handy object viewing methods to facilitate pawing around in the object memory.\r\rTo see the thing actually run, you could (after backing up this image and changes), execute\r\r\t(StackInterpreterSimulator new openOn: Smalltalk imageName) test\r\r\t((StackInterpreterSimulator newWithOptions: #(NewspeakVM true MULTIPLEBYTECODESETS true))\r\t\topenOn: \'ns101.image\') test\r\rand be patient both to wait for things to happen, and to accept various things that may go wrong depending on how large or unusual your image may be.  We usually do this with a small and simple benchmark image.\r\rHere\'s an example of what Eliot uses to launch the simulator in a window.  The bottom-right window has a menu packed with useful stuff:\r\r| vm |\rvm := StackInterpreterSimulator newWithOptions: #().\rvm openOn: \'/Users/eliot/Squeak/Squeak4.4/trunk44.image\'.\rvm setBreakSelector: #&.\rvm openAsMorph; run',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-InterpreterSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterPrimitives subclass: #StackInterpreterSimulator\r\tinstanceVariableNames: \'parent bootstrapping byteCount breakCount sendCount lookupCount printSends printReturns traceOn myBitBlt displayForm fakeForm filesOpen imageName pluginList mappedPluginEntries quitBlock transcript displayView eventTransformer printFrameAtEachStep printBytecodeAtEachStep systemAttributes startMicroseconds lastYieldMicroseconds externalSemaphoreSignalRequests externalSemaphoreSignalResponses extSemTabSize atEachStepBlock disableBooleanCheat performFilters eventQueue assertVEPAES primTraceLog\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-InterpreterSimulation\'',				#superclassName : 'StackInterpreterPrimitives'			},			#name : #StackInterpreterSimulator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #parent,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #bootstrapping,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #byteCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #breakCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #sendCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #lookupCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printSends,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printReturns,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #traceOn,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #myBitBlt,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #displayForm,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #fakeForm,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #filesOpen,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #imageName,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #pluginList,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #mappedPluginEntries,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #quitBlock,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #transcript,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #displayView,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #eventTransformer,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printFrameAtEachStep,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #printBytecodeAtEachStep,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #systemAttributes,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #startMicroseconds,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #lastYieldMicroseconds,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalRequests,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalResponses,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #extSemTabSize,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #atEachStepBlock,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #disableBooleanCheat,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #performFilters,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #eventQueue,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #assertVEPAES,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterSimulator,						#isMetaSide : false					},					#name : #primTraceLog,					#parent : @89				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterSimulator class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterSimulator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @89			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterSimulator,					#isMetaSide : false				},				#parent : @89,				#content : 'This class defines basic memory access and primitive simulation so that the StackInterpreter can run simulated in the Squeak environment.  It also defines a number of handy object viewing methods to facilitate pawing around in the object memory.\r\rTo see the thing actually run, you could (after backing up this image and changes), execute\r\r\t(StackInterpreterSimulator new openOn: Smalltalk imageName) test\r\r\t((StackInterpreterSimulator newWithOptions: #(NewspeakVM true MULTIPLEBYTECODESETS true))\r\t\topenOn: \'ns101.image\') test\r\rand be patient both to wait for things to happen, and to accept various things that may go wrong depending on how large or unusual your image may be.  We usually do this with a small and simple benchmark image.\r\rHere\'s an example of what Eliot uses to launch the simulator in a window.  The bottom-right window has a menu packed with useful stuff:\r\r| vm |\rvm := StackInterpreterSimulator newWithOptions: #().\rvm openOn: \'/Users/eliot/Squeak/Squeak4.4/trunk44.image\'.\rvm setBreakSelector: #&.\rvm openAsMorph; run',				#stamp : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-InterpreterSimulation,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:49:00.631914+01:00' ],		#prior : OmReference [ '8' ],		#self : OmReference [ '9' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackMTInterpreterSimulator subclass: #StackMTInterpreterSimulatorLSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'StackMTInterpreterSimulator'			},			#name : #StackMTInterpreterSimulatorLSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackMTInterpreterSimulatorLSB class\r\tinstanceVariableNames: \'\''				},				#name : #'StackMTInterpreterSimulatorLSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackMTInterpreterSimulatorLSB,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackMTInterpreterSimulator subclass: #StackMTInterpreterSimulatorLSB\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'StackMTInterpreterSimulator'			},			#name : #StackMTInterpreterSimulatorLSB,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackMTInterpreterSimulatorLSB class\r\tinstanceVariableNames: \'\''				},				#name : #'StackMTInterpreterSimulatorLSB class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackMTInterpreterSimulatorLSB,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:49:00.633341+01:00' ],		#prior : OmReference [ '9' ],		#self : OmReference [ '10' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterMT subclass: #StackMTInterpreterSimulator\r\tinstanceVariableNames: \'parent bootstrapping byteCount breakCount sendCount lookupCount printSends printReturns traceOn myBitBlt displayForm fakeForm filesOpen imageName pluginList mappedPluginEntries quitBlock transcript displayView eventTransformer printFrameAtEachStep printBytecodeAtEachStep systemAttributes startMicroseconds lastYieldMicroseconds externalSemaphoreSignalRequests externalSemaphoreSignalResponses extSemTabSize atEachStepBlock disableBooleanCheat performFilters eventQueue assertVEPAES primTraceLog\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'StackInterpreterMT'			},			#name : #StackMTInterpreterSimulator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #parent,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #bootstrapping,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #byteCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #breakCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #sendCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #lookupCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printSends,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printReturns,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #traceOn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #myBitBlt,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #displayForm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #fakeForm,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #filesOpen,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #imageName,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #pluginList,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #mappedPluginEntries,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #quitBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #transcript,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #displayView,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #eventTransformer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printFrameAtEachStep,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printBytecodeAtEachStep,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #systemAttributes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #startMicroseconds,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #lastYieldMicroseconds,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalRequests,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalResponses,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #extSemTabSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #atEachStepBlock,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #disableBooleanCheat,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #performFilters,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #eventQueue,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #assertVEPAES,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #primTraceLog,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackMTInterpreterSimulator class\r\tinstanceVariableNames: \'\''				},				#name : #'StackMTInterpreterSimulator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackMTInterpreterSimulator,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterMT subclass: #StackMTInterpreterSimulator\r\tinstanceVariableNames: \'parent bootstrapping byteCount breakCount sendCount lookupCount printSends printReturns traceOn myBitBlt displayForm fakeForm filesOpen imageName pluginList mappedPluginEntries quitBlock transcript displayView eventTransformer printFrameAtEachStep printBytecodeAtEachStep systemAttributes startMicroseconds lastYieldMicroseconds externalSemaphoreSignalRequests externalSemaphoreSignalResponses extSemTabSize atEachStepBlock disableBooleanCheat performFilters eventQueue assertVEPAES primTraceLog\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'StackInterpreterMT'			},			#name : #StackMTInterpreterSimulator,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #parent,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #bootstrapping,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #byteCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #breakCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #sendCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #lookupCount,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printSends,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printReturns,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #traceOn,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #myBitBlt,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #displayForm,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #fakeForm,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #filesOpen,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #imageName,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #pluginList,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #mappedPluginEntries,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #quitBlock,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #transcript,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #displayView,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #eventTransformer,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printFrameAtEachStep,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #printBytecodeAtEachStep,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #systemAttributes,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #startMicroseconds,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #lastYieldMicroseconds,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalRequests,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #externalSemaphoreSignalResponses,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #extSemTabSize,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #atEachStepBlock,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #disableBooleanCheat,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #performFilters,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #eventQueue,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #assertVEPAES,					#parent : @89				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackMTInterpreterSimulator,						#isMetaSide : false					},					#name : #primTraceLog,					#parent : @89				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackMTInterpreterSimulator class\r\tinstanceVariableNames: \'\''				},				#name : #'StackMTInterpreterSimulator class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @89			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackMTInterpreterSimulator,					#isMetaSide : false				},				#parent : @89,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:49:00.635291+01:00' ],		#prior : OmReference [ '10' ],		#self : OmReference [ '11' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterPrimitives subclass: #StackInterpreterMT\r\tinstanceVariableNames: \'cogThreadManager checkThreadActivation maxWaitingPriority foreignCallbackPriority deferThreadSwitch disowningVMThread disownCount foreignCallbackProcessSlot willNotThreadWarnCount activeProcessAffined relinquishing processHasThreadId noThreadingOfGUIThread ownVMCount\'\r\tclassVariableNames: \'CSCallbackEnter CSCallbackLeave CSCheckEvents CSEnterCriticalSection CSExitCriticalSection CSOwnVM CSResume CSSignal CSSuspend CSSwitchIfNeccessary CSThreadBind CSThreadSchedulingLoop CSWait CSYield DisownFlagsShift LockGUIThreadFlag LockGUIThreadShift OwnVMForeignThreadFlag ProcessUnaffinedOnDisown ReturnToThreadSchedulingLoop VMAlreadyOwnedHenceDoNotDisown\'\r\tpoolDictionaries: \'VMThreadingConstants\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'StackInterpreterPrimitives'			},			#name : #StackInterpreterMT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #cogThreadManager,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #checkThreadActivation,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #maxWaitingPriority,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackPriority,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #deferThreadSwitch,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #disowningVMThread,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #disownCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackProcessSlot,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #willNotThreadWarnCount,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #activeProcessAffined,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #relinquishing,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #processHasThreadId,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #noThreadingOfGUIThread,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #ownVMCount,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterMT class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterMT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterMT,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSCallbackEnter,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSCallbackLeave,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSCheckEvents,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSEnterCriticalSection,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSExitCriticalSection,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSOwnVM,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSResume,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSSignal,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSSuspend,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSSwitchIfNeccessary,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSThreadBind,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSThreadSchedulingLoop,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSWait,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSYield,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #DisownFlagsShift,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadFlag,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadShift,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #OwnVMForeignThreadFlag,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #ProcessUnaffinedOnDisown,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #ReturnToThreadSchedulingLoop,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #VMAlreadyOwnedHenceDoNotDisown,					#parent : @7				}			],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #VMThreadingConstants,					#parent : @7				}			]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreterPrimitives subclass: #StackInterpreterMT\r\tinstanceVariableNames: \'cogThreadManager checkThreadActivation maxWaitingPriority foreignCallbackPriority deferThreadSwitch disowningVMThread disownCount foreignCallbackProcessSlot willNotThreadWarnCount activeProcessAffined relinquishing processHasThreadId noThreadingOfGUIThread ownVMCount\'\r\tclassVariableNames: \'CSCallbackEnter CSCallbackLeave CSCheckEvents CSEnterCriticalSection CSExitCriticalSection CSOwnVM CSResume CSSignal CSSuspend CSSwitchIfNeccessary CSThreadBind CSThreadSchedulingLoop CSWait CSYield DisownFlagsShift LockGUIThreadFlag LockGUIThreadShift OwnVMForeignThreadFlag ProcessUnaffinedOnDisown ReturnToThreadSchedulingLoop VMAlreadyOwnedHenceDoNotDisown\'\r\tpoolDictionaries: \'VMThreadingConstants\'\r\tcategory: \'VMMaker-Multithreading\'',				#superclassName : 'StackInterpreterPrimitives'			},			#name : #StackInterpreterMT,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #cogThreadManager,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #checkThreadActivation,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #maxWaitingPriority,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackPriority,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #deferThreadSwitch,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #disowningVMThread,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #disownCount,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #foreignCallbackProcessSlot,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #willNotThreadWarnCount,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #activeProcessAffined,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #relinquishing,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #processHasThreadId,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #noThreadingOfGUIThread,					#parent : @93				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #ownVMCount,					#parent : @93				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterMT class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterMT class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @93			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterMT,					#isMetaSide : false				},				#parent : @93,				#content : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSCallbackEnter,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSCallbackLeave,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSCheckEvents,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSEnterCriticalSection,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSExitCriticalSection,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSOwnVM,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSResume,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSSignal,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSSuspend,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSSwitchIfNeccessary,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSThreadBind,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSThreadSchedulingLoop,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSWait,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #CSYield,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #DisownFlagsShift,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadFlag,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #LockGUIThreadShift,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #OwnVMForeignThreadFlag,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #ProcessUnaffinedOnDisown,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #ReturnToThreadSchedulingLoop,					#parent : @93				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #VMAlreadyOwnedHenceDoNotDisown,					#parent : @93				}			],			#category : #VMMaker-Multithreading,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreterMT,						#isMetaSide : false					},					#name : #VMThreadingConstants,					#parent : @93				}			]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:49:00.636699+01:00' ],		#prior : OmReference [ '11' ],		#self : OmReference [ '12' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreter subclass: #StackInterpreterPrimitives\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-Interpreter\'',				#superclassName : 'StackInterpreter'			},			#name : #StackInterpreterPrimitives,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterPrimitives class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterPrimitives class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterPrimitives,					#isMetaSide : false				},				#parent : @7,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-Interpreter,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'StackInterpreter subclass: #StackInterpreterPrimitives\r\tinstanceVariableNames: \'\'\r\tclassVariableNames: \'\'\r\tpoolDictionaries: \'\'\r\tcategory: \'VMMaker-Interpreter\'',				#superclassName : 'StackInterpreter'			},			#name : #StackInterpreterPrimitives,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [ ],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreterPrimitives class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreterPrimitives class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @21			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreterPrimitives,					#isMetaSide : false				},				#parent : @21,				#content : ''			},			#classVariables : OrderedCollection [ ],			#category : #VMMaker-Interpreter,			#package : #VMMaker,			#sharedPools : OrderedCollection [ ]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:49:00.64455+01:00' ],		#prior : OmReference [ '12' ],		#self : OmReference [ '13' ]	},	#content : EpClassModification {		#oldClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'InterpreterPrimitives subclass: #StackInterpreter\r\tinstanceVariableNames: \'currentBytecode bytecodeSetSelector localFP localIP localSP stackLimit stackPage stackPages method instructionPointer stackPointer framePointer localReturnValue localAbsentReceiver localAbsentReceiverOrZero extA extB numExtB primitiveFunctionPointer methodCache nsMethodCache atCache lkupClassTag lkupClass methodDictLinearSearchLimit highestRunnableProcessPriority reenterInterpreter nextWakeupUsecs nextPollUsecs inIOProcessEvents interruptKeycode interruptPending savedWindowSize imageHeaderFlags fullScreenFlag sendWheelEvents deferDisplayUpdates pendingFinalizationSignals extraVMMemory interpreterProxy showSurfaceFn primitiveTable primitiveAccessorDepthTable externalPrimitiveTable externalPrimitiveTableFirstFreeIndex overflowedPage extraFramesToMoveOnOverflow globalSessionID jmpBuf jmpDepth suspendedCallbacks suspendedMethods numStackPages desiredNumStackPages desiredEdenBytes classNameIndex thisClassIndex metaclassNumSlots interruptCheckChain suppressHeartbeatFlag breakSelector breakSelectorLength breakLookupClassTag longRunningPrimitiveCheckMethod longRunningPrimitiveCheckSemaphore longRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs longRunningPrimitiveGCUsecs longRunningPrimitiveCheckSequenceNumber longRunningPrimitiveSignalUndelivered checkAllocFiller tempOop tempOop2 metaAccessorDepth theUnknownShort the2ndUnknownShort imageFloatsBigEndian maxExtSemTabSizeSet lastMethodCacheProbeWrite gcSemaphoreIndex classByteArrayCompactIndex checkedPluginName nativeSP nativeStackPointer lowcodeCalloutState shadowCallStackPointer displayBits displayWidth displayHeight displayDepth statForceInterruptCheck statStackOverflow statStackPageDivorce statCheckForEvents statProcessSwitch statIOProcessEvents statPendingFinalizationSignals statIdleUsecs debugCallbackPath debugCallbackReturns debugCallbackInvokes\'\r\tclassVariableNames: \'AccessModifierPrivate AccessModifierProtected AccessModifierPublic AltBytecodeEncoderClassName AltLongStoreBytecode AlternateHeaderHasPrimFlag AlternateHeaderIsOptimizedFlag AlternateHeaderNumLiteralsMask AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BytecodeEncoderClassName BytecodeTable CacheProbeMax DirBadPath DirEntryFound DirNoMoreEntries DumpStackOnLowSpace EnclosingMixinIndex EnclosingObjectIndex EnforceAccessControl FailImbalancedPrimitives LongStoreBytecode MaxExternalPrimitiveTableSize MaxJumpBuf MaxPrimitiveIndex MaxQuickPrimitiveIndex MethodHeaderArgCountShift MethodHeaderFlagBitPosition MethodHeaderTempCountShift MixinIndex PrimNumberDoExternalCall PrimNumberDoPrimitive PrimNumberExternalCall PrimNumberFFICall PrimitiveTable ReturnToInterpreter StackPageReachedButUntraced StackPageTraceInvalid StackPageTraced StackPageUnreached V3PrimitiveBitsMask\'\r\tpoolDictionaries: \'VMBasicConstants VMBytecodeConstants VMMethodCacheConstants VMObjectIndices VMSpurObjectRepresentationConstants VMSqueakClassIndices VMStackFrameOffsets\'\r\tcategory: \'VMMaker-Interpreter\'',				#superclassName : 'InterpreterPrimitives'			},			#name : #StackInterpreter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #currentBytecode,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #bytecodeSetSelector,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localFP,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localIP,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localSP,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackLimit,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackPage,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackPages,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #method,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #instructionPointer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackPointer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #framePointer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localReturnValue,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localAbsentReceiver,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localAbsentReceiverOrZero,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extA,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extB,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #numExtB,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #primitiveFunctionPointer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #methodCache,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nsMethodCache,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #atCache,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lkupClassTag,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lkupClass,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #methodDictLinearSearchLimit,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #highestRunnableProcessPriority,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #reenterInterpreter,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nextWakeupUsecs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nextPollUsecs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #inIOProcessEvents,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interruptKeycode,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interruptPending,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #savedWindowSize,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #imageHeaderFlags,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #fullScreenFlag,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #sendWheelEvents,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #deferDisplayUpdates,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #pendingFinalizationSignals,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extraVMMemory,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interpreterProxy,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #showSurfaceFn,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #primitiveTable,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #primitiveAccessorDepthTable,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #externalPrimitiveTable,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #externalPrimitiveTableFirstFreeIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #overflowedPage,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extraFramesToMoveOnOverflow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #globalSessionID,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #jmpBuf,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #jmpDepth,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #suspendedCallbacks,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #suspendedMethods,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #numStackPages,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #desiredNumStackPages,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #desiredEdenBytes,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #classNameIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #thisClassIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #metaclassNumSlots,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interruptCheckChain,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #suppressHeartbeatFlag,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #breakSelector,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #breakSelectorLength,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #breakLookupClassTag,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveCheckMethod,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveCheckSemaphore,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveStartUsecs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveStopUsecs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveGCUsecs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveCheckSequenceNumber,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveSignalUndelivered,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #checkAllocFiller,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #tempOop,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #tempOop2,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #metaAccessorDepth,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #theUnknownShort,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #the2ndUnknownShort,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #imageFloatsBigEndian,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #maxExtSemTabSizeSet,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lastMethodCacheProbeWrite,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #gcSemaphoreIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #classByteArrayCompactIndex,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #checkedPluginName,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nativeSP,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nativeStackPointer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lowcodeCalloutState,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #shadowCallStackPointer,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayBits,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayWidth,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayHeight,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayDepth,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statForceInterruptCheck,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statStackOverflow,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statStackPageDivorce,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statCheckForEvents,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statProcessSwitch,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statIOProcessEvents,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statPendingFinalizationSignals,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statIdleUsecs,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #debugCallbackPath,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #debugCallbackReturns,					#parent : @7				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #debugCallbackInvokes,					#parent : @7				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreter class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @7			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreter,					#isMetaSide : false				},				#parent : @7,				#content : 'This class is a complete implementation of the Smalltalk-80 virtual machine, derived originally from the Blue Book specification but quite different in some areas.  This VM supports Closures but *not* old-style BlockContexts.\r\rIt has been modernized with 32-bit (and indeed 64-bit) pointers, better management of Contexts (see next item), and attention to variable use that allows the CCodeGenerator (qv) to keep, eg, the instruction pointer and stack pointer in registers as well as keeping most simple variables in a global array that seems to improve performance for most platforms.\r\rThe VM does not use Contexts directly.  Instead Contexts serve as proxies for a more conventional stack format that is invisible to the image.  There is considerable explanation at http://www.mirandabanda.org/cogblog/2009/01/14/under-cover-contexts-and-the-big-frame-up.  The VM maintains a fixed-size stack zone divided into pages, each page being capable of holding several method/block activations.  A send establishes a new frame in the current stack page, a return returns to the previous frame.  This eliminates allocation/deallocation of contexts and the moving of receiver and arguments from caller to callee on each send/return.  Contexts are created lazily when an activation needs a context (creating a block, explicit use of thisContext, access to sender when sender is a frame, or linking of stack pages together).  Contexts are either conventional and heap-resident ("single") or "married" and serve as proxies for their corresponding frame or "widowed", meaning that their spouse frame has been returned from (died).  A married context is specially marked (more details in the code) and refers to its frame.  Likewise a married frame is specially marked and refers to its context.\r\rIn addition to SmallInteger arithmetic and Floats, the VM supports logic on 32-bit (and 64-bit) PositiveLargeIntegers, thus allowing it to simulate itself much more efficiently than would otherwise be the case.\r\rStackInterpreter and subclasses support multiple memory managers.  Currently there are two.  NewMemoryManager is a slightly refined version of ObjectMemory, and is the memory manager and garbage collector for the original Squeak object representation as described in "Back to the Future The Story of Squeak, A Practical Smalltalk Written in Itself", see http://ftp.squeak.org/docs/OOPSLA.Squeak.html.  Spur is a faster, more regular object representation that is designed for more performance and functionality, and to have a common header format for both 32-bit and 64-bit versions.  You can read about it in SpurMemoryManager\'s class comment.  There is also a video of a presentation at ESUG 2014 (https://www.youtube.com/watch?v=k0nBNS1aHZ4), along with slides (http://www.slideshare.net/esug/spur-a-new-object-representation-for-cog?related=1).\r\rStackInterpreter is designed toi be subclassed by CoInterpreter et al.  CoInterpreter cooperates with a bytecode to machine-code JIT compiler, for much higher performance\r\rInstance Variables\r\ratCache\r\t- a small array holding tuples of oop => format,fixedFields,size to speed up at:[put:].  Unused in CoInterpreter\r\rbreakLookupClassTag\r\t- if non-nil, the class tag to break on sends, breaking (calling warning) if there\'s a match\r\rbreakSelector\r\t- if breakSelectorLength ~= 0, a pointer to a string to compare messageSelector against on send, breaking (calling warning) if there\'s a match\r\rbreakSelectorLength\r\t- if > 0, breakSelector is checked on each send.  If < 0, breakSelector is checked on each MNU\r\rbytecodeSetSelector\r\t- if multiple bytecode sets are in use this is the offset (0 or 256) for the current bytecode set\r\rcheckAllocFiller\r\t- a variable used to fill eden to allow checking for overwriting the end of an object\r\rcheckedPluginName\r\t- the oop of a symbol which, when gcmode is GCCheckPrimCall, can check for heap memory leaks after a specific primitive has been called\r\rclassByteArrayCompactIndex\r\t- the compact class index of the class ByteArray, if appropriate\r\rclassNameIndex\r\t- the slot index of name in a class object, used or debug printing, derived from class Array at start-up\r\rcurrentBytecode\r\t- the value of the currentBytecode\r\rdebugCallbackInvokes\r\t- a counter used to debug the old (Python) callback support\r\rdebugCallbackPath\r\t- a variable used to hold the path through the new callback support\r\rdebugCallbackReturns\r\t- a counter used to debug the old (Python) callback support; it should match debugCallbackInvokes\r\rdeferDisplayUpdates\r\t- the variable that implements primitive 126, primitiveDeferDisplayUpdates\r\rdesiredEdenBytes\r\t- the desired size of eden, used at image load and snapshot time\r\rdesiredNumStackPages\r\t- the desired number of stack pages, used at image load and snapshot time\r\rdisplayBits\r\t- either the first indexable field of the current display object, or the handle of the current display surface\r\rdisplayDepth\r\t- pixel depth of the current display object or surface\r\rdisplayHeight\r\t- height in pixels of the current display object or surface\r\rdisplayWidth\r\t- width in pixels of the current display object or surface\r\rextA\r\t- if a prefix btecode set, such as SstaV1, is in use, the accumulator for extension A\r\rextB\r\t- if a prefix btecode set, such as SstaV1, is in use, the accumulator for extension B\r\rexternalPrimitiveTable\r\t- xxxxx\r\rexternalPrimitiveTableFirstFreeIndex\r\t- a small array cacheing the target function pointer for external calls (primitiveExternalCall)\r\rextraFramesToMoveOnOverflow\r\t- a variable used to prevent thrashing on sends and returns at the end of a page (see overflowedPage)\r\rextraVMMemory\r\t- in Spur, free heap to be allocated at startup.  In V3, C memory to reserve for malloc at startup (i.e. malloc extraVMMemory, alloc heap, free extraVMMemory)\r\rframePointer\r\t- the pointer to the current frame when primitives (or in the CoInterpreter, when machine-code <-> interpreter transitions) are invoked (c.f. localFP)\r\rfullScreenFlag\r\t- true if the system is in full-screen mode\r\rgcSemaphoreIndex\r\t- if non-zero, the index in the semaphore table of a semaphore to signal after any GC\r\rglobalSessionID\r\t- a non-zero number (derived from the time) identifying the current session\r\rhighestRunnableProcessPriority\r\t- a tide mark in the runnableProcesses array, used to reduce the time spent scanning the array looking for the highest priority runnable process.  This variable is set high when the priority of the highest process is unknown, and set to the highest found when the array is scanned.  Hence most of the time the nused entries in the array are not scanned.\r\rimageFloatsBigEndian\r\t- true if the order of data in floats is big-endian\r\rimageHeaderFlags\r\t- the flags stored in the image at load time or to be stored in the image at snapshto time.  These flags identify various options, sich as whether floats are in platfrm order.\r\rinIOProcessEvents\r\t- true if the system is receiving events in ioProcessEvents, used to avoid recursion when receiuving events via callbacks\r\rinstructionPointer\r\t- the pointer to the current bytecode when primitives (or in the CoInterpreter, when machine-code <-> interpreter transitions) are invoked (c.f. localIP)\r\rinterpreterProxy\r\t- the table of functions used to export interpreter and memory manager functions to plugin primitives\r\rinterruptCheckChain\r\t- if non nil a funciton pointer to be called when a user interrupt event is received, used by plugin primitives to abort long-running calls on interrupt\r\rinterruptKeycode\r\t- the keycode of the event signifying a user interrupt\r\rinterruptPending\r\t- a variable set by ioProcessEvents if a user interrupt is pending\r\rjmpBuf\r\t- a small array of jmpbufs (for setjmp/longjmp) used to manage returning in the iold (Python) callback support (see suspendedCallbacks et al)\r\rjmpDepth\r\t- the index of the next free entry in jmpBuf\r\rlastMethodCacheProbeWrite\r\t- the index of the last write into the method lookup cache, used by primitiveExternalCall to rewrite the method cache entry to call the target function, avoiding going through primitiveExternalCall on every plugin primitive dispatch\r\rlkupClass\r\t- the implicit class argument to the class hierarchy looup routines such as lookupOrdinarySend\r\rlkupClassTag\r\t- the implicit class tag argument to message send lookup\r\rlocalAbsentReceiver\r\t- Newspeak, the absent receiver in any Newspeak absent receiver send\r\rlocalAbsentReceiverOrZero\r\t- Newspeak, if non-zero, the absent receiver in any Newspeak outer absent receiver send\r\rlocalFP\r\t- the frame pointer in the fully-inlined interpret routine, hopfully allowing a C compiler to assign localFP to a register variable (c.f. framePointer)\r\rlocalIP\r\t- the instruction pointer in the fully-inlined interpret routine, hopfully allowing a C compiler to assign localFP to a register variable (c.f. instructionPointer)\r\rlocalReturnValue\r\t- the value being returned in return bytecodes\r\rlocalSP\r\t- the stack pointer in the fully-inlined interpret routine, hopfully allowing a C compiler to assign localFP to a register variable (c.f. framePointer)\r\rlongRunningPrimitiveCheckMethod\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveCheckSemaphore\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveCheckSequenceNumber\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveGCUsecs\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveSignalUndelivered\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveStartUsecs\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveStopUsecs\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlowcodeCalloutState\r\t- Lowcode, the state used to marshall an outgoing Lowcode call\r\rmaxExtSemTabSizeSet\r\t- a flag stating whether the maximum size of the external semaphore table has been set or not\r\rmetaAccessorDepth\r\t- Spur, the accessor depth of a primitive being invoked by one of the meta primitive primitives, primitiveDoPrimitiveWithArgs and primitiveDoNamedPrimitiveWithArgs\r\rmetaclassNumSlots\r\t- teh size of a Metaclass instanc, set at startup, used for debug printing\r\rmethod\r\t- the oop of the current method\r\rmethodCache\r\t- a small array holding tuples of selector x class => method,functionPointer to speed up message send (avoid class hierarchy search on send)\r\rmethodDictLinearSearchLimit\r\t- a variable used to control searching of method dictionaries.  Dictionaries of size within the limit are searched linearly instead of hashed.  This can be used either to speed up search in small dictionaries or to turn off hashed lookup wen hashing needs to be changed\r\rnativeSP\r\t- Lowcode, the native (C) stack pointer (?; then why nativeStackPointer?)\r\rnativeStackPointer\r\t- Lowcode, the native (C) stack pointer (?; then why nativeSP?)\r\rnextPollUsecs\r\t- if non-zero, the micosecond clock value at which to next poll for events, used to control event polling rate\r\rnextWakeupUsecs\r\t- if non-zero, the micosecond clock value at which the next delay expires\r\rnsMethodCache\r\t- Newspeak, a small array hilding tuples of selector x class tag x calling method x privacy code => target method,primitive function,actual receiver, used to speed up Newspeak absent receiver sends\r\rnumExtB\r\t- the number of bytes in extB, used to correctly maintain extB, given that it is unsigned\r\rnumStackPages\r\t- the number of stack pages being used\r\roverflowedPage\r\t- the stack page that a send last overflowed, used to avoid thrashing on send and return at the end of a stack page (see extraFramesToMoveOnOverflow)\r\rpendingFinalizationSignals\r\t- a variable used to control signalling the finalizationSemahpore\r\rprimitiveAccessorDepthTable\r\t- Spur, the accessor depths for the iundexed primitives, used to determine how much state to scan loking for forwarders on primitive failure\r\rprimitiveFunctionPointer\r\t- the function pointer (in simulation, the selector symbol) of the current primitive, nil for newMethod if there is no primitive\r\rprimitiveTable\r\t- the table holding the functions (in simulation the selector symbols) for the indexed primitives\r\rsavedWindowSize\r\t- the display size to write into a snapshot.  Avoids writing a zero window size into a snapshot when an image is loaded headless.  \r\rshadowCallStackPointer\r\t- Lowcode, the shadow stack pointer, used when marshalling Lowcode external calls\r\rshowSurfaceFn\r\t- if non-zero, the function to call to update the display when the current display is a surface\r\rstackLimit\r\t- the variable marking the end of the current stack page, also used to break out of interpretation to check for events.  When marking the end of a page, it enables a send to create an activation on a new page,  When set so that any send would fail the stack limit check, causes a check for events on stack page overflow\r\rstackPage\r\t- the current stack page\r\rstackPages\r\t- the set of stack pages\r\rstackPointer\r\t- the pointer to the top of stack in the current frame when primitives (or in the CoInterpreter, when machine-code <-> interpreter transitions) are invoked (c.f. localSP)\r\rstatCheckForEvents\r\t- the count of checkForEventsMaybeContextSwitch: calls\r\rstatForceInterruptCheck\r\t- the count of forceInterruptCheck calls\r\rstatIOProcessEvents\r\t- the count of ioProcessEvents calls\r\rstatIdleUsecs\r\t- the count of microseconds at which the system is at idle (a bad idea; this should be replaced by its inverse; asking the OS how long the VM process has been active)\r\rstatPendingFinalizationSignals\r\t- the count of pendingFinalizationSignals\r\rstatProcessSwitch\r\t- the count of process switches\r\rstatStackOverflow\r\t- the count of stack overflows\r\rstatStackPageDivorce\r\t- the cound of stack page divorces (a stack page divorce occurs when a stack page must be freed for use)\r\rsuppressHeartbeatFlag\r\t- a flag controlling whether the heatbeat is in effect; the heartbeat is used to set stackLimit periodically to cause break out to chedck for events (see stackLimit)\r\rsuspendedCallbacks\r\t- a small array holding the processes suspended when the old callback machinery is in use (see jmpBuf et al)\r\rsuspendedMethods\r\t- a small array holding the methods of the processes suspended when the old callback machinery is in use\r\rtempOop\r\t- if non-zero, an oop that may move during primitive execution\r\rtempOop2\r\t- if non-zero, an oop that may move during primitive execution\r\rthe2ndUnknownShort\r\t- the value of a field in the image header that is unused in the StackInterpreter but used in the CoInterpreter (and hence to be preserved in snapshots)\r\rtheUnknownShort\r\t- the value of a field in the image header that is unused in the StackInterpreter but used in the CoInterpreter (and hence to be preserved in snapshots)\r\rthisClassIndex\r\t- the index in a Metaclass of thisClass (the instance of the metaclass) used in debug printing',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AccessModifierPrivate,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AccessModifierProtected,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AccessModifierPublic,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AltBytecodeEncoderClassName,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AltLongStoreBytecode,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AlternateHeaderHasPrimFlag,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AlternateHeaderIsOptimizedFlag,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AlternateHeaderNumLiteralsMask,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheFixedFields,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheFmt,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheMask,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheOop,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheSize,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheTotalSize,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtPutBase,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #BytecodeEncoderClassName,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #BytecodeTable,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #CacheProbeMax,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DirBadPath,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DirEntryFound,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DirNoMoreEntries,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DumpStackOnLowSpace,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #EnclosingMixinIndex,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #EnclosingObjectIndex,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #EnforceAccessControl,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #FailImbalancedPrimitives,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #LongStoreBytecode,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxExternalPrimitiveTableSize,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxJumpBuf,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxPrimitiveIndex,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxQuickPrimitiveIndex,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MethodHeaderArgCountShift,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MethodHeaderFlagBitPosition,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MethodHeaderTempCountShift,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MixinIndex,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberDoExternalCall,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberDoPrimitive,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberExternalCall,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberFFICall,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimitiveTable,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #ReturnToInterpreter,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageReachedButUntraced,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageTraceInvalid,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageTraced,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageUnreached,					#parent : @7				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #V3PrimitiveBitsMask,					#parent : @7				}			],			#category : #VMMaker-Interpreter,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMBasicConstants,					#parent : @7				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMBytecodeConstants,					#parent : @7				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMMethodCacheConstants,					#parent : @7				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMObjectIndices,					#parent : @7				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMSpurObjectRepresentationConstants,					#parent : @7				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMSqueakClassIndices,					#parent : @7				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMStackFrameOffsets,					#parent : @7				}			]		},		#newClass : RGClassDefinition {			#annotations : IdentityDictionary {				#traitCompositionSource : '{}',				#definitionSource : 'InterpreterPrimitives subclass: #StackInterpreter\r\tinstanceVariableNames: \'currentBytecode bytecodeSetSelector localFP localIP localSP stackLimit stackPage stackPages method instructionPointer stackPointer framePointer localReturnValue localAbsentReceiver localAbsentReceiverOrZero extA extB numExtB primitiveFunctionPointer methodCache nsMethodCache atCache lkupClassTag lkupClass methodDictLinearSearchLimit highestRunnableProcessPriority reenterInterpreter nextWakeupUsecs nextPollUsecs inIOProcessEvents interruptKeycode interruptPending savedWindowSize imageHeaderFlags fullScreenFlag sendWheelEvents deferDisplayUpdates pendingFinalizationSignals extraVMMemory interpreterProxy showSurfaceFn primitiveTable primitiveAccessorDepthTable externalPrimitiveTable externalPrimitiveTableFirstFreeIndex overflowedPage extraFramesToMoveOnOverflow globalSessionID jmpBuf jmpDepth suspendedCallbacks suspendedMethods numStackPages desiredNumStackPages desiredEdenBytes classNameIndex thisClassIndex metaclassNumSlots interruptCheckChain suppressHeartbeatFlag breakSelector breakSelectorLength breakLookupClassTag longRunningPrimitiveCheckMethod longRunningPrimitiveCheckSemaphore longRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs longRunningPrimitiveGCUsecs longRunningPrimitiveCheckSequenceNumber longRunningPrimitiveSignalUndelivered checkAllocFiller tempOop tempOop2 metaAccessorDepth theUnknownShort the2ndUnknownShort imageFloatsBigEndian maxExtSemTabSizeSet lastMethodCacheProbeWrite gcSemaphoreIndex classByteArrayCompactIndex checkedPluginName nativeSP nativeStackPointer lowcodeCalloutState shadowCallStackPointer displayBits displayWidth displayHeight displayDepth statForceInterruptCheck statStackOverflow statStackPageDivorce statCheckForEvents statProcessSwitch statIOProcessEvents statPendingFinalizationSignals statIdleUsecs debugCallbackPath debugCallbackReturns debugCallbackInvokes myCurrentThread\'\r\tclassVariableNames: \'AccessModifierPrivate AccessModifierProtected AccessModifierPublic AltBytecodeEncoderClassName AltLongStoreBytecode AlternateHeaderHasPrimFlag AlternateHeaderIsOptimizedFlag AlternateHeaderNumLiteralsMask AtCacheFixedFields AtCacheFmt AtCacheMask AtCacheOop AtCacheSize AtCacheTotalSize AtPutBase BytecodeEncoderClassName BytecodeTable CacheProbeMax DirBadPath DirEntryFound DirNoMoreEntries DumpStackOnLowSpace EnclosingMixinIndex EnclosingObjectIndex EnforceAccessControl FailImbalancedPrimitives LongStoreBytecode MaxExternalPrimitiveTableSize MaxJumpBuf MaxPrimitiveIndex MaxQuickPrimitiveIndex MethodHeaderArgCountShift MethodHeaderFlagBitPosition MethodHeaderTempCountShift MixinIndex PrimNumberDoExternalCall PrimNumberDoPrimitive PrimNumberExternalCall PrimNumberFFICall PrimitiveTable ReturnToInterpreter StackPageReachedButUntraced StackPageTraceInvalid StackPageTraced StackPageUnreached V3PrimitiveBitsMask\'\r\tpoolDictionaries: \'VMBasicConstants VMBytecodeConstants VMMethodCacheConstants VMObjectIndices VMSpurObjectRepresentationConstants VMSqueakClassIndices VMStackFrameOffsets\'\r\tcategory: \'VMMaker-Interpreter\'',				#superclassName : 'InterpreterPrimitives'			},			#name : #StackInterpreter,			#methods : IdentityDictionary { },			#protocols : Set [ ],			#instanceVariables : OrderedCollection [				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #currentBytecode,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #bytecodeSetSelector,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localFP,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localIP,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localSP,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackLimit,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackPage,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackPages,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #method,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #instructionPointer,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #stackPointer,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #framePointer,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localReturnValue,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localAbsentReceiver,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #localAbsentReceiverOrZero,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extA,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extB,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #numExtB,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #primitiveFunctionPointer,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #methodCache,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nsMethodCache,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #atCache,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lkupClassTag,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lkupClass,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #methodDictLinearSearchLimit,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #highestRunnableProcessPriority,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #reenterInterpreter,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nextWakeupUsecs,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nextPollUsecs,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #inIOProcessEvents,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interruptKeycode,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interruptPending,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #savedWindowSize,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #imageHeaderFlags,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #fullScreenFlag,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #sendWheelEvents,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #deferDisplayUpdates,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #pendingFinalizationSignals,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extraVMMemory,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interpreterProxy,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #showSurfaceFn,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #primitiveTable,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #primitiveAccessorDepthTable,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #externalPrimitiveTable,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #externalPrimitiveTableFirstFreeIndex,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #overflowedPage,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #extraFramesToMoveOnOverflow,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #globalSessionID,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #jmpBuf,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #jmpDepth,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #suspendedCallbacks,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #suspendedMethods,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #numStackPages,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #desiredNumStackPages,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #desiredEdenBytes,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #classNameIndex,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #thisClassIndex,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #metaclassNumSlots,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #interruptCheckChain,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #suppressHeartbeatFlag,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #breakSelector,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #breakSelectorLength,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #breakLookupClassTag,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveCheckMethod,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveCheckSemaphore,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveStartUsecs,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveStopUsecs,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveGCUsecs,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveCheckSequenceNumber,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #longRunningPrimitiveSignalUndelivered,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #checkAllocFiller,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #tempOop,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #tempOop2,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #metaAccessorDepth,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #theUnknownShort,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #the2ndUnknownShort,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #imageFloatsBigEndian,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #maxExtSemTabSizeSet,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lastMethodCacheProbeWrite,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #gcSemaphoreIndex,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #classByteArrayCompactIndex,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #checkedPluginName,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nativeSP,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #nativeStackPointer,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #lowcodeCalloutState,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #shadowCallStackPointer,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayBits,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayWidth,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayHeight,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #displayDepth,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statForceInterruptCheck,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statStackOverflow,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statStackPageDivorce,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statCheckForEvents,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statProcessSwitch,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statIOProcessEvents,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statPendingFinalizationSignals,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #statIdleUsecs,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #debugCallbackPath,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #debugCallbackReturns,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #debugCallbackInvokes,					#parent : @329				},				RGInstanceVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #myCurrentThread,					#parent : @329				}			],			#metaClass : RGMetaclassDefinition {				#annotations : IdentityDictionary {					#traitCompositionSource : '{}',					#definitionSource : 'StackInterpreter class\r\tinstanceVariableNames: \'\''				},				#name : #'StackInterpreter class',				#methods : IdentityDictionary { },				#protocols : Set [ ],				#instanceVariables : OrderedCollection [ ],				#baseClass : @329			},			#comment : RGCommentDefinition {				#annotations : IdentityDictionary {					#className : #StackInterpreter,					#isMetaSide : false				},				#parent : @329,				#content : 'This class is a complete implementation of the Smalltalk-80 virtual machine, derived originally from the Blue Book specification but quite different in some areas.  This VM supports Closures but *not* old-style BlockContexts.\r\rIt has been modernized with 32-bit (and indeed 64-bit) pointers, better management of Contexts (see next item), and attention to variable use that allows the CCodeGenerator (qv) to keep, eg, the instruction pointer and stack pointer in registers as well as keeping most simple variables in a global array that seems to improve performance for most platforms.\r\rThe VM does not use Contexts directly.  Instead Contexts serve as proxies for a more conventional stack format that is invisible to the image.  There is considerable explanation at http://www.mirandabanda.org/cogblog/2009/01/14/under-cover-contexts-and-the-big-frame-up.  The VM maintains a fixed-size stack zone divided into pages, each page being capable of holding several method/block activations.  A send establishes a new frame in the current stack page, a return returns to the previous frame.  This eliminates allocation/deallocation of contexts and the moving of receiver and arguments from caller to callee on each send/return.  Contexts are created lazily when an activation needs a context (creating a block, explicit use of thisContext, access to sender when sender is a frame, or linking of stack pages together).  Contexts are either conventional and heap-resident ("single") or "married" and serve as proxies for their corresponding frame or "widowed", meaning that their spouse frame has been returned from (died).  A married context is specially marked (more details in the code) and refers to its frame.  Likewise a married frame is specially marked and refers to its context.\r\rIn addition to SmallInteger arithmetic and Floats, the VM supports logic on 32-bit (and 64-bit) PositiveLargeIntegers, thus allowing it to simulate itself much more efficiently than would otherwise be the case.\r\rStackInterpreter and subclasses support multiple memory managers.  Currently there are two.  NewMemoryManager is a slightly refined version of ObjectMemory, and is the memory manager and garbage collector for the original Squeak object representation as described in "Back to the Future The Story of Squeak, A Practical Smalltalk Written in Itself", see http://ftp.squeak.org/docs/OOPSLA.Squeak.html.  Spur is a faster, more regular object representation that is designed for more performance and functionality, and to have a common header format for both 32-bit and 64-bit versions.  You can read about it in SpurMemoryManager\'s class comment.  There is also a video of a presentation at ESUG 2014 (https://www.youtube.com/watch?v=k0nBNS1aHZ4), along with slides (http://www.slideshare.net/esug/spur-a-new-object-representation-for-cog?related=1).\r\rStackInterpreter is designed toi be subclassed by CoInterpreter et al.  CoInterpreter cooperates with a bytecode to machine-code JIT compiler, for much higher performance\r\rInstance Variables\r\ratCache\r\t- a small array holding tuples of oop => format,fixedFields,size to speed up at:[put:].  Unused in CoInterpreter\r\rbreakLookupClassTag\r\t- if non-nil, the class tag to break on sends, breaking (calling warning) if there\'s a match\r\rbreakSelector\r\t- if breakSelectorLength ~= 0, a pointer to a string to compare messageSelector against on send, breaking (calling warning) if there\'s a match\r\rbreakSelectorLength\r\t- if > 0, breakSelector is checked on each send.  If < 0, breakSelector is checked on each MNU\r\rbytecodeSetSelector\r\t- if multiple bytecode sets are in use this is the offset (0 or 256) for the current bytecode set\r\rcheckAllocFiller\r\t- a variable used to fill eden to allow checking for overwriting the end of an object\r\rcheckedPluginName\r\t- the oop of a symbol which, when gcmode is GCCheckPrimCall, can check for heap memory leaks after a specific primitive has been called\r\rclassByteArrayCompactIndex\r\t- the compact class index of the class ByteArray, if appropriate\r\rclassNameIndex\r\t- the slot index of name in a class object, used or debug printing, derived from class Array at start-up\r\rcurrentBytecode\r\t- the value of the currentBytecode\r\rdebugCallbackInvokes\r\t- a counter used to debug the old (Python) callback support\r\rdebugCallbackPath\r\t- a variable used to hold the path through the new callback support\r\rdebugCallbackReturns\r\t- a counter used to debug the old (Python) callback support; it should match debugCallbackInvokes\r\rdeferDisplayUpdates\r\t- the variable that implements primitive 126, primitiveDeferDisplayUpdates\r\rdesiredEdenBytes\r\t- the desired size of eden, used at image load and snapshot time\r\rdesiredNumStackPages\r\t- the desired number of stack pages, used at image load and snapshot time\r\rdisplayBits\r\t- either the first indexable field of the current display object, or the handle of the current display surface\r\rdisplayDepth\r\t- pixel depth of the current display object or surface\r\rdisplayHeight\r\t- height in pixels of the current display object or surface\r\rdisplayWidth\r\t- width in pixels of the current display object or surface\r\rextA\r\t- if a prefix btecode set, such as SstaV1, is in use, the accumulator for extension A\r\rextB\r\t- if a prefix btecode set, such as SstaV1, is in use, the accumulator for extension B\r\rexternalPrimitiveTable\r\t- xxxxx\r\rexternalPrimitiveTableFirstFreeIndex\r\t- a small array cacheing the target function pointer for external calls (primitiveExternalCall)\r\rextraFramesToMoveOnOverflow\r\t- a variable used to prevent thrashing on sends and returns at the end of a page (see overflowedPage)\r\rextraVMMemory\r\t- in Spur, free heap to be allocated at startup.  In V3, C memory to reserve for malloc at startup (i.e. malloc extraVMMemory, alloc heap, free extraVMMemory)\r\rframePointer\r\t- the pointer to the current frame when primitives (or in the CoInterpreter, when machine-code <-> interpreter transitions) are invoked (c.f. localFP)\r\rfullScreenFlag\r\t- true if the system is in full-screen mode\r\rgcSemaphoreIndex\r\t- if non-zero, the index in the semaphore table of a semaphore to signal after any GC\r\rglobalSessionID\r\t- a non-zero number (derived from the time) identifying the current session\r\rhighestRunnableProcessPriority\r\t- a tide mark in the runnableProcesses array, used to reduce the time spent scanning the array looking for the highest priority runnable process.  This variable is set high when the priority of the highest process is unknown, and set to the highest found when the array is scanned.  Hence most of the time the nused entries in the array are not scanned.\r\rimageFloatsBigEndian\r\t- true if the order of data in floats is big-endian\r\rimageHeaderFlags\r\t- the flags stored in the image at load time or to be stored in the image at snapshto time.  These flags identify various options, sich as whether floats are in platfrm order.\r\rinIOProcessEvents\r\t- true if the system is receiving events in ioProcessEvents, used to avoid recursion when receiuving events via callbacks\r\rinstructionPointer\r\t- the pointer to the current bytecode when primitives (or in the CoInterpreter, when machine-code <-> interpreter transitions) are invoked (c.f. localIP)\r\rinterpreterProxy\r\t- the table of functions used to export interpreter and memory manager functions to plugin primitives\r\rinterruptCheckChain\r\t- if non nil a funciton pointer to be called when a user interrupt event is received, used by plugin primitives to abort long-running calls on interrupt\r\rinterruptKeycode\r\t- the keycode of the event signifying a user interrupt\r\rinterruptPending\r\t- a variable set by ioProcessEvents if a user interrupt is pending\r\rjmpBuf\r\t- a small array of jmpbufs (for setjmp/longjmp) used to manage returning in the iold (Python) callback support (see suspendedCallbacks et al)\r\rjmpDepth\r\t- the index of the next free entry in jmpBuf\r\rlastMethodCacheProbeWrite\r\t- the index of the last write into the method lookup cache, used by primitiveExternalCall to rewrite the method cache entry to call the target function, avoiding going through primitiveExternalCall on every plugin primitive dispatch\r\rlkupClass\r\t- the implicit class argument to the class hierarchy looup routines such as lookupOrdinarySend\r\rlkupClassTag\r\t- the implicit class tag argument to message send lookup\r\rlocalAbsentReceiver\r\t- Newspeak, the absent receiver in any Newspeak absent receiver send\r\rlocalAbsentReceiverOrZero\r\t- Newspeak, if non-zero, the absent receiver in any Newspeak outer absent receiver send\r\rlocalFP\r\t- the frame pointer in the fully-inlined interpret routine, hopfully allowing a C compiler to assign localFP to a register variable (c.f. framePointer)\r\rlocalIP\r\t- the instruction pointer in the fully-inlined interpret routine, hopfully allowing a C compiler to assign localFP to a register variable (c.f. instructionPointer)\r\rlocalReturnValue\r\t- the value being returned in return bytecodes\r\rlocalSP\r\t- the stack pointer in the fully-inlined interpret routine, hopfully allowing a C compiler to assign localFP to a register variable (c.f. framePointer)\r\rlongRunningPrimitiveCheckMethod\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveCheckSemaphore\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveCheckSequenceNumber\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveGCUsecs\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveSignalUndelivered\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveStartUsecs\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlongRunningPrimitiveStopUsecs\r\t- a variable used to monitor long-running primtiives via primitiveLongRunningPrimitive\r\rlowcodeCalloutState\r\t- Lowcode, the state used to marshall an outgoing Lowcode call\r\rmaxExtSemTabSizeSet\r\t- a flag stating whether the maximum size of the external semaphore table has been set or not\r\rmetaAccessorDepth\r\t- Spur, the accessor depth of a primitive being invoked by one of the meta primitive primitives, primitiveDoPrimitiveWithArgs and primitiveDoNamedPrimitiveWithArgs\r\rmetaclassNumSlots\r\t- teh size of a Metaclass instanc, set at startup, used for debug printing\r\rmethod\r\t- the oop of the current method\r\rmethodCache\r\t- a small array holding tuples of selector x class => method,functionPointer to speed up message send (avoid class hierarchy search on send)\r\rmethodDictLinearSearchLimit\r\t- a variable used to control searching of method dictionaries.  Dictionaries of size within the limit are searched linearly instead of hashed.  This can be used either to speed up search in small dictionaries or to turn off hashed lookup wen hashing needs to be changed\r\rnativeSP\r\t- Lowcode, the native (C) stack pointer (?; then why nativeStackPointer?)\r\rnativeStackPointer\r\t- Lowcode, the native (C) stack pointer (?; then why nativeSP?)\r\rnextPollUsecs\r\t- if non-zero, the micosecond clock value at which to next poll for events, used to control event polling rate\r\rnextWakeupUsecs\r\t- if non-zero, the micosecond clock value at which the next delay expires\r\rnsMethodCache\r\t- Newspeak, a small array hilding tuples of selector x class tag x calling method x privacy code => target method,primitive function,actual receiver, used to speed up Newspeak absent receiver sends\r\rnumExtB\r\t- the number of bytes in extB, used to correctly maintain extB, given that it is unsigned\r\rnumStackPages\r\t- the number of stack pages being used\r\roverflowedPage\r\t- the stack page that a send last overflowed, used to avoid thrashing on send and return at the end of a stack page (see extraFramesToMoveOnOverflow)\r\rpendingFinalizationSignals\r\t- a variable used to control signalling the finalizationSemahpore\r\rprimitiveAccessorDepthTable\r\t- Spur, the accessor depths for the iundexed primitives, used to determine how much state to scan loking for forwarders on primitive failure\r\rprimitiveFunctionPointer\r\t- the function pointer (in simulation, the selector symbol) of the current primitive, nil for newMethod if there is no primitive\r\rprimitiveTable\r\t- the table holding the functions (in simulation the selector symbols) for the indexed primitives\r\rsavedWindowSize\r\t- the display size to write into a snapshot.  Avoids writing a zero window size into a snapshot when an image is loaded headless.  \r\rshadowCallStackPointer\r\t- Lowcode, the shadow stack pointer, used when marshalling Lowcode external calls\r\rshowSurfaceFn\r\t- if non-zero, the function to call to update the display when the current display is a surface\r\rstackLimit\r\t- the variable marking the end of the current stack page, also used to break out of interpretation to check for events.  When marking the end of a page, it enables a send to create an activation on a new page,  When set so that any send would fail the stack limit check, causes a check for events on stack page overflow\r\rstackPage\r\t- the current stack page\r\rstackPages\r\t- the set of stack pages\r\rstackPointer\r\t- the pointer to the top of stack in the current frame when primitives (or in the CoInterpreter, when machine-code <-> interpreter transitions) are invoked (c.f. localSP)\r\rstatCheckForEvents\r\t- the count of checkForEventsMaybeContextSwitch: calls\r\rstatForceInterruptCheck\r\t- the count of forceInterruptCheck calls\r\rstatIOProcessEvents\r\t- the count of ioProcessEvents calls\r\rstatIdleUsecs\r\t- the count of microseconds at which the system is at idle (a bad idea; this should be replaced by its inverse; asking the OS how long the VM process has been active)\r\rstatPendingFinalizationSignals\r\t- the count of pendingFinalizationSignals\r\rstatProcessSwitch\r\t- the count of process switches\r\rstatStackOverflow\r\t- the count of stack overflows\r\rstatStackPageDivorce\r\t- the cound of stack page divorces (a stack page divorce occurs when a stack page must be freed for use)\r\rsuppressHeartbeatFlag\r\t- a flag controlling whether the heatbeat is in effect; the heartbeat is used to set stackLimit periodically to cause break out to chedck for events (see stackLimit)\r\rsuspendedCallbacks\r\t- a small array holding the processes suspended when the old callback machinery is in use (see jmpBuf et al)\r\rsuspendedMethods\r\t- a small array holding the methods of the processes suspended when the old callback machinery is in use\r\rtempOop\r\t- if non-zero, an oop that may move during primitive execution\r\rtempOop2\r\t- if non-zero, an oop that may move during primitive execution\r\rthe2ndUnknownShort\r\t- the value of a field in the image header that is unused in the StackInterpreter but used in the CoInterpreter (and hence to be preserved in snapshots)\r\rtheUnknownShort\r\t- the value of a field in the image header that is unused in the StackInterpreter but used in the CoInterpreter (and hence to be preserved in snapshots)\r\rthisClassIndex\r\t- the index in a Metaclass of thisClass (the instance of the metaclass) used in debug printing',				#stamp : ''			},			#classVariables : OrderedCollection [				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AccessModifierPrivate,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AccessModifierProtected,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AccessModifierPublic,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AltBytecodeEncoderClassName,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AltLongStoreBytecode,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AlternateHeaderHasPrimFlag,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AlternateHeaderIsOptimizedFlag,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AlternateHeaderNumLiteralsMask,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheFixedFields,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheFmt,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheMask,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheOop,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheSize,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtCacheTotalSize,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #AtPutBase,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #BytecodeEncoderClassName,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #BytecodeTable,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #CacheProbeMax,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DirBadPath,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DirEntryFound,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DirNoMoreEntries,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #DumpStackOnLowSpace,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #EnclosingMixinIndex,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #EnclosingObjectIndex,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #EnforceAccessControl,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #FailImbalancedPrimitives,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #LongStoreBytecode,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxExternalPrimitiveTableSize,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxJumpBuf,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxPrimitiveIndex,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MaxQuickPrimitiveIndex,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MethodHeaderArgCountShift,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MethodHeaderFlagBitPosition,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MethodHeaderTempCountShift,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #MixinIndex,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberDoExternalCall,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberDoPrimitive,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberExternalCall,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimNumberFFICall,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #PrimitiveTable,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #ReturnToInterpreter,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageReachedButUntraced,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageTraceInvalid,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageTraced,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #StackPageUnreached,					#parent : @329				},				RGClassVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #V3PrimitiveBitsMask,					#parent : @329				}			],			#category : #VMMaker-Interpreter,			#package : #VMMaker,			#sharedPools : OrderedCollection [				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMBasicConstants,					#parent : @329				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMBytecodeConstants,					#parent : @329				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMMethodCacheConstants,					#parent : @329				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMObjectIndices,					#parent : @329				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMSpurObjectRepresentationConstants,					#parent : @329				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMSqueakClassIndices,					#parent : @329				},				RGPoolVariableDefinition {					#annotations : IdentityDictionary {						#className : #StackInterpreter,						#isMetaSide : false					},					#name : #VMStackFrameOffsets,					#parent : @329				}			]		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:51:17.65376+01:00' ],		#prior : OmReference [ '13' ],		#self : OmReference [ '14' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\t| vmClass |\r\tself class == thisContext methodClass ifFalse: [^self]. "Don\'t duplicate decls in subclasses"\r\tvmClass := aCCodeGenerator vmClass. "Generate primitiveTable etc based on vmClass, not just StackInterpreter"\r\taCCodeGenerator\r\t\taddHeaderFile:\'<stddef.h> /* for e.g. alloca */\';\r\t\taddHeaderFile:\'<setjmp.h>\';\r\t\taddHeaderFile:\'<wchar.h> /* for wint_t */\';\r\t\taddHeaderFile:\'"vmCallback.h"\';\r\t\taddHeaderFile:\'"sqMemoryFence.h"\';\r\t\taddHeaderFile:\'"dispdbg.h"\'.\r\tLowcodeVM ifTrue: [ aCCodeGenerator addHeaderFile:\'"sqLowcodeFFI.h"\'].\r\r\tvmClass declareInterpreterVersionIn: aCCodeGenerator defaultName: \'Stack\'.\r\taCCodeGenerator\r\t\tvar: #interpreterProxy  type: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tdeclareVar: #sendTrace type: \'volatile int\';\r\t\tdeclareVar: #byteCount type: #usqInt.\r\t"These need to be pointers or unsigned."\r\tself declareC: #(instructionPointer method newMethod)\r\t\tas: #usqInt\r\t\tin: aCCodeGenerator.\r\t"These are all pointers; char * because Slang has no support for C pointer arithmetic."\r\tself declareC: #(localIP localSP localFP stackPointer framePointer stackLimit breakSelector)\r\t\tas: #\'char *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #breakSelectorLength\r\t\tdeclareC: \'sqInt breakSelectorLength = MinSmallInteger\'.\r\tself declareC: #(stackPage overflowedPage)\r\t\tas: #\'StackPage *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator removeVariable: \'stackPages\'.  "this is an implicit receiver in the translated code."\r\t"This defines bytecodeSetSelector as 0 if MULTIPLEBYTECODESETS\r\t is not defined, for the benefit of the interpreter on slow machines."\r\taCCodeGenerator addConstantForBinding: (self bindingOf: #MULTIPLEBYTECODESETS).\r\tMULTIPLEBYTECODESETS == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'bytecodeSetSelector\'].\r\tBytecodeSetHasExtensions == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'extA\';\r\t\t\tremoveVariable: \'extB\'].\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\tNewspeakVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #nsMethodCache\r\t\t\t\tdeclareC: \'sqIntptr_t nsMethodCache[NSMethodCacheSize + 1 /* \', (NSMethodCacheSize + 1) printString, \' */]\']\r\t\tifFalse:\r\t\t\t[aCCodeGenerator\r\t\t\t\tremoveVariable: #nsMethodCache;\r\t\t\t\tremoveVariable: \'localAbsentReceiver\';\r\t\t\t\tremoveVariable: \'localAbsentReceiverOrZero\'].\r\tAtCacheTotalSize isInteger ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tvar: #atCache\r\t\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'].\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void (*primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */])(void) = \', vmClass primitiveTableString.\r\tvmClass primitiveTable do:\r\t\t[:symbolOrNot|\r\t\t(symbolOrNot isSymbol\r\t\t and: [symbolOrNot ~~ #primitiveFail]) ifTrue:\r\t\t\t[(aCCodeGenerator methodNamed: symbolOrNot) ifNotNil:\r\t\t\t\t[:tMethod| tMethod returnType: #void]]].\r\tvmClass objectMemoryClass hasSpurMemoryManagerAPI\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #primitiveAccessorDepthTable\r\t\t\t\ttype: \'signed char\'\r\t\t\t\tsizeString: \'MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */\'\r\t\t\t\tarray: vmClass primitiveAccessorDepthTable]\r\t\tifFalse:\r\t\t\t[aCCodeGenerator removeVariable: #primitiveAccessorDepthTable].\r\taCCodeGenerator\r\t\tvar: #displayBits type: #\'void *\'.\r\tself declareC: #(displayWidth displayHeight displayDepth) as: #int in: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #primitiveFunctionPointer\r\t\t\tdeclareC: \'void (*primitiveFunctionPointer)()\';\r\t\tvar: #externalPrimitiveTable\r\t\t\tdeclareC: \'void (*externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */])(void)\';\r\t\tvar: #interruptCheckChain\r\t\t\tdeclareC: \'void (*interruptCheckChain)(void) = 0\';\r\t\tvar: #showSurfaceFn\r\t\t\tdeclareC: \'int (*showSurfaceFn)(sqIntptr_t, int, int, int, int)\';\r\t\tvar: #jmpBuf\r\t\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedCallbacks\r\t\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedMethods\r\t\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsUSqLong: #(nextPollUsecs nextWakeupUsecs longRunningPrimitiveGCUsecs\r\t\t\t\t\t\t\t\tlongRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs\r\t\t\t\t\t\t\t\t"these are high-frequency enough that they\'re overflowing quite quickly on modern hardware"\r\t\t\t\t\t\t\t\tstatProcessSwitch statIOProcessEvents statForceInterruptCheck\r\t\t\t\t\t\t\t\tstatCheckForEvents statStackOverflow statStackPageDivorce\r\t\t\t\t\t\t\t\tstatIdleUsecs)\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r\taCCodeGenerator\r\t\tvar: #reenterInterpreter\r\t\tdeclareC: \'jmp_buf reenterInterpreter; /* private export */\'.\r\tLowcodeVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #lowcodeCalloutState type: #\'sqLowcodeCalloutState*\'.\r\t\t\t self declareC: #(nativeSP nativeStackPointer shadowCallStackPointer)\r\t\t\t\tas: #\'char *\'\r\t\t\t\tin: aCCodeGenerator]\r\t\tifFalse:\r\t\t\t[#(lowcodeCalloutState nativeSP nativeStackPointer shadowCallStackPointer) do:\r\t\t\t\t[:var| aCCodeGenerator removeVariable: var]]',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\t| vmClass |\r\tself class == thisContext methodClass ifFalse: [^self]. "Don\'t duplicate decls in subclasses"\r\tvmClass := aCCodeGenerator vmClass. "Generate primitiveTable etc based on vmClass, not just StackInterpreter"\r\taCCodeGenerator\r\t\taddHeaderFile:\'<stddef.h> /* for e.g. alloca */\';\r\t\taddHeaderFile:\'<setjmp.h>\';\r\t\taddHeaderFile:\'<wchar.h> /* for wint_t */\';\r\t\taddHeaderFile:\'"vmCallback.h"\';\r\t\taddHeaderFile:\'"sqMemoryFence.h"\';\r\t\taddHeaderFile:\'"dispdbg.h"\'.\r\tLowcodeVM ifTrue: [ aCCodeGenerator addHeaderFile:\'"sqLowcodeFFI.h"\'].\r\r\tvmClass declareInterpreterVersionIn: aCCodeGenerator defaultName: \'Stack\'.\r\taCCodeGenerator\r\t\tvar: #interpreterProxy  type: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tdeclareVar: #sendTrace type: \'volatile int\';\r\t\tdeclareVar: #byteCount type: #usqInt;\r\t\tdeclareVar: #myCurrentThread type: \'pthread_t\'.\r\t"These need to be pointers or unsigned."\r\tself declareC: #(instructionPointer method newMethod)\r\t\tas: #usqInt\r\t\tin: aCCodeGenerator.\r\t"These are all pointers; char * because Slang has no support for C pointer arithmetic."\r\tself declareC: #(localIP localSP localFP stackPointer framePointer stackLimit breakSelector)\r\t\tas: #\'char *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #breakSelectorLength\r\t\tdeclareC: \'sqInt breakSelectorLength = MinSmallInteger\'.\r\tself declareC: #(stackPage overflowedPage)\r\t\tas: #\'StackPage *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator removeVariable: \'stackPages\'.  "this is an implicit receiver in the translated code."\r\t"This defines bytecodeSetSelector as 0 if MULTIPLEBYTECODESETS\r\t is not defined, for the benefit of the interpreter on slow machines."\r\taCCodeGenerator addConstantForBinding: (self bindingOf: #MULTIPLEBYTECODESETS).\r\tMULTIPLEBYTECODESETS == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'bytecodeSetSelector\'].\r\tBytecodeSetHasExtensions == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'extA\';\r\t\t\tremoveVariable: \'extB\'].\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\tNewspeakVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #nsMethodCache\r\t\t\t\tdeclareC: \'sqIntptr_t nsMethodCache[NSMethodCacheSize + 1 /* \', (NSMethodCacheSize + 1) printString, \' */]\']\r\t\tifFalse:\r\t\t\t[aCCodeGenerator\r\t\t\t\tremoveVariable: #nsMethodCache;\r\t\t\t\tremoveVariable: \'localAbsentReceiver\';\r\t\t\t\tremoveVariable: \'localAbsentReceiverOrZero\'].\r\tAtCacheTotalSize isInteger ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tvar: #atCache\r\t\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'].\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void (*primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */])(void) = \', vmClass primitiveTableString.\r\tvmClass primitiveTable do:\r\t\t[:symbolOrNot|\r\t\t(symbolOrNot isSymbol\r\t\t and: [symbolOrNot ~~ #primitiveFail]) ifTrue:\r\t\t\t[(aCCodeGenerator methodNamed: symbolOrNot) ifNotNil:\r\t\t\t\t[:tMethod| tMethod returnType: #void]]].\r\tvmClass objectMemoryClass hasSpurMemoryManagerAPI\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #primitiveAccessorDepthTable\r\t\t\t\ttype: \'signed char\'\r\t\t\t\tsizeString: \'MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */\'\r\t\t\t\tarray: vmClass primitiveAccessorDepthTable]\r\t\tifFalse:\r\t\t\t[aCCodeGenerator removeVariable: #primitiveAccessorDepthTable].\r\taCCodeGenerator\r\t\tvar: #displayBits type: #\'void *\'.\r\tself declareC: #(displayWidth displayHeight displayDepth) as: #int in: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #primitiveFunctionPointer\r\t\t\tdeclareC: \'void (*primitiveFunctionPointer)()\';\r\t\tvar: #externalPrimitiveTable\r\t\t\tdeclareC: \'void (*externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */])(void)\';\r\t\tvar: #interruptCheckChain\r\t\t\tdeclareC: \'void (*interruptCheckChain)(void) = 0\';\r\t\tvar: #showSurfaceFn\r\t\t\tdeclareC: \'int (*showSurfaceFn)(sqIntptr_t, int, int, int, int)\';\r\t\tvar: #jmpBuf\r\t\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedCallbacks\r\t\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedMethods\r\t\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsUSqLong: #(nextPollUsecs nextWakeupUsecs longRunningPrimitiveGCUsecs\r\t\t\t\t\t\t\t\tlongRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs\r\t\t\t\t\t\t\t\t"these are high-frequency enough that they\'re overflowing quite quickly on modern hardware"\r\t\t\t\t\t\t\t\tstatProcessSwitch statIOProcessEvents statForceInterruptCheck\r\t\t\t\t\t\t\t\tstatCheckForEvents statStackOverflow statStackPageDivorce\r\t\t\t\t\t\t\t\tstatIdleUsecs)\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r\taCCodeGenerator\r\t\tvar: #reenterInterpreter\r\t\tdeclareC: \'jmp_buf reenterInterpreter; /* private export */\'.\r\tLowcodeVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #lowcodeCalloutState type: #\'sqLowcodeCalloutState*\'.\r\t\t\t self declareC: #(nativeSP nativeStackPointer shadowCallStackPointer)\r\t\t\t\tas: #\'char *\'\r\t\t\t\tin: aCCodeGenerator]\r\t\tifFalse:\r\t\t\t[#(lowcodeCalloutState nativeSP nativeStackPointer shadowCallStackPointer) do:\r\t\t\t\t[:var| aCCodeGenerator removeVariable: var]]',			#stamp : 'Pablo 10/30/2019 15:51',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:51:55.952839+01:00' ],		#prior : OmReference [ '14' ],		#self : OmReference [ '15' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _:index\r\t',			#stamp : 'Pablo 10/30/2019 15:51',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:52:52.634709+01:00' ],		#prior : OmReference [ '15' ],		#self : OmReference [ '16' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _:index\r\t',			#stamp : 'Pablo 10/30/2019 15:51',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _:index\r\t<var: #aThread type: \'pthread_t\'>\r\t<var: #index type: \'size_t\'>\r\t\r',			#stamp : 'Pablo 10/30/2019 15:52',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:54:13.515305+01:00' ],		#prior : OmReference [ '16' ],		#self : OmReference [ '17' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _:index\r\t<var: #aThread type: \'pthread_t\'>\r\t<var: #index type: \'size_t\'>\r\t\r',			#stamp : 'Pablo 10/30/2019 15:52',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _:index\r\t<var: #aThread type: \'pthread_t\'>\r\t<var: #index type: \'size_t\'>\r\t\r\tself cCode: \'all_threads_global[index].MyCurrentThread=thread;\' inSmalltalk: [ myCurrentThread := aThread ]\r\t\r',			#stamp : 'Pablo 10/30/2019 15:54',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:54:17.850333+01:00' ],		#prior : OmReference [ '17' ],		#self : OmReference [ '18' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _:index\r\t<var: #aThread type: \'pthread_t\'>\r\t<var: #index type: \'size_t\'>\r\t\r\tself cCode: \'all_threads_global[index].MyCurrentThread=thread;\' inSmalltalk: [ myCurrentThread := aThread ]\r\t\r',			#stamp : 'Pablo 10/30/2019 15:54',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #'setMyCurrentThread:_:',			#protocol : #simulation,			#sourceCode : 'setMyCurrentThread: aThread _: index\r\t<var: #aThread type: \'pthread_t\'>\r\t<var: #index type: \'size_t\'>\r\r\tself\r\t\tcCode: \'all_threads_global[index].MyCurrentThread=thread;\'\r\t\tinSmalltalk: [ myCurrentThread := aThread ]',			#stamp : 'Pablo 10/30/2019 15:54',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:56:25.337644+01:00' ],		#prior : OmReference [ '18' ],		#self : OmReference [ '19' ]	},	#content : EpMethodAddition {		#method : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #returnGlobalStructForCurrentThread,			#protocol : #utilities,			#sourceCode : 'returnGlobalStructForCurrentThread\r\t<returnTypeC: #\'struct foo *\'>\r\tself\r\t\tcCode:\r\'  pthread_t selfThread = pthread_self();\r\tfor(int i=0; i<2; i++){\r\t\tif(all_threads_global[i].MyCurrentThread==selfThread){\r\t\t\treturn &all_threads_global[i];\r\t\t}\r\t}\'',			#stamp : 'Pablo 10/30/2019 15:56',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:56:31.335083+01:00' ],		#prior : OmReference [ '19' ],		#self : OmReference [ '20' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #returnGlobalStructForCurrentThread,			#protocol : #utilities,			#sourceCode : 'returnGlobalStructForCurrentThread\r\t<returnTypeC: #\'struct foo *\'>\r\tself\r\t\tcCode:\r\'  pthread_t selfThread = pthread_self();\r\tfor(int i=0; i<2; i++){\r\t\tif(all_threads_global[i].MyCurrentThread==selfThread){\r\t\t\treturn &all_threads_global[i];\r\t\t}\r\t}\'',			#stamp : 'Pablo 10/30/2019 15:56',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #returnGlobalStructForCurrentThread,			#protocol : #utilities,			#sourceCode : 'returnGlobalStructForCurrentThread\r\t<returnTypeC: #\'struct foo *\'>\r\tself\r\t\tcCode:\'\r\tpthread_t selfThread = pthread_self();\r\tfor(int i=0; i<2; i++){\r\t\tif(all_threads_global[i].MyCurrentThread==selfThread){\r\t\t\treturn &all_threads_global[i];\r\t\t}\r\t}\'',			#stamp : 'Pablo 10/30/2019 15:56',			#package : #VMMaker		}	}}