OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T16:40:40.139574+01:00' ],		#prior : OmReference [ 'Pharo7.0.4-0-32bit-ccd1f64.5z0xgjiaa5hsaylrz8cr497ad', '2' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\t| vmClass |\r\tself class == thisContext methodClass ifFalse: [^self]. "Don\'t duplicate decls in subclasses"\r\tvmClass := aCCodeGenerator vmClass. "Generate primitiveTable etc based on vmClass, not just StackInterpreter"\r\taCCodeGenerator\r\t\taddHeaderFile:\'<stddef.h> /* for e.g. alloca */\';\r\t\taddHeaderFile:\'<setjmp.h>\';\r\t\taddHeaderFile:\'<wchar.h> /* for wint_t */\';\r\t\taddHeaderFile:\'"vmCallback.h"\';\r\t\taddHeaderFile:\'"sqMemoryFence.h"\';\r\t\taddHeaderFile:\'"dispdbg.h"\'.\r\tLowcodeVM ifTrue: [ aCCodeGenerator addHeaderFile:\'"sqLowcodeFFI.h"\'].\r\r\tvmClass declareInterpreterVersionIn: aCCodeGenerator defaultName: \'Stack\'.\r\taCCodeGenerator\r\t\tvar: #interpreterProxy  type: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tdeclareVar: #sendTrace type: \'volatile int\';\r\t\tdeclareVar: #byteCount type: #usqInt;\r\t\tdeclareVar: #myCurrentThread type: \'pthread_t\';\r\t\tvar: #primitiveFunctionPointer declareC: \'void (*primitiveFunctionPointer)()\'.\r\t\t\r\t"These need to be pointers or unsigned."\r\tself declareC: #(instructionPointer method newMethod)\r\t\tas: #usqInt\r\t\tin: aCCodeGenerator.\r\t"These are all pointers; char * because Slang has no support for C pointer arithmetic."\r\tself declareC: #(localIP localSP localFP stackPointer framePointer stackLimit breakSelector)\r\t\tas: #\'char *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #breakSelectorLength\r\t\tdeclareC: \'sqInt breakSelectorLength = MinSmallInteger\'.\r\tself declareC: #(stackPage overflowedPage)\r\t\tas: #\'StackPage *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator removeVariable: \'stackPages\'.  "this is an implicit receiver in the translated code."\r\t"This defines bytecodeSetSelector as 0 if MULTIPLEBYTECODESETS\r\t is not defined, for the benefit of the interpreter on slow machines."\r\taCCodeGenerator addConstantForBinding: (self bindingOf: #MULTIPLEBYTECODESETS).\r\tMULTIPLEBYTECODESETS == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'bytecodeSetSelector\'].\r\tBytecodeSetHasExtensions == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'extA\';\r\t\t\tremoveVariable: \'extB\'].\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\tNewspeakVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #nsMethodCache\r\t\t\t\tdeclareC: \'sqIntptr_t nsMethodCache[NSMethodCacheSize + 1 /* \', (NSMethodCacheSize + 1) printString, \' */]\']\r\t\tifFalse:\r\t\t\t[aCCodeGenerator\r\t\t\t\tremoveVariable: #nsMethodCache;\r\t\t\t\tremoveVariable: \'localAbsentReceiver\';\r\t\t\t\tremoveVariable: \'localAbsentReceiverOrZero\'].\r\tAtCacheTotalSize isInteger ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tvar: #atCache\r\t\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'].\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void (*primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */])(void) = \', vmClass primitiveTableString.\r\tvmClass primitiveTable do:\r\t\t[:symbolOrNot|\r\t\t(symbolOrNot isSymbol\r\t\t and: [symbolOrNot ~~ #primitiveFail]) ifTrue:\r\t\t\t[(aCCodeGenerator methodNamed: symbolOrNot) ifNotNil:\r\t\t\t\t[:tMethod| tMethod returnType: #void]]].\r\tvmClass objectMemoryClass hasSpurMemoryManagerAPI\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #primitiveAccessorDepthTable\r\t\t\t\ttype: \'signed char\'\r\t\t\t\tsizeString: \'MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */\'\r\t\t\t\tarray: vmClass primitiveAccessorDepthTable]\r\t\tifFalse:\r\t\t\t[aCCodeGenerator removeVariable: #primitiveAccessorDepthTable].\r\taCCodeGenerator\r\t\tvar: #displayBits type: #\'void *\'.\r\tself declareC: #(displayWidth displayHeight displayDepth) as: #int in: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #externalPrimitiveTable\r\t\t\tdeclareC: \'void (*externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */])(void)\';\r\t\tvar: #interruptCheckChain\r\t\t\tdeclareC: \'void (*interruptCheckChain)(void) = 0\';\r\t\tvar: #showSurfaceFn\r\t\t\tdeclareC: \'int (*showSurfaceFn)(sqIntptr_t, int, int, int, int)\';\r\t\tvar: #jmpBuf\r\t\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedCallbacks\r\t\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedMethods\r\t\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsUSqLong: #(nextPollUsecs nextWakeupUsecs longRunningPrimitiveGCUsecs\r\t\t\t\t\t\t\t\tlongRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs\r\t\t\t\t\t\t\t\t"these are high-frequency enough that they\'re overflowing quite quickly on modern hardware"\r\t\t\t\t\t\t\t\tstatProcessSwitch statIOProcessEvents statForceInterruptCheck\r\t\t\t\t\t\t\t\tstatCheckForEvents statStackOverflow statStackPageDivorce\r\t\t\t\t\t\t\t\tstatIdleUsecs)\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r\taCCodeGenerator\r\t\tvar: #reenterInterpreter\r\t\tdeclareC: \'jmp_buf reenterInterpreter; /* private export */\'.\r\tLowcodeVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #lowcodeCalloutState type: #\'sqLowcodeCalloutState*\'.\r\t\t\t self declareC: #(nativeSP nativeStackPointer shadowCallStackPointer)\r\t\t\t\tas: #\'char *\'\r\t\t\t\tin: aCCodeGenerator]\r\t\tifFalse:\r\t\t\t[#(lowcodeCalloutState nativeSP nativeStackPointer shadowCallStackPointer) do:\r\t\t\t\t[:var| aCCodeGenerator removeVariable: var]]',			#stamp : 'Pablo 10/30/2019 16:34',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'declareCVarsIn:',			#protocol : #translation,			#sourceCode : 'declareCVarsIn: aCCodeGenerator\r\t| vmClass |\r\tself class == thisContext methodClass ifFalse: [^self]. "Don\'t duplicate decls in subclasses"\r\tvmClass := aCCodeGenerator vmClass. "Generate primitiveTable etc based on vmClass, not just StackInterpreter"\r\taCCodeGenerator\r\t\taddHeaderFile:\'<stddef.h> /* for e.g. alloca */\';\r\t\taddHeaderFile:\'<setjmp.h>\';\r\t\taddHeaderFile:\'<wchar.h> /* for wint_t */\';\r\t\taddHeaderFile:\'"vmCallback.h"\';\r\t\taddHeaderFile:\'"sqMemoryFence.h"\';\r\t\taddHeaderFile:\'"dispdbg.h"\'.\r\tLowcodeVM ifTrue: [ aCCodeGenerator addHeaderFile:\'"sqLowcodeFFI.h"\'].\r\r\tvmClass declareInterpreterVersionIn: aCCodeGenerator defaultName: \'Stack\'.\r\taCCodeGenerator\r\t\tvar: #interpreterProxy  type: #\'struct VirtualMachine*\'.\r\taCCodeGenerator\r\t\tdeclareVar: #sendTrace type: \'volatile int\';\r\t\tdeclareVar: #byteCount type: #usqInt;\r\t\tdeclareVar: #myCurrentThread type: \'pthread_t\';\r\t\tvar: #primitiveFunctionPointer2 declareC: \'void (*primitiveFunctionPointer2)()\';\r\t\tvar: #primitiveFunctionPointer declareC: \'void (*primitiveFunctionPointer)()\'.\r\t\t\r\t"These need to be pointers or unsigned."\r\tself declareC: #(instructionPointer method newMethod)\r\t\tas: #usqInt\r\t\tin: aCCodeGenerator.\r\t"These are all pointers; char * because Slang has no support for C pointer arithmetic."\r\tself declareC: #(localIP localSP localFP stackPointer framePointer stackLimit breakSelector)\r\t\tas: #\'char *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #breakSelectorLength\r\t\tdeclareC: \'sqInt breakSelectorLength = MinSmallInteger\'.\r\tself declareC: #(stackPage overflowedPage)\r\t\tas: #\'StackPage *\'\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator removeVariable: \'stackPages\'.  "this is an implicit receiver in the translated code."\r\t"This defines bytecodeSetSelector as 0 if MULTIPLEBYTECODESETS\r\t is not defined, for the benefit of the interpreter on slow machines."\r\taCCodeGenerator addConstantForBinding: (self bindingOf: #MULTIPLEBYTECODESETS).\r\tMULTIPLEBYTECODESETS == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'bytecodeSetSelector\'].\r\tBytecodeSetHasExtensions == false ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tremoveVariable: \'extA\';\r\t\t\tremoveVariable: \'extB\'].\r\taCCodeGenerator\r\t\tvar: #methodCache\r\t\tdeclareC: \'sqIntptr_t methodCache[MethodCacheSize + 1 /* \', (MethodCacheSize + 1) printString, \' */]\'.\r\tNewspeakVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #nsMethodCache\r\t\t\t\tdeclareC: \'sqIntptr_t nsMethodCache[NSMethodCacheSize + 1 /* \', (NSMethodCacheSize + 1) printString, \' */]\']\r\t\tifFalse:\r\t\t\t[aCCodeGenerator\r\t\t\t\tremoveVariable: #nsMethodCache;\r\t\t\t\tremoveVariable: \'localAbsentReceiver\';\r\t\t\t\tremoveVariable: \'localAbsentReceiverOrZero\'].\r\tAtCacheTotalSize isInteger ifTrue:\r\t\t[aCCodeGenerator\r\t\t\tvar: #atCache\r\t\t\tdeclareC: \'sqInt atCache[AtCacheTotalSize + 1 /* \', (AtCacheTotalSize + 1) printString, \' */]\'].\r\taCCodeGenerator\r\t\tvar: #primitiveTable\r\t\tdeclareC: \'void (*primitiveTable[MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */])(void) = \', vmClass primitiveTableString.\r\tvmClass primitiveTable do:\r\t\t[:symbolOrNot|\r\t\t(symbolOrNot isSymbol\r\t\t and: [symbolOrNot ~~ #primitiveFail]) ifTrue:\r\t\t\t[(aCCodeGenerator methodNamed: symbolOrNot) ifNotNil:\r\t\t\t\t[:tMethod| tMethod returnType: #void]]].\r\tvmClass objectMemoryClass hasSpurMemoryManagerAPI\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #primitiveAccessorDepthTable\r\t\t\t\ttype: \'signed char\'\r\t\t\t\tsizeString: \'MaxPrimitiveIndex + 2 /* \', (MaxPrimitiveIndex + 2) printString, \' */\'\r\t\t\t\tarray: vmClass primitiveAccessorDepthTable]\r\t\tifFalse:\r\t\t\t[aCCodeGenerator removeVariable: #primitiveAccessorDepthTable].\r\taCCodeGenerator\r\t\tvar: #displayBits type: #\'void *\'.\r\tself declareC: #(displayWidth displayHeight displayDepth) as: #int in: aCCodeGenerator.\r\taCCodeGenerator\r\t\tvar: #externalPrimitiveTable\r\t\t\tdeclareC: \'void (*externalPrimitiveTable[MaxExternalPrimitiveTableSize + 1 /* \', (MaxExternalPrimitiveTableSize + 1) printString, \' */])(void)\';\r\t\tvar: #interruptCheckChain\r\t\t\tdeclareC: \'void (*interruptCheckChain)(void) = 0\';\r\t\tvar: #showSurfaceFn\r\t\t\tdeclareC: \'int (*showSurfaceFn)(sqIntptr_t, int, int, int, int)\';\r\t\tvar: #jmpBuf\r\t\t\tdeclareC: \'jmp_buf jmpBuf[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedCallbacks\r\t\t\tdeclareC: \'usqInt suspendedCallbacks[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\';\r\t\tvar: #suspendedMethods\r\t\t\tdeclareC: \'usqInt suspendedMethods[MaxJumpBuf + 1 /* \', (MaxJumpBuf + 1) printString, \' */]\'.\r\r\tself declareCAsUSqLong: #(nextPollUsecs nextWakeupUsecs longRunningPrimitiveGCUsecs\r\t\t\t\t\t\t\t\tlongRunningPrimitiveStartUsecs longRunningPrimitiveStopUsecs\r\t\t\t\t\t\t\t\t"these are high-frequency enough that they\'re overflowing quite quickly on modern hardware"\r\t\t\t\t\t\t\t\tstatProcessSwitch statIOProcessEvents statForceInterruptCheck\r\t\t\t\t\t\t\t\tstatCheckForEvents statStackOverflow statStackPageDivorce\r\t\t\t\t\t\t\t\tstatIdleUsecs)\r\t\tin: aCCodeGenerator.\r\taCCodeGenerator var: #nextProfileTick type: #sqLong.\r\taCCodeGenerator\r\t\tvar: #reenterInterpreter\r\t\tdeclareC: \'jmp_buf reenterInterpreter; /* private export */\'.\r\tLowcodeVM\r\t\tifTrue:\r\t\t\t[aCCodeGenerator\r\t\t\t\tvar: #lowcodeCalloutState type: #\'sqLowcodeCalloutState*\'.\r\t\t\t self declareC: #(nativeSP nativeStackPointer shadowCallStackPointer)\r\t\t\t\tas: #\'char *\'\r\t\t\t\tin: aCCodeGenerator]\r\t\tifFalse:\r\t\t\t[#(lowcodeCalloutState nativeSP nativeStackPointer shadowCallStackPointer) do:\r\t\t\t\t[:var| aCCodeGenerator removeVariable: var]]',			#stamp : 'Pablo 10/30/2019 16:40',			#package : #VMMaker		}	}}