OmEntry {	#tags : {		#author : 'Unknown',		#time : DateAndTime [ '2019-10-30T15:39:06.803439+01:00' ],		#prior : OmReference [ 'Pharo7.0.4-0-32bit-ccd1f64.4svlw3xd6rcs0jrgkc42bkhiu', '17302' ],		#self : OmReference [ '1' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #checkForLastObjectOverwrite,			#protocol : #simulation,			#sourceCode : 'checkForLastObjectOverwrite\r\t<doNotGenerate>\r\t| freeStart |\r\tcheckAllocFiller ifTrue: \r\t\t[self assert: ((freeStart := objectMemory freeStart) >= objectMemory scavengeThreshold\r\t\t\t\t\t  or: [(objectMemory longAt: freeStart) = freeStart])]',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #checkForLastObjectOverwrite,			#protocol : #simulation,			#sourceCode : 'checkForLastObjectOverwrite\r\t<doNotGenerate>\r\t| freeStart |\r\tself checkAllocFiller ifTrue: \r\t\t[self assert: ((freeStart := objectMemory freeStart) >= objectMemory scavengeThreshold\r\t\t\t\t\t  or: [(objectMemory longAt: freeStart) = freeStart])]',			#stamp : 'Anonymous 10/30/2019 15:39',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:39:20.454543+01:00' ],		#prior : OmReference [ '1' ],		#self : OmReference [ '2' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #maybeFailForLastObjectOverwrite,			#protocol : #'primitive support',			#sourceCode : 'maybeFailForLastObjectOverwrite\r\t<inline: true>\r\tcheckAllocFiller ifTrue: \r\t\t[(objectMemory freeStart < objectMemory scavengeThreshold\r\t\t  and: [(objectMemory longAt: objectMemory freeStart) ~= objectMemory freeStart]) ifTrue:\r\t\t\t[self primitiveFailFor: PrimErrWritePastObject]]',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #StackInterpreter,				#isMetaSide : false			},			#name : #maybeFailForLastObjectOverwrite,			#protocol : #'primitive support',			#sourceCode : 'maybeFailForLastObjectOverwrite\r\t<inline: true>\r\tself checkAllocFiller ifTrue: \r\t\t[(objectMemory freeStart < objectMemory scavengeThreshold\r\t\t  and: [(objectMemory longAt: objectMemory freeStart) ~= objectMemory freeStart]) ifTrue:\r\t\t\t[self primitiveFailFor: PrimErrWritePastObject]]',			#stamp : 'Pablo 10/30/2019 15:39',			#package : #VMMaker		}	}}OmEntry {	#tags : {		#author : 'Pablo',		#time : DateAndTime [ '2019-10-30T15:42:04.648061+01:00' ],		#prior : OmReference [ '2' ],		#self : OmReference [ '3' ]	},	#content : EpMethodModification {		#oldMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'mustBeGlobal:',			#protocol : #translation,			#sourceCode : 'mustBeGlobal: var\r\t"Answer if a variable must be global and exported.  Used for inst vars that are accessed from VM support code."\r\r\t^(super mustBeGlobal: var)\r\t   or: [(self objectMemoryClass mustBeGlobal: var)\r\t   or: [(#(\'interpreterProxy\' \'interpreterVersion\' \'inIOProcessEvents\' \'sendWheelEvents\'\r\t\t\t\'deferDisplayUpdates\' \'extraVMMemory\'\r\t\t\t\'showSurfaceFn\' \'displayBits\' \'displayWidth\' \'displayHeight\' \'displayDepth\'\r\t\t\t\'desiredNumStackPages\' \'desiredEdenBytes\'\r\t\t\t\'breakLookupClassTag\' \'breakSelector\' \'breakSelectorLength\' \'sendTrace\' \'checkAllocFiller\' \'checkedPluginName\'\r\t\t\t\'reenterInterpreter\' \'suppressHeartbeatFlag\' \'ffiExceptionResponse\'\r\t\t\t\'debugCallbackInvokes\' \'debugCallbackPath\' \'debugCallbackReturns\') includes: var)\r\t   or: [ "This allows slow machines to define bytecodeSetSelector as 0\r\t\t\tto avoid the interpretation overhead."\r\t\t\tMULTIPLEBYTECODESETS not and: [var = \'bytecodeSetSelector\']]]]',			#stamp : '',			#package : #VMMaker		},		#newMethod : RGMethodDefinition {			#annotations : IdentityDictionary {				#className : #'StackInterpreter class',				#isMetaSide : true			},			#name : #'mustBeGlobal:',			#protocol : #translation,			#sourceCode : 'mustBeGlobal: var\r\t"Answer if a variable must be global and exported.  Used for inst vars that are accessed from VM support code."\r\r\t^(super mustBeGlobal: var)\r\t   or: [(self objectMemoryClass mustBeGlobal: var)\r\t   or: [(#(\'interpreterProxy\' \'interpreterVersion\' \'inIOProcessEvents\' \'sendWheelEvents\'\r\t\t\t\'deferDisplayUpdates\' \'extraVMMemory\'\r\t\t\t\'showSurfaceFn\' \'displayBits\' \'displayWidth\' \'displayHeight\' \'displayDepth\'\r\t\t\t\'desiredNumStackPages\' \'desiredEdenBytes\'\r\t\t\t\'breakLookupClassTag\' \'breakSelector\' \'breakSelectorLength\' \'sendTrace\' \'checkedPluginName\'\r\t\t\t\'reenterInterpreter\' \'suppressHeartbeatFlag\' \'ffiExceptionResponse\'\r\t\t\t\'debugCallbackInvokes\' \'debugCallbackPath\' \'debugCallbackReturns\') includes: var)\r\t   or: [ "This allows slow machines to define bytecodeSetSelector as 0\r\t\t\tto avoid the interpretation overhead."\r\t\t\tMULTIPLEBYTECODESETS not and: [var = \'bytecodeSetSelector\']]]]',			#stamp : 'Pablo 10/30/2019 15:42',			#package : #VMMaker		}	}}